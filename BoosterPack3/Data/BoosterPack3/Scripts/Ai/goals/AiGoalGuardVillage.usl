class CAiGoalGuardVillage inherit CAiGoalGeneralAttack

	var CAiObjWrap				m_xLastEnemy;
	var CAiObjWrapList			m_xTargets;
	var CAiObjWrapList			m_xLongRangeFighters;
	var CAiObjWrapList			m_xGuardRangeList;
	var CAiTaskUnitSupervisor	m_xSupervisor;
	var ^CAiGoalMinistryOfDefense m_pxMOD;
	var ^CAiMaps				m_pxMaps;
	var ^CAiModuleDefenseDefault m_pxDM;
	var ^CAiModuleFightDefault 	m_pxFM;
	
	static var int 				ms_iHelpTimerInit;
	var int						m_iHelpCallTimer;
	var int 					m_iMapWidth;
	var int						m_iMapHeight;
	var int 					m_iRallypoint;
	var int						m_iUnits;
	var int						m_iGuardPosCounter;
	var int						m_iDefensePointCounter;
	var int						m_iCalculateGuardRangeCounter;
	
	var vec3					m_vBasePos;
	var vec3					m_vOldGuardPos;
	var vec3					m_vStartLocationPos;	
	var vec3					m_vOldDefensePoint;
	var vec3					m_vGuardPos;
	var vec3					m_vHarbourPos;
	
	var real					m_fBaseRange;	
	var real					m_fGuardRange;
	
	var string					m_sArmy;
	var string					m_sDefensePoolID;
	var string					m_sGameType;
	
	var bool					m_bBackToBase;		
	var bool					m_bRetreat;
	var bool					m_bIsMainPool;		
	var bool 					m_bOnce;	
	var bool					m_bMultimap;	
	var bool					m_bDefenderplayer;
	var bool					m_bHuntAnimal;
	var bool					m_bDefending;
	
		
	///Init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		if(p_pxBrain==null)then return false; endif;
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		m_sTribe=m_pxSensor^.GetTechTree().GetTribe();
		
		m_bMultimap=m_pxSensor^.GetMultimap();
		m_bHuntAnimal=m_pxSensor^.GetHuntAnimal();		
		m_sGameType=CAiUtilityMgr.Get()^.GetGameType(m_pxBrain);
		m_bDefenderplayer=CAiUtilityMgr.Get()^.IsDefenderPlayer(m_iPlayerID);
		
		m_pxDM=cast<CAiModuleDefenseDefault>(m_pxBrain^.GetDefenseModule());
		m_pxFM=cast<CAiModuleFightDefault>(m_pxBrain^.GetFightModule());	

		m_xOnEnemiesFound = OnEnemiesFound;
		m_xOnCalculateEnemyValue = OnCalculateValue;
		
		GetEnemyQuery().AddMyEnemiesToSearch(m_iPlayerID, true);
		GetEnemyQuery().SetType("CHTR");
		GetEnemyQuery().SetType("ANML",true);
		GetEnemyQuery().SetType("VHCL",true);
		GetEnemyQuery().SetType("BLDG",true);
		GetEnemyQuery().SetType("NEST",true);
		
		m_xSupervisor.Init(this);
		m_xSupervisor.SetPriority(10.0f);
		RemoveTask(^m_xSupervisor);
		AddTask(^m_xSupervisor);
				
		if(m_pxMaps!=null)then
			m_iMapWidth=m_pxMaps^.GetMapWidth();
			m_iMapHeight=m_pxMaps^.GetMapHeight();
		endif;
		
		m_vStartLocationPos=m_pxSensor^.GetStartLocation();		
		SetBase(m_vStartLocationPos,60.0f);
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
		var int iType = 15+Random.GetInt()%iNumPlayers;
	
		SetGuardRange(30.0f);
		SetThinkWait(10+iType);
		
		m_iHelpCallTimer=0;
		ms_iHelpTimerInit=10;
		m_iUnits=0;
		m_iRallypoint=0;
		m_iGuardPosCounter=0;
		m_iCalculateGuardRangeCounter=0;
		m_iDefensePointCounter=0;	
		
		m_bBackToBase=false;
		m_bRetreat = true;
		m_bIsMainPool = true;
		m_bOnce=false;
		m_bDefending=false;

		m_vOldGuardPos={0.0,0.0,0.0};
		m_vOldDefensePoint={0.0,0.0,0.0};
		m_vHarbourPos={0.0,0.0,0.0};
		
		m_pxMOD = GetMOD();
		
		m_sState = "sleep";
		return true;
	endproc;
	
	
	///SetDefensePoolID
	export proc void SetDefensePoolID(string p_sDefensePoolID)
		m_sDefensePoolID = p_sDefensePoolID;
	endproc;
	
	
	///Shut
	export proc void Shut()
		m_xSupervisor.Shut();
		RemoveTask(^m_xSupervisor);
		super.Shut();
	endproc;
	
	
	///SetMainPool
	export proc void SetMainPool(bool p_bMainPool)
		m_bIsMainPool = p_bMainPool;
	endproc;
	
	
	///IsMainPool
	export proc bool IsMainPool()
		return m_bIsMainPool;
	endproc;
	
	
	///IsDefending
	export proc bool IsDefending()
		return m_bRetreat == false;
	endproc;
	

	///AddUnits
	export proc void AddUnits(CAiObjWrapList p_xUnits)
		var int i, iC = p_xUnits.Validate();
		for(i=0)cond(i<iC)iter(i++)do
			m_xFighters.AddEntry(p_xUnits[i]);
		endfor;
		
		if(GetKindergarten())then
			if(m_pxFM != null)then
				m_pxFM^.AddToKindergarten(p_xUnits);
			endif;
		endif;
		
		UpdateFighters();
		m_xSupervisor.AddUnits(p_xUnits);
	endproc;


	///RemoveUnits
	export proc void RemoveUnits(CAiObjWrapList p_xUnits, bool p_bUnlock)
		var int i, iC = p_xUnits.Validate();
		for(i=0)cond(i<iC)iter(i++)do
			m_xFighters.RemEntry(p_xUnits[i]);
			if(GetKindergarten())then
				if(m_pxFM!=null)then
					m_pxFM^.RemoveFromKindergarten(p_xUnits[i]);
				endif;
			endif;
		endfor;
		
		UpdateFighters();
		m_xSupervisor.RemoveUnits(p_xUnits, p_bUnlock);
	endproc;


	///GetUnitSupervisor
	export proc ref CAiTaskUnitSupervisor GetUnitSupervisor()
		return m_xSupervisor;
	endproc;
	
	
	///CheckCompletion
	export proc bool CheckCompletion()
		if(m_xEnemies.Validate()>0)then
			return false;
		endif;	
		return true;
	endproc;


	///OnEnemiesFound
	proc void OnEnemiesFound(ref CAiObjWrapList p_rxList)
		m_xEnemies.CopyFrom(p_rxList);
		var int i, iC=m_xEnemies.Validate();
		for(i=0)cond(i<iC)iter(i++)do
			if((m_xEnemies[i].GetType()!="CHTR")&&(m_xEnemies[i].GetType()!="ANML")&&(m_xEnemies[i].GetType()!="VHCL")
				&&(m_xEnemies[i].GetType()!="BLDG")&&(m_xEnemies[i].GetType()!="NEST")&&(m_xEnemies[i].GetType()!="SHIP"))then
				m_xEnemies.RemEntry(m_xEnemies[i]);
				i--; iC--;
				continue;
			endif;
		endfor;
		if(m_xEnemies.NumEntries()>0)then
			m_xLastEnemy = m_xEnemies[0];
		endif;
	endproc;
	
	
	///OnCalculateValue
	proc void OnCalculateValue(ref CAiObjWrap p_rxEnemy, ref real p_rfValue)
		var bool bAttackingUs = IsAttackingOurTribe(p_rxEnemy);		
		if(!bAttackingUs)then
			p_rfValue-=100000.0;
			return;
		endif;
		
		var real fDist=(p_rxEnemy.GetPos()-m_vBasePos).Abs2S();
		var real fMaxDist=(m_fBaseRange+m_fGuardRange)*(m_fBaseRange+m_fGuardRange);
		
		if(fDist>fMaxDist)then
			p_rfValue=-100000.0;
			return;
		elseif(p_rxEnemy.GetType()=="BLDG" || p_rxEnemy.GetClassName()=="aje_resource_collector")then
			p_rfValue-=10.0;
		elseif(p_rxEnemy.IsSameAs(m_xLastEnemy))then
			p_rfValue+=0.1;
		endif;
	endproc;
	
	
	///SetBase
	export proc void SetBase(vec3 p_vPos,real p_fRange)
		var string	sTribe = m_pxSensor^.GetTechTree().GetTribe();
		m_vBasePos=p_vPos;
		m_fBaseRange=p_fRange;
		SetGuardPos(m_vGuardPos);
	endproc;


	///SetBaseRange
	export proc void SetBaseRange(real p_fRange)
		if((m_bIsMainPool) && (m_sLevelName=="Single 03"||m_sLevelName=="Single 09"||m_sLevelName=="Single 08"))then
			m_fBaseRange = Math.Min(100.0, p_fRange);
		else
			m_fBaseRange = p_fRange;		
		endif;
		SetGuardPos(m_vGuardPos);
	endproc;
	
	
	///SetBaseRange
	export proc real GetBaseRange()
		return m_fBaseRange;
	endproc;
	
	
	///SetArmy
	export proc void SetArmy(string p_sArmy)
		m_sArmy = p_sArmy;
		m_sState="sleep";
	endproc;
	
	
	///SetGuardPos
	export proc void SetGuardPos(vec3 p_vPos)
		m_vGuardPos=p_vPos;
		if((m_vGuardPos!={0.0,0.0,0.0}) && (m_vBasePos!={0.0,0.0,0.0}))then
			var vec3 vDir=m_vGuardPos-m_vBasePos;
			var real fDist=vDir.Abs2();
			if(fDist>m_fBaseRange)then
				vDir*=(m_fBaseRange/fDist);
				m_vGuardPos=m_vBasePos+vDir;
			endif;
		endif;
	endproc;
	
	
	///SetGuardRange
	export proc void SetGuardRange(real p_fRange)
		m_fGuardRange=Math.Max(p_fRange,20.0f);
	endproc;
	
	
	///GetGuardRange
	export proc real GetGuardRange()
		return m_fGuardRange;	
	endproc;


	///ResetAttack
	proc void ResetAttack()
		if(m_pxAttackInfo!=null)then
			m_pxAttackInfo=null;
		endif;
		m_vGuardPos={0.0,0.0,0.0};
	endproc;


	///GetEnemyDistance
	proc real GetEnemyDistance(^CAiAttackInfo p_pxAttackInfo)
		if(p_pxAttackInfo == null)then return 9999999.0; endif;
		
		var int i,iC=p_pxAttackInfo^.GetTargets().Validate();
		var vec3 vPos;
		
		for(i=0)cond(i<iC)iter(i++)do
			var CAiObjWrap xT=p_pxAttackInfo^.GetTargets()[i];
			if(!xT.IsValid())then continue; endif;
			vPos+=xT.GetPos();
		endfor;
		
		if(iC>0)then
			vPos/=iC.ToReal();
		else
			vPos=p_pxAttackInfo^.GetPos();
		endif;
		
		return (vPos - m_vBasePos).Abs();
	endproc;
	
	
	///Start
	export proc bool Start(^CAiAttackInfo p_pxAttackInfo)
		if(p_pxAttackInfo==null)then return false; endif;
		
		if(m_pxAttackInfo != null)then
			var real fOurDist	= GetEnemyDistance(m_pxAttackInfo);
			var real fTheirDist	= GetEnemyDistance(p_pxAttackInfo) + 5.0;
			
			if(fOurDist <= fTheirDist)then
				p_pxAttackInfo^.GetResult()="have already a more important request";
				return true;
			else
				m_pxAttackInfo^.GetResult()="got a more important request!";
				m_pxAttackInfo^.NotifyOnFailed();
				ResetAttack();
			endif;	
		endif;

		if(super.Start(p_pxAttackInfo)==false)then return false; endif;
		
		m_xTerminationTimer.Stop();
		return true;
	endproc;
	

	///UpdateGuardPos
	proc bool UpdateGuardPos()		
		m_bRetreat=true;
		var bool bMoved=false;
		var bool bWorldObj=false;
		var bool bWallObj=false;
		var bool bAgressiveAnimals=false;
		var bool bDefending=false;
		
		if(m_pxAttackInfo!=null)then
			if(!m_bMultimap)then
				var CAiObjWrapList xT=m_pxAttackInfo^.GetTargets();
				if(xT.NumEntries()>0)then
					if(xT[0].IsValid())then
						if(xT[0].GetOwner()==-1)then
							m_bRetreat = true;
							m_pxAttackInfo^.GetResult()="attack succeded!";
							m_pxAttackInfo^.NotifyOnSucceeded();
							ResetAttack();
						else
							var real fOurDist = GetEnemyDistance(m_pxAttackInfo);
							if(fOurDist <= m_fBaseRange)then
								m_bRetreat = false;
							endif;
						endif;
					endif;
				endif;
			else
				var real fOurDist = GetEnemyDistance(m_pxAttackInfo);
				if(fOurDist <= m_fBaseRange)then
					m_bRetreat = false;
				endif;
			endif;
		endif;
				
		if(m_bRetreat)then
			bDefending=false;
			
			var vec3 vPos={0.0,0.0,0.0};
			var vec3 vTemplePos=CheckforTemple();
			var vec3 vEnemyPos=CheckForEnemyAroundVillage();
			var vec3 vDamagedBuildingPos = CheckBuildingHitpoints(m_xGuardRangeList);
			var vec3 vDefensePos=CheckForDefensePoint();
			var vec3 vDefenderObjPos=CheckForDefenseObj();
			var vec3 vWarpgatePos=CheckForWarpgate();
			
			if(vEnemyPos!={0.0,0.0,0.0})then
				vPos=vEnemyPos;	
			elseif(vDamagedBuildingPos!={0.0,0.0,0.0})then
				vPos=vDamagedBuildingPos;
			elseif(vWarpgatePos!={0.0,0.0,0.0})then
				vPos=vWarpgatePos;
			elseif(vDefenderObjPos!={0.0,0.0,0.0})then
				vPos=vDefenderObjPos;			
			elseif(vDefensePos!={0.0,0.0,0.0})then
				vPos=vDefensePos;			
			elseif(vTemplePos!={0.0,0.0,0.0})then
				vPos=vTemplePos;			
			elseif(m_vGuardPos!={0.0,0.0,0.0})then
				vPos=m_vGuardPos;
			else
				vPos=m_pxSensor^.GetStartLocation();
			endif;
			
			SetGuardPos(vPos);
		else
			if(m_pxAttackInfo==null)then m_bRetreat=true; return false; endif;
			
			bDefending=true;
			m_xTargets.Include(m_pxAttackInfo^.GetTargets());
			var int i, iC=m_xTargets.Validate();

			var vec3 vPos;

			for(i=0)cond(i<iC)iter(i++)do	
				var CAiObjWrap xT=m_xTargets[i];
					
				if((xT.GetAttribValueBool("active_disguise"))||(xT.GetAttribValueInt("active_entrench")>0)||(!xT.IsVisible(m_iPlayerID)))then
					m_pxAttackInfo^.GetTargets().RemEntry(xT);
					m_xTargets.RemEntry(xT);
					i--;iC--;
					continue;
				endif;
				
				if((xT.GetType()=="ANML")&&(xT.GetOwner()==(-1))&&((xT.CanSwim())&&!xT.CanWalk()))then
					m_pxAttackInfo^.GetTargets().RemEntry(xT);
					m_xTargets.RemEntry(xT);
					i--;iC--;
					continue;
				endif;
	
				if((m_sLevelName=="_MN_MP_3_PINCER")&&(!m_bHuntAnimal)&&(m_bDefenderplayer))then 
					if((xT.GetOwner()==(-1))&&(xT.GetAttribValue("anml_aggressive_type")==1.ToString()))then
						m_pxAttackInfo^.GetResult()="attack succeded!";
						m_pxAttackInfo^.NotifyOnSucceeded();
						return false;
					endif;
				endif;
					
				if(xT.GetOwner()==-1)then
					bWorldObj=true;
				elseif(xT.IsWall())then
					bWallObj=true;
				else
					bWorldObj=false;
				endif;
				
				if(m_pxFM!=null)then
					m_pxFM^.SetLastAttacker(xT.GetOwner());
				endif;
				
				vPos+=xT.GetPos();
			endfor;
			
			if(iC>0)then
				vPos/=iC.ToReal();
			else
				vPos=m_pxAttackInfo^.GetPos();
			endif;

			SetGuardPos(vPos);
			CheckForFireTraps();
			
			if(!bWorldObj)then
				bDefending=true;
			else
				bDefending=false;
			endif;
		endif;
		
		if(m_vGuardPos=={0.0,0.0,0.0})then
			if(!UpdateFighters())then 
				if(m_bDefending)then	
					if(m_pxDM!=null)then
						m_pxDM^.DeactivateDefendMode();
						m_pxDM^.SetDefending(false);
						m_bDefending=false;
						bDefending=false;
					endif;
				endif;
				return false;
			endif;
			SetGuardPos(m_vFightersPos);
		endif;
	
		if(bDefending!=m_bDefending)then
			if(!bDefending)then
				if(m_pxDM!=null)then
					m_pxDM^.DeactivateDefendMode();
					m_pxDM^.SetDefending(false);
				endif;
			else
				if(m_pxDM!=null)then
					m_pxDM^.ActivateDefendMode();
					m_pxDM^.SetDefending(true);
				endif;
			endif;
			m_bDefending=bDefending;
		endif;
		
		var int iNumFighters=m_xFighters.Validate();
		if(iNumFighters<=0)then return false; endif;	
		var int iNumTargets=m_xEnemies.Validate();
		var bool bAttack=true;
		
		if(iNumTargets>0)then
			if((m_xEnemies[0].IsHostile())&&(m_xEnemies[0].GetOwner()== -1)&&(iNumFighters<7))then 
				if(m_pxAttackInfo!=null)then
					m_pxAttackInfo^.GetResult()="attack succeded!";
					m_pxAttackInfo^.NotifyOnSucceeded();
				endif;		
				if(m_pxDM!=null)then
					m_pxDM^.DeactivateDefendMode();
					m_pxDM^.SetDefending(false);
				endif;	
				bAttack=false;
			else
				bAttack=true;	
			endif;	
		endif;
		
		if(m_bRetreat)then
			if(m_vOldGuardPos!=m_vGuardPos)then
				if(iNumTargets>0)then
					if(bAttack)then	
						if(bWorldObj||bWallObj)then
							bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", m_xEnemies[0].GetHandle(),{0.0,0.0,0.0} , "/Attack");
						else
							bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");
						endif;
					endif;	
				else
					bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");		
				endif;
				
				m_vOldGuardPos=m_vGuardPos;	
			else
				if(m_iGuardPosCounter>=2)then
					if(iNumTargets>0)then
						if(bAttack)then
							if(bWorldObj||bWallObj)then
								bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", m_xEnemies[0].GetHandle(),{0.0,0.0,0.0} , "/Attack");
							else
								bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");
							endif;	
						endif;
					else
						bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");		
					endif;
					m_iGuardPosCounter=0;
				endif;
				m_iGuardPosCounter++;
			endif;
		else
			if(iNumTargets>0)then
				if(bAttack)then	
					if(bWorldObj||bWallObj)then
						bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", m_xEnemies[0].GetHandle(),{0.0,0.0,0.0} , "/Attack");
					else
						bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");
					endif;	
				endif;
			else
				bMoved=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, m_vGuardPos, "/AggressiveTarget");		
			endif;
				
			SpecialAttack(m_xTargets, m_xFighters);
		endif;
		
		return bMoved;
	endproc;


	///SeperateUnits
	proc void SeparateUnits()
		var CAiObjWrapList xUnits;
		xUnits.CopyFrom(m_xSupervisor.GetUnits());

		var int i, iC = xUnits.Validate();
		for(i=0)cond(i<iC)iter(i++)do
			m_xFighters.AddEntry(xUnits[i]);
		endfor;
		
		if(GetKindergarten())then
			GetFightModule()^.AddToKindergarten(xUnits);
		endif;
		UpdateFighters();
	endproc;


	///CryForHelp
	export proc void CryForHelp()
		if(m_pxBrain==null)then return; endif;
		if(m_pxSensor==null)then return; endif;

		if(m_sLevelName=="Single 15")then return; endif;
		
		if(m_iHelpCallTimer > 0)then return; endif;
		m_iHelpCallTimer = ms_iHelpTimerInit;
		
		var int i, iC = m_pxSensor^.GetNumPlayers();		
		for(i=0)cond(i<iC)iter(i++)do				
			if(i == m_iPlayerID)then
				continue;
			endif;
			if(m_pxSensor^.GetDiplomacyMyOpinion(i)==2)then
				m_pxSensor^.SendChatMsg("_NT_AI_HELPBASEATTACKED", 7500, m_vBasePos,i);
			endif;
		endfor;		
	endproc;


	///Think
	export proc void Think()		
		if(m_pxBrain==null)then return; endif;
		if(m_pxSensor==null)then return; endif;
		
		CheckForRocketRamps();
		CheckForItem();
		
		if(m_vHarbourPos!={0.0,0.0,0.0})then
			CheckForEnemyAroundHarbour(m_vHarbourPos);
		endif;
		
		if(m_bIsMainPool)then
			if(m_iCalculateGuardRangeCounter>=5)then
				CalculateGuardRange();
				m_iCalculateGuardRangeCounter=0;
			endif;
			m_iCalculateGuardRangeCounter++;	
		endif;
				
		if(m_iHelpCallTimer>0)then
			m_iHelpCallTimer--;
		endif;
		
		if(m_sState=="sleep")then
			if(!UpdateFighters())then return; endif;
			m_sState = "guarding";
		
		elseif(m_sState=="guarding")then
		
			if(!UpdateFighters())then
				if(m_pxAttackInfo!=null)then
					m_pxAttackInfo^.GetResult()="all fighters are dead!";
					m_pxAttackInfo^.NotifyOnFailed();
				endif;
				if(m_bDefending)then	
					if(m_pxDM!=null)then 
						m_pxDM^.DeactivateDefendMode();
						m_pxDM^.SetDefending(false);
						m_bDefending=false;
					endif;
				endif;
				ResetAttack();
				m_bBackToBase=false;
				m_sState = "sleep";
				return;
			endif;

			if(CheckCompletion())then
				if(m_pxAttackInfo!=null)then
					m_pxAttackInfo^.GetResult()="attack succeded!";
					m_pxAttackInfo^.NotifyOnSucceeded();
				endif;
				ResetAttack();
			else
				if(m_pxAttackInfo!=null)then
				endif;
			endif;

			if((m_bIsMainPool)&&(CAiUtilityMgr.Get()^.IsDefending(m_pxBrain)))then
				var int iDefenders = m_xSupervisor.GetUnits().NumEntries();
				var int iAttackers = m_xEnemies.NumEntries();
				var int iWorldAttackers=0;
				var int i;
				
				if(m_bMultimap)then
					if(iAttackers>0)then	
						for(i=0)cond(i<iAttackers)iter(i++)do				
							if(m_xEnemies[i].IsValid())then
								if(m_xEnemies[i].GetOwner()==(-1))then
									iWorldAttackers++;
								endif;
							endif;				
						endfor;
					endif;
					
					if(iWorldAttackers<=0)then
						if((iDefenders<=iAttackers) && (iAttackers>3))then
							CryForHelp();
						endif;
					endif;
				endif;
			endif;

			if(!UpdateGuardPos())then
				if((m_pxAttackInfo==null) && (Random.MTRandF(1.0f)<0.1f))then
					m_bBackToBase=false;
					m_sState = "sleep";
					return;
				endif;
			else
				m_sState="guarding";
			endif;				
		endif;
	endproc;
	
	
	///CalculateGuardRange
	export proc void CalculateGuardRange()
		if(m_pxSensor==null)then return; endif;
		
		var real 			fRange=0.0;
		var real 			fMaxRange=0.0;		
		var vec3 			vStartPos = m_vBasePos;				
		var CAiObjQuery 	xQuery;
		var CAiObjQuery 	xAjeQuery;
		var CAiObjWrapList	xAjeList;
		
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetType("BLDG");
		xQuery.SetType("SHIP", true);
		xQuery.Execute(m_pxSensor^.GetOutpost(0).GetObjects(), m_xGuardRangeList);
		
		if(m_sTribe=="Aje")then
			xAjeQuery.SetOwner(m_iPlayerID);
			xAjeQuery.SetClass("aje_resource_collector");
			xAjeQuery.Execute(xAjeList);
			m_xGuardRangeList.Include(xAjeList);
		endif;
			
		var int i, iC=m_xGuardRangeList.Validate();	
		for(i=0)cond(i<iC)iter(i++)do			
			fRange=(vStartPos-m_xGuardRangeList[i].GetPos()).AbsSquare();			
			if(fRange>fMaxRange)then 
				fMaxRange=fRange; 
			endif;
		endfor;
			
		fMaxRange=(Math.Sqrt(fMaxRange));		
		if(fMaxRange>60.0)then
			SetBaseRange(fMaxRange+30.0);
		else
			SetBaseRange(60.0+30.0);
		endif;					
	endproc;
	
	
	///CheckForEnemyAroundVillage
	proc vec3 CheckForEnemyAroundVillage()
		var vec3 			vEnemyPos={0.0,0.0,0.0};
		var CAiObjWrapList 	xEnemyList;
		var CAiObjQuery 	xEnemyQuery;
		
		if(m_sTribe=="SEAS")then return vEnemyPos; endif;
				
		xEnemyQuery.AddMyEnemiesToSearch(m_iPlayerID, true);
		xEnemyQuery.SetType("ANML");
		xEnemyQuery.SetType("CHTR",true);
		xEnemyQuery.SetType("VHCL",true);
		xEnemyQuery.SetType("BLDG",true);
		xEnemyQuery.SetType("NEST",true);
		xEnemyQuery.RegionCircle(m_vStartLocationPos, GetBaseRange());
				
		xEnemyList.Clear();
		xEnemyQuery.Execute(xEnemyList);

		var int i, iC=xEnemyList.Validate();
		if(iC<=0)then return vEnemyPos; endif;
		
		if(!m_bMultimap&&xEnemyList[0].GetOwner()==-1)then return vEnemyPos; endif; 
		
		for(i=0)cond(i<iC)iter(i++)do
			if(m_pxSensor^.IsEnemy(xEnemyList[i].GetOwner()))then		
				if(xEnemyList[i].IsHostile()&&(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<3)&&(xEnemyList[i].GetOwner()== -1))then	
					vEnemyPos={0.0,0.0,0.0};
					break;
				elseif(xEnemyList[i].IsHostile()&&(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)>=3)&&(xEnemyList[i].GetOwner()== -1))then
					vEnemyPos=xEnemyList[i].GetPos();
					break;
				else
					vEnemyPos=xEnemyList[i].GetPos();
					break;
				endif;
			endif;
		endfor;
		return vEnemyPos;
	endproc;
	
	
	///CheckForTemple
	proc vec3 CheckforTemple()
		var vec3 vTemplePos={0.0,0.0,0.0};
		var vec3 vFirePos={0.0,0.0,0.0};
		
		if(m_pxSensor==null)then return vTemplePos; endif;
	
		var int i, j,iC=m_xGuardRangeList.Validate();
		if(iC==0)then return vTemplePos; endif;
		
		for(i=0)cond(i<iC)iter(i++)do	
			if(m_xGuardRangeList[i].GetClassName().Find("_temple")!=(-1))then
				if((m_xGuardRangeList[i].GetPos() - m_vBasePos).Abs2S() < (m_fBaseRange * m_fBaseRange))then
					vTemplePos=m_xGuardRangeList[i].GetPos();					
				endif;
			elseif((m_xGuardRangeList[i].GetClassName().Find("_fireplace")!=(-1))||(m_xGuardRangeList[i].GetClassName().Find("_collector")!=(-1))||(m_xGuardRangeList[i].GetClassName().Find("_headquarters")!=(-1)))then
				vFirePos=m_xGuardRangeList[i].GetPos();
			endif;
		endfor;
		
		if(m_iRallypoint==0)then
			for(j=0)cond(j<iC)iter(j++)do
				if((m_xGuardRangeList[j].GetClassName().Find("_farm")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_arena")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_maker")!=(-1))
					||(m_xGuardRangeList[j].GetClassName().Find("_tavern")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_rodeo")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_engineer")!=(-1))
					||(m_xGuardRangeList[j].GetClassName().Find("_dojo")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_weapon")!=(-1))||(m_xGuardRangeList[j].GetClassName().Find("_barracks")!=(-1))
					||(m_xGuardRangeList[j].GetClassName().Find("_garage")!=(-1)))then				
					
					if(!m_bMultimap)then
						if(m_vOldDefensePoint!={0.0,0.0,0.0})then
							m_pxSensor^.ExecuteGamePlayCommand(m_xGuardRangeList[j].GetHandle(), "SetRallyPoint", -1, m_vOldDefensePoint+{10.0,10.0,0.0}, "");	
						elseif(vTemplePos!={0.0,0.0,0.0})then	
							m_pxSensor^.ExecuteGamePlayCommand(m_xGuardRangeList[j].GetHandle(), "SetRallyPoint", -1, vTemplePos+{10.0,10.0,0.0}, "");	
						elseif(vFirePos!={0.0,0.0,0.0})then
							m_pxSensor^.ExecuteGamePlayCommand(m_xGuardRangeList[j].GetHandle(), "SetRallyPoint", -1, vFirePos+{10.0,10.0,0.0}, "");
						endif;
					else		
						if(vTemplePos!={0.0,0.0,0.0})then	
							m_pxSensor^.ExecuteGamePlayCommand(m_xGuardRangeList[j].GetHandle(), "SetRallyPoint", -1, vTemplePos+{10.0,10.0,0.0}, "");	
						elseif(vFirePos!={0.0,0.0,0.0})then
							m_pxSensor^.ExecuteGamePlayCommand(m_xGuardRangeList[j].GetHandle(), "SetRallyPoint", -1, vFirePos+{10.0,10.0,0.0}, "");
						endif;	
					endif;			
				endif;
			endfor;
			m_iRallypoint=50;
		endif;
		m_iRallypoint--;
		
		if(vTemplePos!={0.0,0.0,0.0})then
			return vTemplePos;
		else
			return vFirePos;
		endif;
	endproc;
	
	
	///CheckBuildingHitpoints
	proc vec3 CheckBuildingHitpoints(CAiObjWrapList p_xList)
		var vec3 vDamagedBuildingPos={0.0,0.0,0.0};	
		var int iCurHitPoints=0;
		var int iMaxHitPoints=0;
		var int iRange=0;
		var int iUnits=0;
		var int iAQuarterGonePoints=0;
		var string sBuildingName="";
		var string sCurTask="";
		m_vHarbourPos={0.0,0.0,0.0};
		
		if(m_pxSensor==null)then return vDamagedBuildingPos; endif;
							
		var int i, iC=p_xList.Validate();
		if(iC<=0)then return vDamagedBuildingPos; endif;
		
		for(i=0)cond(i<iC)iter(i++)do			
			iCurHitPoints=p_xList[i].GetAttribValueInt("hitpoints");
			iMaxHitPoints=p_xList[i].GetAttribValueInt("maxhitpoints");
			iAQuarterGonePoints=iMaxHitPoints-(iMaxHitPoints/4);
			sBuildingName=p_xList[i].GetClassName();
			
			if((sBuildingName=="hu_harbour")||(sBuildingName=="ninigi_harbour")||(sBuildingName=="aje_floating_harbour")||(sBuildingName=="seas_carrier"))then	
				m_vHarbourPos=p_xList[i].GetPos();
			endif;
						
			if((iCurHitPoints<iAQuarterGonePoints)&&(p_xList[i].GetAttribValueBool("building_ready")))then
				if((sBuildingName=="hu_harbour")||(sBuildingName=="ninigi_harbour")||(sBuildingName=="aje_floating_harbour")||(sBuildingName=="seas_carrier"))then	
					vDamagedBuildingPos=p_xList[i].GetPos();
					CheckForEnemyAroundHarbour(vDamagedBuildingPos);
					break;
				else
					vDamagedBuildingPos=p_xList[i].GetPos();
					break;
				endif;
			endif;
		endfor;
		return vDamagedBuildingPos;
	endproc;
	
	
	///CheckForEnemyAroundHarbour
	proc void CheckForEnemyAroundHarbour(vec3 p_vDamagedBuildingPos)
		var CAiObjWrapList xEnemyList;
		var CAiObjQuery xEnemyQuery;
		
		xEnemyQuery.AddMyEnemiesToSearch(m_iPlayerID, true);
		xEnemyQuery.RegionCircle(p_vDamagedBuildingPos, 60.0);
		xEnemyQuery.SetType("SHIP");
		xEnemyQuery.SetType("VHCL",true);
		xEnemyQuery.SetType("CHTR",true);
		xEnemyQuery.SetType("ANML",true);
		xEnemyQuery.SetType("BLDG",true);
		xEnemyQuery.Execute(xEnemyList);
		
		if(xEnemyList.Validate()<=0)then return; endif;
		
		var CAiObjWrapList xOwnList;
		var CAiObjQuery xOwnQuery;
		
		xOwnQuery.SetOwner(m_iPlayerID);
		xOwnQuery.SetClass("hu_dragon_boat");
		xOwnQuery.SetClass("hu_ram_ship", true);
		xOwnQuery.SetClass("hu_steam_boat", true);
		xOwnQuery.SetClass("aje_cronosaurus", true);
		xOwnQuery.SetClass("aje_catamaran", true);
		xOwnQuery.SetClass("ninigi_muraeno_submarine", true);
		xOwnQuery.SetClass("ninigi_fire_boat", true);
		xOwnQuery.SetClass("ninigi_muraenosaurus", true);
		xOwnQuery.SetClass("seas_submarine", true);
		xOwnQuery.SetClass("seas_carrier", true);
		xOwnQuery.SetClass("seas_helicopter", true);			
		xOwnQuery.Execute(xOwnList);
		
		if(xOwnList.Validate()<=0)then return; endif;		
		m_pxSensor^.ExecuteGamePlayCommand(xOwnList, "Action", -1, xEnemyList[0].GetPos(), "/AggressiveTarget");
	endproc;
	
	
	///CheckForDefensePoint
	proc vec3 CheckForDefensePoint()
		var vec3 vDefensePoint={0.0,0.0,0.0};	
		if(m_bMultimap)then return vDefensePoint; endif;
		
		if(m_iDefensePointCounter==0)then
			var CAiObjWrapList xDefensePointList;
			var CAiObjQuery xDefensePointQuery;
			xDefensePointQuery.SetOwner(m_iPlayerID);
			xDefensePointQuery.SetType("WYPT");
			
			xDefensePointList.Clear();
			xDefensePointQuery.Execute(xDefensePointList);
						
			var int iNumDefensePoints=xDefensePointList.Validate();
			if(iNumDefensePoints<=0)then 
				m_vOldDefensePoint=={0.0,0.0,0.0};
				return vDefensePoint; 
			endif;
			
			var int iChoosenPoint=Random.GetInt()%iNumDefensePoints;
			if(xDefensePointList[iChoosenPoint].IsValid())then
				m_vOldDefensePoint=xDefensePointList[iChoosenPoint].GetPos();
			endif;
			
			m_iDefensePointCounter=20;
		endif;
		
		m_iDefensePointCounter--;	
		return m_vOldDefensePoint;
	endproc;
	
	
	///CheckForDefenseObj
	proc vec3 CheckForDefenseObj()
		var vec3 vDefenseObjPos={0.0,0.0,0.0};
		if(m_sGameType=="Defender" && m_bDefenderplayer)then
			var CAiObjWrapList xList;
			var CAiObjQuery xQuery;
			
			xList.Clear();
			xQuery.SetOwner(m_iPlayerID);
			xQuery.SetClass("defender_object");
			xQuery.Execute(xList);
			
			var int i, iC=xList.Validate();
			if(iC>0)then
				for(i=0)cond(i<iC)iter(i++)do
					var int iMaxHitpoints=xList[i].GetAttribValueInt("maxhitpoints");
					var int iCurHitpoints=xList[i].GetAttribValueInt("hitpoints");			
					if(iCurHitpoints<iMaxHitpoints)then
						vDefenseObjPos=xList[i].GetPos();
						break;
					else
						vDefenseObjPos=xList[i].GetPos();
					endif;
				endfor;
			endif;
		endif;
		return vDefenseObjPos;
	endproc;
	
	
	///CheckForDefenseObj
	proc vec3 CheckForWarpgate()
		if(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<5)then return {0.0,0.0,0.0}; endif; 
		
		var vec3 vWarpgatePos={0.0,0.0,0.0};
		var CAiObjWrapList xList;
		var CAiObjQuery xQuery;
		
		xList.Clear();
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetClass("hu_warpgate");
		xQuery.SetClass("aje_warpgate", true);
		xQuery.SetClass("ninigi_warpgate", true);
		xQuery.Execute(xList);
		
		var int i, iC=xList.Validate();
		if(iC>0)then	
			vWarpgatePos=xList[0].GetPos();	
		endif;	
		
		return vWarpgatePos;
	endproc;
	
	
	///CheckForRocketRamps
	proc void CheckForRocketRamps()
		if(m_pxSensor==null)then return; endif;
		if(m_pxBrain==null)then return; endif;
		if(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<5)then return; endif;
		if(m_sTribe!="Ninigi")then return; endif;
				
		var CAiObjQuery xFighterQuery;
		var CAiObjQuery xTargetQuery;
		var CAiObjWrapList xFighters;
		var CAiObjWrapList xTargets;
		
		xFighters.Clear();
		xTargets.Clear();
		
		xFighterQuery.SetOwner(m_iPlayerID);
		xFighterQuery.SetClass("ninigi_rocket_ramp");
		xFighterQuery.Execute(xFighters);
		var int i, iC=xFighters.Validate();
		if(iC<=0)then return; endif;

		var real fMaxAttackRange=(xFighters[0].GetAttribValue("max_attackrange")).ToInt().ToReal();
		var real fMinAttackRange=(xFighters[0].GetAttribValue("min_attackrange")).ToInt().ToReal();
		
		xTargetQuery.AddMyEnemiesToSearch(m_iPlayerID);
		xTargetQuery.RegionCircle(m_vBasePos, fMaxAttackRange);
		xTargetQuery.Execute(xTargets);
		var int j, iD=xTargets.Validate();
		
		if(iD<=0)then
			m_pxSensor^.ExecuteGamePlayCommand(xFighters, "Action", -1, {0.0,0.0,0.0}, "/Stop");
			return; 
		endif;
				
		for(i=0)cond(i<iC)iter(i++)do
			for(j=0)cond(j<iD)iter(j++)do
				var real fDistance=(xTargets[j].GetPos()-xFighters[i].GetPos()).Abs2S()/100.0;
				if((fDistance<=fMaxAttackRange)&&(fDistance>=fMinAttackRange))then					
					m_pxSensor^.ExecuteGamePlayCommand(xFighters, "Action", xTargets[j].GetHandle(), xTargets[j].GetPos(), "/Attack");
					break;
				endif;
			endfor;
		endfor;	
	endproc;
	
	
	///CheckForFireTraps
	proc void CheckForFireTraps()
		if(m_sTribe!="Ninigi")then return; endif;
		if(m_pxSensor==null)then return; endif;
		if(m_pxBrain==null)then return; endif;
		if(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<4)then return; endif;
		
		var CAiObjQuery xQuery;
		var CAiObjWrapList xList;
		
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetClass("ninigi_resin_field");
		xQuery.Execute(xList);
		
		var int i, iC=xList.Validate();
		if(iC<=0)then return; endif;	
		
		for(i=0)cond(i<iC)iter(i++)do
			m_pxSensor^.ExecuteGamePlayCommand(xList[i].GetHandle(), "Action", -1, {0.0,0.0,0.0}, "/Actions/Ninigi/Moves/BLDG/Burn");	
		endfor;	
	endproc;
	
	
	///CheckForItem
	proc void CheckForItem();
		if(!m_bMultimap)then return; endif;
		var CAiObjWrapList xItemList;
		var CAiObjQuery xItemQuery;
		var CAiObjWrap xActor;
		var vec3 vSearchPos={0.0,0.0,0.0};
		
		var int i, iC=m_xFighters.Validate();
		if(iC<=0)then return; endif;
		
		for(i=0)cond(i<iC)iter(i++)do
			if(m_xFighters[i].GetAttribValue("inventory_item_name")=="")then	
				vSearchPos=m_xFighters[i].GetPos();
				xActor=m_xFighters[i];
				break;
			endif;
		endfor;
	
		if(vSearchPos=={0.0,0.0,0.0})then return; endif;
	
		xItemList.Clear();
		xItemQuery.SetOwner(-1);
		xItemQuery.SetType("ITEM");
		xItemQuery.RegionCircle(vSearchPos, 60.0);
		xItemQuery.Execute(xItemList);
		
		if(xItemList.NumEntries()<=0)then return; endif;
		if(!xItemList[0].IsValid())then return; endif;
		
		m_pxSensor^.ExecuteGamePlayCommand(xActor.GetHandle(), "PickUp", xItemList[0].GetHandle(), xItemList[0].GetPos(), "");
	endproc;
	
	
	///CheckForWorkerSupport
	proc void CheckForWorkerSupport(CAiObjWrapList p_xTargets)
		var int iNumTargets=p_xTargets.Validate();
		if(iNumTargets==0)then return; endif;
		
		var CAiObjWrapList xFighters;
		var CAiObjWrapList xWorkerList;
		var CAiObjQuery xQuery;
		
		xFighters.Clear();
		xWorkerList.Clear();
		
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetType("CHTR");
		xQuery.SetType("ANML",true);
		xQuery.SetType("VHCL",true);
		
		xQuery.Execute(xFighters);
		var int i, iNumFighters=xFighters.Validate();
		for(i=0)cond(i<iNumFighters)iter(i++)do
			
			if(m_pxSensor^.ComputeOutpostId(xFighters[i].GetPos())!=0)then
				xFighters.RemEntry(xFighters[i]);
				i--; iNumFighters--;
				continue;
			endif;
			
			if(xFighters[i].GetClassName().Find("_worker")!= -1)then
				xWorkerList.AddEntry(xFighters[i]);
				xFighters.RemEntry(xFighters[i]);
				i--; iNumFighters--;
				continue;
			endif;
		endfor;
		
		if((iNumFighters<iNumTargets/3)||(iNumFighters==0))then
			var int i, iNumWorker=xWorkerList.Validate();
			if(iNumWorker<=0)then return; endif;

			for(i=0)cond(i<iNumWorker)iter(i++)do
				if(xWorkerList[i].GetCurrentTask()!="Idle")then
					xWorkerList.RemEntry(xWorkerList[i]);
					i--;iNumWorker--;
				endif;
			endfor;
			
			if(iNumWorker>0)then
				m_pxSensor^.ExecuteGamePlayCommand(xWorkerList, "Action", p_xTargets[0].GetHandle(),{0.0,0.0,0.0} , "/Attack");
			endif;		
		endif;	
	endproc; 
	

	///SpecialAttack
	proc void SpecialAttack(CAiObjWrapList p_xEnemy, CAiObjWrapList p_xActor)
		var int i, iC=p_xActor.Validate();
		var int j, iD=p_xEnemy.Validate();
		for(i=0)cond(i<iC)iter(i++)do			
			if(iD>0)then	
				for(j=0)cond(j<iD)iter(j++)do				
					if(p_xEnemy[j].IsValid())then
						if(p_xActor[i].GetClassName()=="Cole_so")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Shotgun");
						endif;
						if(p_xActor[i].GetClassName()=="Bela_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Snipershot");				
						endif;
						if(p_xActor[i].GetClassName()=="tesla_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Tesla_DstrVhcl_0");
						endif;		
						if(p_xActor[i].GetClassName()=="aje_shaman")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Resurrect");
						endif;
						if(p_xActor[i].GetClassName()=="lovelace_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Ada_DeathShoot");
						endif;
						if(p_xActor[i].GetClassName()=="babbage_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/Babbage_Minigun_0");
						endif;
						if(p_xActor[i].GetClassName()=="schliemann_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/schliemann_deathshoot");			
						endif;
						if(p_xActor[i].GetClassName()=="livingstone_s0")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/CHTR/livingstone_special_move_1");
						endif;	
						if((p_xActor[i].GetClassName()=="Stina_s0"||p_xActor[i].GetClassName()=="special_eusmilus")&&(p_xEnemy[j].GetType()=="ANML"))then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Special/Moves/ANML/Hypnosis");
						endif;
						if(p_xActor[i].GetClassName()=="aje_allosaurus")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Aje/Moves/ANML/AlloScrunch");
						endif;
						if(p_xActor[i].GetClassName()=="ninigi_seismosaurus")then
							m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", p_xEnemy[j].GetHandle(), p_xEnemy[j].GetPos(), "/Actions/Ninigi/Moves/ANML/enchain");
						endif;
					endif;
				endfor;
			else
				if(p_xActor[i].GetClassName()=="hermit_s0")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Special/Moves/CHTR/Druid_HealAnml_0");
				endif;
				if(p_xActor[i].GetClassName()=="mayor_s0")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Special/Moves/CHTR/Mayor_Specialmove_0");
				endif;
				if(p_xActor[i].GetClassName()=="warden_s0")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Special/Moves/CHTR/warden_spec");
				endif;
				if(p_xActor[i].GetClassName()=="hu_mammoth")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Hu/Moves/ANML/Mammoth_Trumpet");
				endif;
				if(p_xActor[i].GetClassName()=="hu_rhino")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Hu/Moves/ANML/rhino_shake_off");
				endif;
				if(p_xActor[i].GetClassName()=="hu_triceratops")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Hu/Moves/ANML/titan_paw");
				endif;
				if(p_xActor[i].GetClassName()=="aje_atroxosaurus")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Aje/Moves/ANML/trex_scrunch");
				endif;
				if(p_xActor[i].GetClassName()=="aje_atroxosaurus")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Aje/Moves/ANML/trex_roar");
				endif;
				if(p_xActor[i].GetClassName()=="aje_shaman")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Aje/Moves/CHTR/tornado");
				endif;
				if(p_xActor[i].GetClassName()=="aje_brachiosaurus")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Aje/Moves/ANML/BrachioStomp");
				endif;
				if(p_xActor[i].GetClassName()=="ninigi_saltasaurus_archer")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Ninigi/Moves/ANML/doping");
				endif;
				if(p_xActor[i].GetClassName()=="ninigi_harvester")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Ninigi/Moves/VHCL/lacerate");
				endif;
				if(p_xActor[i].GetClassName()=="ninigi_seismosaurus")then
					m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", -1, p_xActor[i].GetPos(), "/Actions/Ninigi/Moves/ANML/barrage");
				endif;
			endif;	
						
			if(p_xActor[i].GetClassName()=="schliemann_s0")then
				var int iCurrentHitpoints=p_xActor[i].GetAttribValueInt("hitpoints");
				var int iMaxHitpoints=p_xActor[i].GetAttribValueInt("maxhitpoints");			
				if(iCurrentHitpoints<(iMaxHitpoints/6))then
					var int iNumFighters=m_xFighters.Validate();
					if(iNumFighters<=0)then return; endif;				
					var int iI, iIC=m_xFighters.Validate();
					if(iIC<=0)then return; endif;	
					for(iI=0)cond(iI<iIC)iter(iI++)do
						if(m_xFighters[iI].GetClassName()=="schliemann_s0")then continue; endif;
						m_pxSensor^.ExecuteGamePlayCommand(p_xActor[i].GetHandle(), "Action", m_xFighters[iI].GetHandle(), m_xFighters[iI].GetPos(), "/Actions/Special/Moves/CHTR/schliemann_special_move_1");
					endfor;
				endif;
			endif;
		endfor;
	endproc;
	
endclass;
