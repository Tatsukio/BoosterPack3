class CShortcutController inherit CInputController
	
	var ^CKeyboardPreferences			m_pxWindow;
	var ^CEdit 							m_pxEditShortcut;
	
	
	var bool							m_bLBtn;
	var bool							m_bRBtn;
	
	var bool 							m_bAlt;
	var bool 							m_bShift;
	var bool 							m_bCtrl;
	
	var array int						m_aiKeysInt;
	var array string					m_asKeysString;
	
	export constructor()
		m_bLBtn=false;
		m_bRBtn=false;
		InitKeyCodes();
	endconstructor;

	export proc bool SetWindow(^CKeyboardPreferences p_pxWindow);
		m_pxWindow=p_pxWindow;
		m_pxEditShortcut=m_pxWindow^.GetShortcutEdit();
		return(true);
	endproc;
	
	export proc bool HandleMsg(bitset p_dwType, bitset p_dwFlags, int p_iKey, int p_iX, int p_iY)
		
		m_bAlt=false;
		m_bShift=false;
		m_bCtrl=false;
		
		if( (p_dwFlags&0010b) == 00010b )then
			m_bCtrl=true;
		endif;
		if( (p_dwFlags&0001b) == 00001b )then
			m_bShift=true;
		endif;
		if( (p_dwFlags&0100b) == 00100b )then
			m_bAlt=true;
		endif;
		
		CWindowMgr.Get().BringWindowToTop(CClientWrap.GetDesktop(),true);
		
		if(p_dwType==CInputController.MT_Tick)then return true;
		elseif(p_dwType==CInputController.MT_KeyDown)then ShowShortcut(p_iKey);
		endif;
		return(true);
	endproc;

	proc bool ShowShortcut(int p_iKey);
		if(p_iKey>255)then return(false);endif;
		if(m_pxWindow==null)then return(false);endif;
		var string sShortCut;
		var string sShift;
		var string sCtrl;
		var string sAlt;
		
		if(m_bShift)then sShift="Shift - ";else sShift="";endif;
		if(m_bAlt)then sAlt="Alt - ";else sAlt="";endif;
		if(m_bCtrl)then sCtrl="Ctrl - ";else sCtrl="";endif;
		
		sShortCut=sShift+sAlt+sCtrl;
		var int i;
		for(i=0)cond(i<m_aiKeysInt.NumEntries())iter(i++)do
			if(m_aiKeysInt[i]==p_iKey)then
				sShortCut+=m_asKeysString[i];
				m_pxWindow^.SetShortcut(sShift,sAlt,sCtrl,m_asKeysString[i]);
				break;
			endif;
		endfor;
		m_pxEditShortcut^.SetText(sShortCut);
		return(true);
	endproc;
	
	proc void InitKeyCodes();
		//Hack until enum for keycodes is exported
		m_aiKeysInt.AddEntry(27);m_asKeysString.AddEntry("ESC");
		m_aiKeysInt.AddEntry(112);m_asKeysString.AddEntry("F1");
		m_aiKeysInt.AddEntry(113);m_asKeysString.AddEntry("F2");
		m_aiKeysInt.AddEntry(114);m_asKeysString.AddEntry("F3");
		m_aiKeysInt.AddEntry(115);m_asKeysString.AddEntry("F4");
		m_aiKeysInt.AddEntry(116);m_asKeysString.AddEntry("F5");
		m_aiKeysInt.AddEntry(117);m_asKeysString.AddEntry("F6");
		m_aiKeysInt.AddEntry(118);m_asKeysString.AddEntry("F7");
		m_aiKeysInt.AddEntry(119);m_asKeysString.AddEntry("F8");
		m_aiKeysInt.AddEntry(120);m_asKeysString.AddEntry("F9");
		m_aiKeysInt.AddEntry(121);m_asKeysString.AddEntry("F10");
		m_aiKeysInt.AddEntry(220);m_asKeysString.AddEntry("ACC");
		m_aiKeysInt.AddEntry(48);m_asKeysString.AddEntry("0");
		m_aiKeysInt.AddEntry(49);m_asKeysString.AddEntry("1");
		m_aiKeysInt.AddEntry(50);m_asKeysString.AddEntry("2");
		m_aiKeysInt.AddEntry(51);m_asKeysString.AddEntry("3");
		m_aiKeysInt.AddEntry(52);m_asKeysString.AddEntry("4");
		m_aiKeysInt.AddEntry(53);m_asKeysString.AddEntry("5");
		m_aiKeysInt.AddEntry(54);m_asKeysString.AddEntry("6");
		m_aiKeysInt.AddEntry(55);m_asKeysString.AddEntry("7");
		m_aiKeysInt.AddEntry(56);m_asKeysString.AddEntry("8");
		m_aiKeysInt.AddEntry(57);m_asKeysString.AddEntry("9");
		m_aiKeysInt.AddEntry(219);m_asKeysString.AddEntry("ß");
		m_aiKeysInt.AddEntry(221);m_asKeysString.AddEntry("´");
		m_aiKeysInt.AddEntry(8);m_asKeysString.AddEntry("BACKSPACE");
		m_aiKeysInt.AddEntry(9);m_asKeysString.AddEntry("TAB");
		
		m_aiKeysInt.AddEntry(65);m_asKeysString.AddEntry("A");
		m_aiKeysInt.AddEntry(66);m_asKeysString.AddEntry("B");
		m_aiKeysInt.AddEntry(67);m_asKeysString.AddEntry("C");
		m_aiKeysInt.AddEntry(68);m_asKeysString.AddEntry("D");
		m_aiKeysInt.AddEntry(69);m_asKeysString.AddEntry("E");
		m_aiKeysInt.AddEntry(70);m_asKeysString.AddEntry("F");
		m_aiKeysInt.AddEntry(71);m_asKeysString.AddEntry("G");
		m_aiKeysInt.AddEntry(72);m_asKeysString.AddEntry("H");
		m_aiKeysInt.AddEntry(73);m_asKeysString.AddEntry("I");
		m_aiKeysInt.AddEntry(74);m_asKeysString.AddEntry("J");
		m_aiKeysInt.AddEntry(75);m_asKeysString.AddEntry("K");
		m_aiKeysInt.AddEntry(76);m_asKeysString.AddEntry("L");
		m_aiKeysInt.AddEntry(77);m_asKeysString.AddEntry("M");
		m_aiKeysInt.AddEntry(78);m_asKeysString.AddEntry("N");
		m_aiKeysInt.AddEntry(79);m_asKeysString.AddEntry("O");
		m_aiKeysInt.AddEntry(80);m_asKeysString.AddEntry("P");
		m_aiKeysInt.AddEntry(81);m_asKeysString.AddEntry("Q");
		m_aiKeysInt.AddEntry(82);m_asKeysString.AddEntry("R");
		m_aiKeysInt.AddEntry(83);m_asKeysString.AddEntry("S");
		m_aiKeysInt.AddEntry(84);m_asKeysString.AddEntry("T");
		m_aiKeysInt.AddEntry(85);m_asKeysString.AddEntry("U");
		m_aiKeysInt.AddEntry(86);m_asKeysString.AddEntry("V");
		m_aiKeysInt.AddEntry(87);m_asKeysString.AddEntry("W");
		m_aiKeysInt.AddEntry(88);m_asKeysString.AddEntry("X");
		m_aiKeysInt.AddEntry(89);m_asKeysString.AddEntry("Y");
		m_aiKeysInt.AddEntry(90);m_asKeysString.AddEntry("Z");
		
		m_aiKeysInt.AddEntry(20);m_asKeysString.AddEntry("CAPSLOCK");
		m_aiKeysInt.AddEntry(226);m_asKeysString.AddEntry("<");
		m_aiKeysInt.AddEntry(32);m_asKeysString.AddEntry("SPACE");
		m_aiKeysInt.AddEntry(188);m_asKeysString.AddEntry(",");
		m_aiKeysInt.AddEntry(190);m_asKeysString.AddEntry(".");
		m_aiKeysInt.AddEntry(189);m_asKeysString.AddEntry("-");
		m_aiKeysInt.AddEntry(186);m_asKeysString.AddEntry("Ü");
		m_aiKeysInt.AddEntry(192);m_asKeysString.AddEntry("Ö");
		m_aiKeysInt.AddEntry(222);m_asKeysString.AddEntry("Ä");
		m_aiKeysInt.AddEntry(191);m_asKeysString.AddEntry("#");
		m_aiKeysInt.AddEntry(187);m_asKeysString.AddEntry("+");
		m_aiKeysInt.AddEntry(13);m_asKeysString.AddEntry("RETURN");
		m_aiKeysInt.AddEntry(38);m_asKeysString.AddEntry("UP");
		m_aiKeysInt.AddEntry(40);m_asKeysString.AddEntry("DOWN");
		m_aiKeysInt.AddEntry(37);m_asKeysString.AddEntry("LEFT");
		m_aiKeysInt.AddEntry(39);m_asKeysString.AddEntry("RIGHT");
		m_aiKeysInt.AddEntry(45);m_asKeysString.AddEntry("INSERT");
		m_aiKeysInt.AddEntry(46);m_asKeysString.AddEntry("DELETE");
		m_aiKeysInt.AddEntry(36);m_asKeysString.AddEntry("HOME");
		m_aiKeysInt.AddEntry(35);m_asKeysString.AddEntry("END");
		m_aiKeysInt.AddEntry(33);m_asKeysString.AddEntry("PAGEUP");
		m_aiKeysInt.AddEntry(34);m_asKeysString.AddEntry("PAGEDOWN");
		
		m_aiKeysInt.AddEntry(144);m_asKeysString.AddEntry("NUM");
		m_aiKeysInt.AddEntry(111);m_asKeysString.AddEntry("NUM/");
		m_aiKeysInt.AddEntry(106);m_asKeysString.AddEntry("NUM*");
		m_aiKeysInt.AddEntry(109);m_asKeysString.AddEntry("NUM-");
		m_aiKeysInt.AddEntry(107);m_asKeysString.AddEntry("NUM+");
		m_aiKeysInt.AddEntry(96);m_asKeysString.AddEntry("NUM0");
		m_aiKeysInt.AddEntry(97);m_asKeysString.AddEntry("NUM1");
		m_aiKeysInt.AddEntry(98);m_asKeysString.AddEntry("NUM2");
		m_aiKeysInt.AddEntry(99);m_asKeysString.AddEntry("NUM3");
		m_aiKeysInt.AddEntry(100);m_asKeysString.AddEntry("NUM4");
		m_aiKeysInt.AddEntry(101);m_asKeysString.AddEntry("NUM5");
		m_aiKeysInt.AddEntry(102);m_asKeysString.AddEntry("NUM6");
		m_aiKeysInt.AddEntry(103);m_asKeysString.AddEntry("NUM7");
		m_aiKeysInt.AddEntry(104);m_asKeysString.AddEntry("NUM8");
		m_aiKeysInt.AddEntry(105);m_asKeysString.AddEntry("NUM9");
		m_aiKeysInt.AddEntry(110);m_asKeysString.AddEntry("NUM,");
		
	endproc;
	
endclass;
