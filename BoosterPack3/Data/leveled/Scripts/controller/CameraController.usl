// [PaHa] This file is unused and should be deleted soon.

/*
class CCameraController inherit CInputController

	export var real m_fSpeedScale;
	var int m_iLastX;
	var int m_iLastY;
	var bool m_bSpace;
	var bool m_bLBtn;
	var bool m_bRBtn;
	var real m_fRadius;
	var real m_fPhi;
	var real m_fTheta;


	var ^CCamera m_pxCurCamera;			///< pointer to the camera currently controlled

	export constructor()
		m_fRadius=70.0;
		m_fSpeedScale=1.0f;
		m_fPhi=Math.Pi()+Math.Pihalf()/2.0;
		m_fTheta=Math.Pihalf()/2.0;
		m_iLastX=0;
		m_iLastY=0;
		m_bSpace=false;
		m_bLBtn=false;
		m_bRBtn=false;

		CClientWrap.GetUIMgr().GetMiniMap2d()^.m_xOnDblClick=OnMiniMapDblClick;
	endconstructor;

	proc bool OnMiniMapDblClick(vec3 p_vPos)
		return(SetCameraTarget(p_vPos));
	endproc;

	export proc bool HandleMsg(bitset p_dwType, bitset p_dwFlags, int p_iKey, int p_iX, int p_iY)
		
		var bool bAlt = false;

		if( (p_dwFlags&0100b) == 00100b )then
			bAlt=true;
		endif;

		CLevelEditorWrap.LogSpam("Controller.Camera","HandleMsg "+p_dwType.ToString()+" "+p_iKey.ToString());
		if(p_dwType==CInputController.MT_KeyDown)then
			switch (p_iKey)
				case (65) do //a
					MoveLeft();
					return true;
				endcase;
				case (87) do //w
					MoveUp();
					return true;
				endcase;
				case (68) do //d
					MoveRight();
					return true;
				endcase;
				case (83) do //s
					MoveDown();
					return true;
				endcase;
				case (37) do //Left
					MoveLeft();
					return true;
				endcase;
				case (38) do //Up
					MoveUp();
					return true;
				endcase;
				case (39) do //Right
					MoveRight();
					return true;
				endcase;
				case (40) do //Down
					MoveDown();
					return true;
				endcase;
				case (33) do //PageUp
					var vec3 vMove={0.0,0.0,1.0};
					vMove *= m_fSpeedScale;
					m_pxCurCamera^.LookAt()+=vMove;
					m_pxCurCamera^.Eye()+=vMove;
					return true;
				endcase;
				case (34) do //PageDown
					var vec3 vMove;
					vMove.SetXYZ(0.0,0.0,1.0);
					vMove *= m_fSpeedScale;
					m_pxCurCamera^.LookAt()-=vMove;
					m_pxCurCamera^.Eye()-=vMove;
					return true;
				endcase;
				case default do
					//CLevelEditorWrap.LogSpam("Controller.Camera","moep");
					return(false);
				endcase;
			endswitch;
		endif;

		if(p_dwType==CInputController.MT_MouseLBtnDown)then m_bLBtn=true; return(bAlt);
		elseif(p_dwType==CInputController.MT_MouseLBtnUp)then m_bLBtn=false;
		elseif(p_dwType==CInputController.MT_MouseRBtnDown)then m_bRBtn=true; return(bAlt);
		elseif(p_dwType==CInputController.MT_MouseRBtnUp)then m_bRBtn=false;
		elseif(p_dwType==CInputController.MT_MouseWheel)then
			m_fRadius-=p_iX.ToReal()/20.0;
			m_fRadius=Math.Clamp(m_fRadius,2.0,500.0);
			var vec3 vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
			vDir.Normalize();
			vDir*=m_fRadius;
			m_pxCurCamera^.Eye()=m_pxCurCamera^.LookAt()+vDir;
			return(true);
		elseif(p_dwType==CInputController.MT_MouseMove)then
			var vec3 vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
			var vec3 vMoveX={0.0,0.0,0.0};
			var vec3 vMoveY={0.0,0.0,0.0};
			var int iDiffX=0;
			var int iDiffY=0;
			iDiffX=p_iX-m_iLastX;
			iDiffY=p_iY-m_iLastY;
			m_iLastX=p_iX;
			m_iLastY=p_iY;
			if(bAlt)then
				if(m_bRBtn)then
					var real fXScale=0.2;
					var real fYScale=0.2;
					vMoveY=m_pxCurCamera^.LookAt()-m_pxCurCamera^.Eye();
					vMoveX=vMoveY$m_pxCurCamera^.Up();

					vMoveX.Normalize();
					vMoveX*=iDiffX.ToReal()*fXScale;

					vMoveY.SetZ(0.0);
					vMoveY.Normalize();
					vMoveY*=iDiffY.ToReal()*fYScale;
				elseif(m_bLBtn)then
					var real fXScale=0.01;
					var real fYScale=0.01;
					var real fXChange=iDiffX.ToReal()*fXScale;
					var real fYChange=iDiffY.ToReal()*fYScale;

					m_fPhi+=fXChange;
					m_fTheta+=fYChange;
					m_fTheta=Math.Clamp(m_fTheta,(Math.Pihalf())*0.05f,(Math.Pihalf()*0.99f));

					var real fCT=Math.Cos(m_fTheta);
					var real fX=Math.Cos(m_fPhi)*fCT;
					var real fY=Math.Sin(m_fPhi)*fCT;
					var real fZ=Math.Sin(m_fTheta);
					vDir.SetX(fX);vDir.SetY(fY);vDir.SetZ(fZ);
				endif;
				vDir.Normalize();
				vDir*=m_fRadius;
				m_pxCurCamera^.LookAt()+=vMoveX;
				m_pxCurCamera^.LookAt()+=vMoveY;
				m_pxCurCamera^.Eye()=m_pxCurCamera^.LookAt()+vDir;
				return(true);
			endif;
		endif;
		
		
		return(bAlt);
	endproc;

	proc void MoveLeft()
		var vec3 vMove;
		vMove = m_pxCurCamera^.LookAt()-m_pxCurCamera^.Eye();
		vMove=vMove$m_pxCurCamera^.Up();
		vMove.Normalize();
		vMove *= m_fSpeedScale;
		m_pxCurCamera^.LookAt()+=vMove;
		m_pxCurCamera^.Eye()+=vMove;
	endproc;

	proc void MoveRight()
		var vec3 vMove;
		vMove = m_pxCurCamera^.LookAt()-m_pxCurCamera^.Eye();
		vMove=vMove$m_pxCurCamera^.Up();
		vMove.Normalize();
		vMove *= m_fSpeedScale;
		m_pxCurCamera^.LookAt()-=vMove;
		m_pxCurCamera^.Eye()-=vMove;
	endproc;

	proc void MoveUp()
		var vec3 vMove;
		vMove = m_pxCurCamera^.LookAt()-m_pxCurCamera^.Eye();
		vMove=vMove$m_pxCurCamera^.Up();
		vMove.Normalize();
		vMove.RotAngleAxis({0.0,0.0,1.0},Math.Pihalf());
		vMove *= m_fSpeedScale;
		m_pxCurCamera^.LookAt()-=vMove;
		m_pxCurCamera^.Eye()-=vMove;
	endproc;

	proc void MoveDown()
		var vec3 vMove;
		vMove = m_pxCurCamera^.LookAt()-m_pxCurCamera^.Eye();
		vMove=vMove$m_pxCurCamera^.Up();
		vMove.Normalize();
		vMove.RotAngleAxis({0.0,0.0,1.0},Math.Pihalf());
		vMove *= m_fSpeedScale;
		m_pxCurCamera^.LookAt()+=vMove;
		m_pxCurCamera^.Eye()+=vMove;
	endproc;

	export proc void Control(^CCamera p_pxCamera)
		m_pxCurCamera= p_pxCamera;
	endproc;

	export proc void SetPhi(real p_fPhi)
		m_fPhi=p_fPhi;
	endproc;

	export proc real GetPhi()
		return(m_fPhi);
	endproc;

	export proc ^CCamera GetCamera()
		return(m_pxCurCamera);
	endproc;

	export proc bool SetCameraTarget(vec3 p_vPos)
		var vec3 vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
		m_pxCurCamera^.LookAt()=p_vPos;
		m_pxCurCamera^.LookAt().SetZ(CClientWrap.GetScapeMgr().GetHeight(m_pxCurCamera^.LookAt().GetX(),m_pxCurCamera^.LookAt().GetY())+1.5);
		m_pxCurCamera^.Eye()=m_pxCurCamera^.LookAt()+vDir;
		return(true);
	endproc;

endclass;
*/