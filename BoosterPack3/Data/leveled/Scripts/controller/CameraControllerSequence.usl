// [PaHa] This file is unused and should be deleted soon.

/*
class CCameraControllerSequence inherit CInputController

	// settings
	export var real		m_fSpeedScale;
	var int				m_iLastX;
	var int				m_iLastY;
	var bool			m_bSpace;
	var bool			m_bLBtn;
	var bool			m_bRBtn;
	var bool			m_bMBtn;
	var real			m_fRadius;
	var real			m_fPhi;
	var real 			m_fTheta;
	// external data
	var ^CObjSelection	m_pxSelection;
	var ^CCamera m_pxCurCamera;			///< pointer to the camera currently controlled
	// local camera data; update with UpdateCamera()
	var vec3 m_vTarget;
	var vec3 m_vDir;
	var vec3 m_vDirX;
	var vec3 m_vDirY;
	var vec3 m_vDirZ;

	// constructor
	export constructor()
		m_fRadius=70.0;
		m_fSpeedScale=4.0f;
		m_fPhi=Math.Pi()+Math.Pihalf()/2.0;
		m_fTheta=Math.Pihalf()/2.0;
		m_iLastX=0;
		m_iLastY=0;
		m_bSpace=false;
		m_bLBtn=false;
		m_bRBtn=false;
		m_bMBtn=false;
		CClientWrap.GetUIMgr().GetMiniMap2d()^.m_xOnDblClick=OnMiniMapDblClick;
	endconstructor;

	proc bool OnMiniMapDblClick(vec3 p_vPos)
		return SetCameraTarget(p_vPos);
	endproc;

	proc void DeactivateSeqCamera()
		var ^CSequence pxSequence=CLevelEditorWrap.GetClient().GetSequence();
		if(pxSequence!=null)then
			pxSequence^.SetActiveCamera(-1);
		endif;
	endproc;

	// set current camera
	export proc void Control(^CCamera p_pxCamera)
		m_pxCurCamera=p_pxCamera;
		UpdateCamera(true);
	endproc;

	// return current camera
	export proc ^CCamera GetCamera()
		return(m_pxCurCamera);
	endproc;

	// Get or set current camera's position
	proc void UpdateCamera(bool p_bGetOrSet)
		if(m_pxCurCamera==null)then
			return;
		endif;
		
		if(p_bGetOrSet)then
			m_vTarget = m_pxCurCamera^.LookAt();
			m_vDir = m_pxCurCamera^.Eye()-m_vTarget;
			m_vDirY.SetXYZ(-m_vDir.GetX(),-m_vDir.GetY(),-m_vDir.GetZ());
			m_vDirX = m_vDirY$m_pxCurCamera^.Up();
			m_vDirX.Normalize();
			m_vDirY.SetZ(0.0);
			m_vDirY.Normalize();
			m_vDirZ = m_vDirX$m_vDirY;
		else
			m_pxCurCamera^.LookAt()=m_vTarget;
			m_pxCurCamera^.Eye()=m_vTarget+m_vDir;
		endif;
	endproc;
	
	// message handler; all camera controlling happens in here
	export proc bool HandleMsg(bitset p_dwType, bitset p_dwFlags, int p_iKey, int p_iX, int p_iY)
		// update alt key state
		var bool bAlt=false;
		if((p_dwFlags&0100b)==0100b)then
			bAlt=true;
		endif;

		if(p_dwType==CInputController.MT_MouseLBtnDown)then m_bLBtn=true; return bAlt;
		elseif(p_dwType==CInputController.MT_MouseLBtnUp)then m_bLBtn=false; return false;
		elseif(p_dwType==CInputController.MT_MouseRBtnDown)then m_bRBtn=true; return bAlt;
		elseif(p_dwType==CInputController.MT_MouseRBtnUp)then m_bRBtn=false; return false;
		elseif(p_dwType==CInputController.MT_MouseMBtnDown)then m_bMBtn=true; return bAlt;
		elseif(p_dwType==CInputController.MT_MouseMBtnUp)then m_bMBtn=false; return false;
		elseif(p_dwType==CInputController.MT_KeyDown)then
			if(p_iKey==67)then // 'C' => center view around selection
				return CenterOnSelection();
			endif;
			return false;
		elseif(p_dwType==CInputController.MT_MouseMove)then
			DeactivateSeqCamera();
			var vec3 vMoveX={0.0,0.0,0.0};
			var vec3 vMoveY={0.0,0.0,0.0};
			var int iDiffX=0;
			var int iDiffY=0;
			iDiffX=p_iX-m_iLastX;
			iDiffY=p_iY-m_iLastY;
			m_iLastX=p_iX;
			m_iLastY=p_iY;
			if(bAlt)then
				if(m_bMBtn)then
					// pan view
					UpdateCamera(true); // get current camera settings
					var real fXScale=0.025*m_fSpeedScale;
					var real fYScale=0.025*m_fSpeedScale;
					vMoveX = m_vDirX*iDiffX.ToReal()*fXScale;
					vMoveY = m_vDirY*iDiffY.ToReal()*fYScale;
					m_vTarget+=vMoveX;
					m_vTarget+=vMoveY;
					UpdateCamera(false); // store current camera settings
					return true;
				endif;
				if(m_bLBtn)then
					// orbit around target
					UpdateCamera(true); // get current camera settings
					var real fXScale=0.00125*m_fSpeedScale;
					var real fYScale=0.00125*m_fSpeedScale;
					var real fXChange=iDiffX.ToReal()*fXScale;
					var real fYChange=iDiffY.ToReal()*fYScale;
					m_fPhi+=fXChange;
					m_fTheta+=fYChange;
					m_fTheta=Math.Clamp(m_fTheta,(Math.Pihalf())*(-0.95f),(Math.Pihalf()*0.99f));
					var real fCT=Math.Cos(m_fTheta);
					var real fX=Math.Cos(m_fPhi)*fCT;
					var real fY=Math.Sin(m_fPhi)*fCT;
					var real fZ=Math.Sin(m_fTheta);
					m_vDir.SetX(fX);m_vDir.SetY(fY);m_vDir.SetZ(fZ);
					m_vDir.Normalize();
					m_vDir*=m_fRadius;
					UpdateCamera(false); // store current camera settings
					return true;
				endif;
				if(m_bRBtn)then
					// zoom view
					UpdateCamera(true); // get current camera settings
					var real fXScale=0.025*m_fSpeedScale;
					var real fYScale=0.025*m_fSpeedScale;
					var real fXChange=iDiffX.ToReal()*fXScale;
					var real fYChange=iDiffY.ToReal()*fYScale;
					var real fChange;
					if(Math.Abs(fXChange)>Math.Abs(fYChange))then
						fChange=fXChange;
					else
						fChange=fYChange;
					endif;
					m_fRadius+=fChange;
					m_fRadius=Math.Clamp(m_fRadius,0.5,5000.0);
					m_vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
					m_vDir.Normalize();
					m_vDir*=m_fRadius;
					UpdateCamera(false); // store current camera settings
					return true;
				endif;
			endif;
			UpdateCamera(false);
		else
			// TODO: get extents of complete scene and center around that
			return false;
		endif;
		
		return false;
	endproc;
	
	// Update camera's target
	export proc bool SetCameraTarget(vec3 p_vPos)
		if(m_pxCurCamera==null)then
			return false;
		endif;
		m_vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
		m_vTarget=p_vPos;
		m_vTarget.SetZ(CClientWrap.GetScapeMgr().GetHeight(m_vTarget.GetX(),m_vTarget.GetY())+1.5f);
		UpdateCamera(false);
		return(true);
	endproc;
	
	// Center camera on selection
	export proc bool CenterOnSelection()
		var bool bHasSelection=true;
		m_pxSelection=^(CClientWrap.GetSelection());
		if((m_pxSelection==null)||(m_pxSelection^.NumEntries()<1))then
			bHasSelection=false;
		endif;
		
		if(bHasSelection)then
			UpdateCamera(true);
			
			var vec3 vTarget=m_pxSelection^.GetPos();
			var vec3 vExtents=m_pxSelection^.GetExtents();
			
			// set camera target to selection's center
			SetCameraTarget(vTarget);

			m_fRadius = vExtents.Abs3M()*2.0f;
			m_vDir.Normalize();
			m_vDir *= m_fRadius;
			
			UpdateCamera(false);
		else
			// TODO: get extents of complete scene and center around that
			return false;
		endif;
		return true;
	endproc;

endclass;
*/