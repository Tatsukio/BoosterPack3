// [PaHa] This file is unused and should be deleted soon.

/*
class CCameraTimer inherit CWindow

	var int				m_iTimerID;
	var ^CCamera		m_pxCurCamera;
	
	constructor()
		SetSize(0,0);SetPos(0,0);	// möglichst unsichtbar machen
	endconstructor;
	
	proc int GetTimer()
		return(m_iTimerID);
	endproc;
	
	proc void SetTimer()
		m_iTimerID=CWindowMgr.Get().SetTimer(this, 45, true);
	endproc;
	
	export proc void SetCamera(^CCamera p_pxCurCamera)
		m_pxCurCamera=p_pxCurCamera;
	endproc;

	proc void SnapOnGround()
		var vec3 vDir=m_pxCurCamera^.Eye()-m_pxCurCamera^.LookAt();
		var vec3 vEye;
		var real fH,fHM;
		var real fDX,fDY;
		m_pxCurCamera^.LookAt().SetZ( Math.Clamp(CClientWrap.GetScapeMgr().GetHeight(m_pxCurCamera^.LookAt().GetX(),m_pxCurCamera^.LookAt().GetY()),16.0,99999.9)+2.4);
		vEye = m_pxCurCamera^.LookAt() + vDir;
		fHM=vEye.GetZ();
		for(fDY=-4.0)cond(fDY<=4.0)iter(fDY=fDY+2.0f)do
			for(fDX=-4.0)cond(fDX<=4.0)iter(fDX=fDX+2.0f)do
				fH=CClientWrap.GetScapeMgr().GetHeight(vEye.GetX()+fDX,vEye.GetY()+fDY)+2.0;if(fH>fHM+1.0)then fHM=fH;endif;
			endfor
		endfor
		vEye.SetZ(fHM);
		m_pxCurCamera^.Eye()=vEye;
		m_pxCurCamera^.LookAt()=vEye-vDir;
	endproc;

	proc ^CCamera GetCamera()
		return(m_pxCurCamera);
	endproc;

endclass;

class CCameraTimerMoveX inherit CCameraTimer

	var int							m_iDir;
	static var ^CCameraTimerMoveX	ms_pxInst;
	
	export proc void Move(int p_iDir)
		m_iDir=p_iDir;
		SetTimer();
	endproc;
	
	export static proc ref CCameraTimerMoveX Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CCameraTimerMoveX;
		endif;
		return(ms_pxInst^);
	endproc;

	export static proc void Kill()
		delete ms_pxInst;
		ms_pxInst = null;
	endproc;

	export static proc bool IfExists()
		if(ms_pxInst==null)then return(false);	else return(true);	endif;
	endproc;

	proc bool OnTimer(int p_iID)
		if(GetTimer()==p_iID)then
			var vec3 vDir = GetCamera()^.Eye()-GetCamera()^.LookAt();

			var real fSpeedScale=Math.Clamp((vDir.Abs()/15.0),0.1,9999.9);

			vDir=vDir$GetCamera()^.Up();
			vDir.Normalize();
			vDir*=m_iDir.ToReal();
			vDir*=fSpeedScale;
			
			GetCamera()^.Eye()+=vDir;
			GetCamera()^.LookAt()+=vDir;
			SnapOnGround();
			return(true);
		endif;
		return(false);
	endproc;
	
endclass;

class CCameraTimerMoveY inherit CCameraTimer

	var int							m_iDir;
	static var ^CCameraTimerMoveY	ms_pxInst;

	export static proc ref CCameraTimerMoveY Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CCameraTimerMoveY;
		endif;
		return(ms_pxInst^);
	endproc;

	export static proc void Kill()
		delete ms_pxInst;
		ms_pxInst = null;
	endproc;

	export static proc bool IfExists()
		if(ms_pxInst==null)then return(false);	else return(true);	endif;
	endproc;


	export proc void Move(int p_iDir)
		m_iDir=p_iDir;
		SetTimer();
	endproc;

	proc bool OnTimer(int p_iID)
		if(GetTimer()==p_iID)then
			var vec3 vDir = GetCamera()^.Eye()-GetCamera()^.LookAt();
			var real fSpeedScale=Math.Clamp((vDir.Abs()/15.0),0.1,9999.9);

			vDir.SetZ(0.0);
			vDir.Normalize();
			vDir*=m_iDir.ToReal();
			vDir*=fSpeedScale;
			GetCamera()^.Eye()+=vDir;
			GetCamera()^.LookAt()+=vDir;
			SnapOnGround();
			return(true);
		endif;
		return(false);
	endproc;
	
endclass;

class CCameraTimerZoom inherit CCameraTimer

	class CCameraMoveType
	
		var int m_iCurveType;
		var int m_iAcceleration;
		var int m_iDeceleration;
		
		export constructor()
		endconstructor;
		
		export proc void Set( int p_iCurve, int p_iAcc, int p_iDec )
			m_iCurveType	= p_iCurve;
			m_iAcceleration	= p_iAcc;
			m_iDeceleration	= p_iDec;
		endproc;

		export proc int GetCurveType()
			return m_iCurveType;
		endproc;

		export proc int GetAcceleration()
			return m_iAcceleration;
		endproc;

		export proc int GetDeceleration()
			return m_iDeceleration;
		endproc;
	
	endclass;


	static var ^CCameraTimerZoom	ms_pxInst;
	var int							m_iCount;
	var int							m_iFrames;
	var real						m_fDelta;
	var real						m_fStartPos;
	var real						m_fTargetPos;
	var real						m_fDiff;
	var real						m_fPhi;
	var real						m_fRadius;
	var real						m_fLowLimit;
	
	var array vec2					m_avStep;
	var point						m_xMove;
	
	var array CCameraTimerZoom.CCameraMoveType	m_axMoves;
	constructor()

		m_fLowLimit=-0.03;
		m_fRadius=35.0;
		
		//Definitions:
		//number of frames used per zoom, some kind of time
		m_iFrames		= 5;

		m_avStep = 3;
		//2dvector distance between cam and target for each step. target is fixed on ground.
		//m_avStep[0]		= { 60.0 , 60.0 };
		//m_avStep[1]		= { 30.0 , 30.0 };
		//m_avStep[2]		= {  12.0 ,  1.2 };
		
		m_avStep[0]		= { 45.0 , 45.0 };
		m_avStep[1]		= { 30.0 , 30.0 };
		m_avStep[2]		= {  12.0 ,  1.2 };
		
		m_axMoves = 8;
		//Set( int CurveType (0=linear, 1=sqare), int Acceleration (0=linear, 1=sinus), int Deceleration (0=linear, 1=sinus) )
		m_axMoves[1].Set(	0,	1,	1 );	// 0->1
		m_axMoves[2].Set(	0,	1,	1 );	// 0->2
		m_axMoves[3].Set(	0,	1,	1 );	// 1->2
		m_axMoves[5].Set(	0,	1,	1 );	// 1->0
		m_axMoves[6].Set(	0,	1,	1 );	// 2->0
		m_axMoves[7].Set(	0,	1,	1 );	// 2->1
	
	endconstructor;

	export static proc ref CCameraTimerZoom Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CCameraTimerZoom;
		endif;
		return(ms_pxInst^);
	endproc;

	export static proc void Kill()
		delete ms_pxInst;
		ms_pxInst = null;
	endproc;

	export static proc bool IfExists()
		if(ms_pxInst==null)then return(false);	else return(true);	endif;
	endproc;

	export proc real AddZoom( int p_iTargetPos )
		if(m_iCount<(m_iFrames/2))then
			m_iCount=m_iFrames-m_iCount;
		endif;
		m_fStartPos = m_fDelta;
		m_fTargetPos = p_iTargetPos.ToReal()*0.5;
		m_fDiff = (m_fDelta-m_fTargetPos)*0.5;
		return( Math.Clamp(m_fTargetPos,m_fLowLimit,1.0) );
	endproc;

	export proc real Zoom( int p_iStart, int p_iEnd, real p_fPhi )
//		CGameWrap.LogError("Camera",m_avStep[p_iStart].ToString()+" -> "+m_avStep[p_iEnd].ToString());		

		m_xMove.SetX(p_iStart);
		m_xMove.SetY(p_iEnd);
		
		m_iCount=m_iFrames-1;
		m_fPhi = p_fPhi;

		SetTimer();

		return(Math.Clamp(m_fTargetPos,m_fLowLimit,1.0));
	endproc;

	proc real CalcNewFOV(real p_fHeight)
		if (p_fHeight<10.0) then
			return (Math.Pi()/4.0 + ((p_fHeight-10.0)*-0.015));
		else
			return (Math.Pi()/4.0);
		endif;
	endproc;

	proc bool OnTimer(int p_iID)
		if(GetTimer()==p_iID)then
			if(m_iCount>0)then
				
				var vec3 vNewPos;

				var int iA = m_xMove.GetX();
				var int iB = m_xMove.GetY();
				var int iC = 0;
				if(iB<iA)then
					iC = 4;
				endif;
				
				iC += (iA+iB);
				
				var real fX1	= m_avStep[iA].GetX();
				var real fX2	= m_avStep[iB].GetX();
				var real fY1	= m_avStep[iA].GetY();
				var real fY2	= m_avStep[iB].GetY();
				
				var vec2 vStep	= CalcPathPos(m_axMoves[iC], m_iCount);
				
				vNewPos.SetX( fX2 + (fX1 - fX2) * vStep.GetX() );
				vNewPos.SetZ( fY2 + (fY1 - fY2) * vStep.GetY() );
				vNewPos.RotZ(-m_fPhi);
				
				GetCamera()^.Eye()=GetCamera()^.LookAt()+vNewPos;	
				GetCamera()^.FOV() = CalcNewFOV( vNewPos.GetZ() );  
				
				m_iCount--;
			else
				var vec3 vDir;
				vDir.SetX(m_avStep[m_xMove.GetY()].GetX());
				vDir.SetZ(m_avStep[m_xMove.GetY()].GetY());
				vDir.RotZ(-m_fPhi);
				GetCamera()^.Eye()=GetCamera()^.LookAt() + vDir;
				GetCamera()^.FOV() = CalcNewFOV( vDir.GetZ() );  
				//REMOVE CMainController.Get().GetCameraCtrlGame().SetDelta(m_xMove.GetY());
				Kill();
			endif;
		endif;
		return(false);
	endproc;
	
	proc vec2 CalcPathPos( ref CCameraTimerZoom.CCameraMoveType p_rxType , int p_iStep )
	
		var real fStep		= p_iStep.ToReal()/m_iFrames.ToReal();
		var real fAccStep;
		var vec2 vReturn;
	
	
		if(p_rxType.GetAcceleration()==1 && fStep>0.5)then
			fAccStep = (1.0 - Math.Cos(fStep*Math.Pi())) / 2.0;;
		elseif(p_rxType.GetDeceleration()==1 && fStep<0.5)then
			fAccStep = (1.0 - Math.Cos(fStep*Math.Pi())) / 2.0;
		else
			fAccStep = fStep;
		endif;

		vReturn.SetX(fAccStep);
		vReturn.SetY(fAccStep);

		//CGameWrap.LogSpam("Camera","fAccStep="+fAccStep.ToString());

		if(p_rxType.GetCurveType()==1)then
			vReturn.SetY(fAccStep*fAccStep);
		endif;
	
		return(vReturn);
	endproc;
	
	export proc bool SetStep( int p_iStart, int p_iEnd, real p_fPhi )
		m_xMove.SetX(p_iStart);
		m_xMove.SetY(p_iEnd);
		m_iCount=1;
		m_fPhi = p_fPhi;
		SetTimer();
		return(true);
	endproc;
	
endclass;
*/