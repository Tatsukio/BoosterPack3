class CViewScreenRegions inherit CEnhancedFrameWindow
	
	var ^CList 				m_pxList;
	var ^CButton 			m_pxNew;
	var ^CButton 			m_pxRem;
	
	var ^CEdit				m_pxName;
	var ^CSpinCtrlNumber	m_pxLeft;
	var ^CSpinCtrlNumber	m_pxTop;
	var ^CSpinCtrlNumber	m_pxRight;
	var ^CSpinCtrlNumber	m_pxBottom;
	var ^CCheckBox			m_pxUseFrameMarker;
	var ^CSpinCtrlNumber	m_pxFrameWidth;
	var ^CEdit 				m_pxColor1;
	var ^CEdit 				m_pxColor2;	
	
	class CFrameData inherit CItemData
		export var CPropDB m_xData;
					
		export constructor(^CPropDB.CNode p_pxNode)
			m_xData.GetRoot().Clear();
			if(p_pxNode==null)then
				m_xData.GetRoot().Name()="New Screen Region";
				return;
			endif;
			m_xData.GetRoot().Name()=p_pxNode^.Name();
			m_xData.GetRoot().Join(p_pxNode);
		endconstructor;
		
		export proc string GetName()
			return m_xData.GetRoot().Name();
		endproc;
		
		export proc void SetName(string p_sName)
			m_xData.GetRoot().Name()=p_sName;
		endproc;
		
		export proc ref CPropDB GetData()
			return m_xData;
		endproc;
		
		export proc string GetValueS(string p_sName,string p_sDefault)
			return m_xData.GetRoot().GetValueS(p_sName,p_sDefault);
		endproc;
		
		export proc void SetValue(string p_sName, string p_sValue)
			m_xData.GetRoot().SetValue(p_sName,p_sValue);
		endproc;
		
		export proc int GetValueI(string p_sName,int p_iDefault)
			return m_xData.GetRoot().GetValueI(p_sName,p_iDefault);
		endproc;
		
		export proc void SetValue(string p_sName, int p_iValue)
			m_xData.GetRoot().SetValue(p_sName,p_iValue);
		endproc;
	endclass;
	
	export constructor()
		if(!InitFromResource("Trigger/ViewScreenRegions","ScreenRegions"))then
			KLog.LogError("UI.ViewScreenRegions", "InitFromResource failed");
			return;
		endif;
		
		m_pxList 	= cast<CList>(GetControl("List"));
		m_pxNew		= cast<CButton>(GetControl("Btn_New"));
		m_pxRem		= cast<CButton>(GetControl("Btn_Rem"));		
		m_pxName	= cast<CEdit>(GetControl("Name"));
		m_pxLeft = cast<CSpinCtrlNumber>(GetControl("Left"));;
		m_pxTop = cast<CSpinCtrlNumber>(GetControl("Top"));;
		m_pxRight = cast<CSpinCtrlNumber>(GetControl("Right"));;
		m_pxBottom = cast<CSpinCtrlNumber>(GetControl("Bottom"));;	
		m_pxUseFrameMarker=cast<CCheckBox>(GetControl("UseUIMarker"));
		m_pxFrameWidth	= cast<CSpinCtrlNumber>(GetControl("FrameWidth"));
		m_pxColor1	= cast<CEdit>(GetControl("Color1"));
		m_pxColor2	= cast<CEdit>(GetControl("Color2"));
		
		m_pxList^.m_xOnSelect = OnSelectFrame;
		m_pxNew^.m_xOnClick = OnNewFrame;
		m_pxRem^.m_xOnClick = OnRem;
		
		LoadData();
	endconstructor;
	
	destructor()
		Clear();		
	enddestructor;
	
	proc void Clear()
		var int i,iC=m_pxList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CFrameData pxFD=cast<CFrameData>(m_pxList^.GetItemData(i));
			delete pxFD;			
		endfor;	
		m_pxList^.Clear();
	endproc;
	
	proc void OnChange_Set()
		m_pxName^.m_xOnUpdate = OnChange;
		m_pxLeft^.m_xOnChange = OnChange;
		m_pxTop^.m_xOnChange = OnChange;
		m_pxRight^.m_xOnChange = OnChange;
		m_pxBottom^.m_xOnChange = OnChange;
		m_pxUseFrameMarker^.m_xOnStateChange = OnChange;
		m_pxFrameWidth^.m_xOnChange = OnChange;
		m_pxColor1^.m_xOnUpdate = OnChange;
		m_pxColor2^.m_xOnUpdate = OnChange;
	endproc;
	
	proc void OnChange_Clear()
		m_pxName^.m_xOnUpdate.Clear();
		m_pxLeft^.m_xOnChange.Clear();
		m_pxTop^.m_xOnChange.Clear();
		m_pxRight^.m_xOnChange.Clear();
		m_pxBottom^.m_xOnChange.Clear();
		m_pxUseFrameMarker^.m_xOnStateChange.Clear();
		m_pxFrameWidth^.m_xOnChange.Clear();
		m_pxColor1^.m_xOnUpdate.Clear();
		m_pxColor2^.m_xOnUpdate.Clear();
	endproc;
	
	proc bool OnSelectFrame()
		OnChange_Clear();
		m_pxName^.SetText("");
		m_pxLeft^.SetValue(0);
		m_pxTop^.SetValue(0);
		m_pxRight^.SetValue(0);
		m_pxBottom^.SetValue(0);
		m_pxUseFrameMarker^.SetChecked(0);
		m_pxFrameWidth^.SetValue(0);
		m_pxColor1^.SetText("");
		m_pxColor2^.SetText("");		
		
		var int iIdx=m_pxList^.GetSelectedItem();
		if(iIdx!=-1)then 
			var ^CFrameData pxFD=cast<CFrameData>(m_pxList^.GetItemData(iIdx));
			if(pxFD!=null)then
				m_pxName^.SetText(pxFD^.GetName());
				m_pxLeft^.SetValue(pxFD^.GetValueI("left",0));
				m_pxTop^.SetValue(pxFD^.GetValueI("top",0));
				m_pxRight^.SetValue(pxFD^.GetValueI("right",0));
				m_pxBottom^.SetValue(pxFD^.GetValueI("bottom",0));
				m_pxUseFrameMarker^.SetChecked(pxFD^.GetValueI("use_frame_marker",0));
				m_pxFrameWidth^.SetValue(pxFD^.GetValueI("framewidth",5));
				m_pxColor1^.SetText(pxFD^.GetValueS("color1","255 0 0 255"));
				m_pxColor2^.SetText(pxFD^.GetValueS("color2","0 255 0 255"));
				
				var bool bUseFrameMarker=m_pxUseFrameMarker^.GetChecked()!=0;
				m_pxFrameWidth^.SetDisabled(!bUseFrameMarker);
				m_pxColor1^.SetDisabled(!bUseFrameMarker);
				m_pxColor2^.SetDisabled(!bUseFrameMarker);
			endif;
		endif;
		
		OnChange_Set();
		OnChange();
		return true;
	endproc;
	
	proc bool OnNewFrame()
		var int iIdx=m_pxList^.AddItem("New Screen Region",new CFrameData(null));
		m_pxList^.Select(iIdx);
		return true;
	endproc;
	
	proc bool OnRem()
		var int iIdx=m_pxList^.GetSelectedItem();
		if(iIdx!=-1)then
			var ^CFrameData pxFD=cast<CFrameData>(m_pxList^.GetItemData(iIdx));
			delete pxFD;
			m_pxList^.DeleteItem(iIdx);
			OnSelectFrame();
		endif;
		return true;
	endproc;
	
	proc bool OnChange()		
		var int iIdx=m_pxList^.GetSelectedItem();
		if(iIdx==-1)then return true; endif;
		var ^CFrameData pxFD=cast<CFrameData>(m_pxList^.GetItemData(iIdx));
		if(pxFD==null)then return true; endif;
		pxFD^.SetName(m_pxName^.GetText());
		m_pxList^.SetItemText(iIdx,pxFD^.GetName());
		
		pxFD^.SetValue("left",m_pxLeft^.GetValueInt());
		pxFD^.SetValue("top",m_pxTop^.GetValueInt());
		pxFD^.SetValue("right",m_pxRight^.GetValueInt());
		pxFD^.SetValue("bottom",m_pxBottom^.GetValueInt());
		pxFD^.SetValue("use_frame_marker",m_pxUseFrameMarker^.GetChecked());
		pxFD^.SetValue("framewidth",m_pxFrameWidth^.GetValueInt());
		pxFD^.SetValue("color1",m_pxColor1^.GetText());
		pxFD^.SetValue("color2",m_pxColor2^.GetText());	
		
		var bool bUseFrameMarker=m_pxUseFrameMarker^.GetChecked()!=0;
		m_pxFrameWidth^.SetDisabled(!bUseFrameMarker);
		m_pxColor1^.SetDisabled(!bUseFrameMarker);
		m_pxColor2^.SetDisabled(!bUseFrameMarker);
		
		return true;
	endproc;
	
	proc void LoadData()
		OnChange_Clear();
		Clear();
		var int iSelIdx=-1;
		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB.CNode pxFFNode=^((pxLevelInfo^.GetGenericData())["ScreenRegions"]);
		var int i,iC=pxFFNode^.NumSubs();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CPropDB.CNode pxWalk=^(pxFFNode^.Get(i));
			var ^CFrameData pxNewFrame=new CFrameData(pxWalk);			
			iSelIdx=m_pxList^.AddItem(pxNewFrame^.GetName(),pxNewFrame);
		endfor;
		OnChange_Set();
		m_pxList^.Select(iSelIdx);		
	endproc;
	
	proc void SaveData()
		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB.CNode pxFFNode=^((pxLevelInfo^.GetGenericData())["ScreenRegions"]);
		pxFFNode^.Clear();
		var int i,iC=m_pxList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CFrameData pxFD=cast<CFrameData>(m_pxList^.GetItemData(i));
			if(pxFD==null)then continue; endif;
			var string sName=pxFD^.GetName();
			if(sName.IsEmpty())then continue; endif;
			var ^CPropDB.CNode pxNewFrameNode=^(pxFFNode^.SetValue(sName,""));
			pxNewFrameNode^.Join(^(pxFD^.GetData().GetRoot()));			
		endfor;
		//pxLevelInfo^.GetGenericData().Save("C:/TestSR.txt");
		
	endproc;
		
	export proc bool OnClose()
		SaveData();
		super.OnClose();
		Destroy();
		return true;
	endproc;
endclass;

