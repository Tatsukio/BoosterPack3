class CViewScapeEdit inherit CEnhancedFrameWindow;
		
	//This window
	static var ^CViewScapeEdit		ms_pxInst;
	
	var string						m_sSetting;
	
	var ^CCheckBox 					m_pxAbsoluteDetail;
	var ^CSpinCtrlNumber 			m_pxDetailSpinCtrl;
	var ^CSpinCtrlNumber 			m_pxPlateauSpinCtrl;
	
	var bool						m_bAbsoluteDetail;
	
	var int							m_iAbsoluteDetail;
	var real						m_fPlateauHeight;
	
	var array ^CToggleButton		m_apxLandscapeButtons;
	var array ^CToggleButton		m_apxMaterialButtons;
	
	//Scape lift
	var ^CScapeHeightBrush			m_pxHeightBrush;
	var ^CScapeMaterialBrush		m_pxMaterialBrush;
	var int 						m_iTemplateWidth;
	var int 						m_iTemplateHeight;
	var bool						m_bSelectionValid;
	var string						m_sHeightBrush;
	var string						m_sMaterialBrush;
	var rect						m_xRect;
	var real						m_fLevelStep;
	
	
	export constructor()
		if(!InitFromResource("scape/ViewScapeEdit","ViewScapeEdit")) then
			CLevelEditorWrap.LogError("UI.ViewScapeEdit","InitFromResource failed");
			return;
		endif;
				
		ms_pxInst=this;
		
		//Tell main controller about this window
		CMainController.Get().GetTerrainCtrl().SetCViewScapeEdit(this);
		
		//Material 1 Button
		var ^CToggleButton pxMaterial1 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat1Button"));
		pxMaterial1^.m_xOnClick = OnMaterial1;
		pxMaterial1^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial1);
		m_apxMaterialButtons.AddEntry(pxMaterial1);
		CKeyHandler.Get().AddToolTip(pxMaterial1,"SwitchMaterial1","Paint Material 1");
		
		//Material 2 Button
		var ^CToggleButton pxMaterial2 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat2Button"));
		pxMaterial2^.m_xOnClick = OnMaterial2;
		pxMaterial2^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial2);
		m_apxMaterialButtons.AddEntry(pxMaterial2);
		CKeyHandler.Get().AddToolTip(pxMaterial2,"SwitchMaterial2","Paint Material 2");
		
		//Material 3 Button
		var ^CToggleButton pxMaterial3 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat3Button"));
		pxMaterial3^.m_xOnClick = OnMaterial3;
		pxMaterial3^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial3);
		m_apxMaterialButtons.AddEntry(pxMaterial3);
		CKeyHandler.Get().AddToolTip(pxMaterial3,"SwitchMaterial3","Paint Material 3");
		
		//Material 4 Button
		var ^CToggleButton pxMaterial4 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat4Button"));
		pxMaterial4^.m_xOnClick = OnMaterial4;
		pxMaterial4^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial4);
		m_apxMaterialButtons.AddEntry(pxMaterial4);
		CKeyHandler.Get().AddToolTip(pxMaterial4,"SwitchMaterial4","Paint Material 4");
		
		//Material 5 Button
		var ^CToggleButton pxMaterial5 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat5Button"));
		pxMaterial5^.m_xOnClick = OnMaterial5;
		pxMaterial5^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial5);
		m_apxMaterialButtons.AddEntry(pxMaterial5);
		CKeyHandler.Get().AddToolTip(pxMaterial5,"SwitchMaterial5","Paint Material 5");
		
		//Material 6 Button
		var ^CToggleButton pxMaterial6 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat6Button"));
		pxMaterial6^.m_xOnClick = OnMaterial6;
		pxMaterial6^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial6);
		m_apxMaterialButtons.AddEntry(pxMaterial6);
		CKeyHandler.Get().AddToolTip(pxMaterial6,"SwitchMaterial6","Paint Material 6");
		
		//Material 7 Button
		var ^CToggleButton pxMaterial7 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat7Button"));
		pxMaterial7^.m_xOnClick = OnMaterial7;
		pxMaterial7^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial7);
		m_apxMaterialButtons.AddEntry(pxMaterial7);
		CKeyHandler.Get().AddToolTip(pxMaterial7,"SwitchMaterial7","Paint Material 7");
		
		//Material 8 Button
		var ^CToggleButton pxMaterial8 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat8Button"));
		pxMaterial8^.m_xOnClick = OnMaterial8;
		pxMaterial8^.SetGrouped(true);
		CMainController.Get().AddToggleButton(pxMaterial8);
		m_apxMaterialButtons.AddEntry(pxMaterial8);
		CKeyHandler.Get().AddToolTip(pxMaterial8,"SwitchMaterial8","Paint Material 8");

				
		//Altitude Button
		var ^CToggleButton pxAltitude = cast<CToggleButton>(GetControl("EditGroupBox/AltitudeButton"));
		pxAltitude^.m_xOnClick = OnAltitude;
		CKeyHandler.Get().AddToolTip(pxAltitude,"SwitchAltitudeMode","Altitude Mode");
		m_apxLandscapeButtons.AddEntry(pxAltitude);
		
		//Level Button
		var ^CToggleButton pxLevel = cast<CToggleButton>(GetControl("EditGroupBox/LevelButton"));
		pxLevel^.m_xOnClick = OnLevel;
		CKeyHandler.Get().AddToolTip(pxLevel,"SwitchLevelMode","Level Mode");
		m_apxLandscapeButtons.AddEntry(pxLevel);
		
		//Smoothing Button
		var ^CToggleButton pxSmoothing = cast<CToggleButton>(GetControl("EditGroupBox/SmoothingButton"));
		pxSmoothing^.m_xOnClick = OnSmoothing;
		CKeyHandler.Get().AddToolTip(pxSmoothing,"SwitchBlurMode","Blur Mode");
		m_apxLandscapeButtons.AddEntry(pxSmoothing);
		
		//Noise Button
		var ^CToggleButton pxRoughen = cast<CToggleButton>(GetControl("EditGroupBox/RoughenButton"));
		pxRoughen^.m_xOnClick = OnRoughen;
		CKeyHandler.Get().AddToolTip(pxRoughen,"SwitchNoiseMode","Noise Mode");
		m_apxLandscapeButtons.AddEntry(pxRoughen);
		
		//Detail Button
		var ^CToggleButton pxDetail = cast<CToggleButton>(GetControl("EditGroupBox/DetailButton"));
		pxDetail^.m_xOnClick = OnDetail;
		CKeyHandler.Get().AddToolTip(pxDetail,"SwitchDetailMode","Detail Mode");
		m_apxLandscapeButtons.AddEntry(pxDetail);
		
		//Plateau Button
		var ^CToggleButton pxPlateau = cast<CToggleButton>(GetControl("EditGroupBox/PlateauButton"));
		pxPlateau^.m_xOnClick = OnPlateau;
		CKeyHandler.Get().AddToolTip(pxPlateau,"SwitchPlateauMode","Plateau Mode");
		m_apxLandscapeButtons.AddEntry(pxPlateau);
		
		//Forest Button
		var ^CToggleButton pxForest = cast<CToggleButton>(GetControl("EditGroupBox/ForestButton"));
		CKeyHandler.Get().AddToolTip(pxForest,"SwitchForestMode","Forest Mode");
		pxForest^.m_xOnClick = OnForest;
		m_apxLandscapeButtons.AddEntry(pxForest);
		
		//Cliff Button
		var ^CToggleButton pxCliff = cast<CToggleButton>(GetControl("EditGroupBox/CliffButton"));
		//CKeyHandler.Get().AddToolTip(pxCliff,"SwitchCliffMode","Cliff Mode");
		pxCliff^.m_xOnClick = OnCliff;
		m_apxLandscapeButtons.AddEntry(pxCliff);
		pxCliff^.SetDisabled(true);
		
		//Button without a name. At the time of coding, this feature was still unknown.
		var ^CToggleButton pxFeature = cast<CToggleButton>(GetControl("EditGroupBox/FeatureButton"));
		//CKeyHandler.Get().AddToolTip(pxFeature,"SwitchFeatureMode","Feature Mode");
		pxFeature^.m_xOnClick = OnFeature;
		m_apxLandscapeButtons.AddEntry(pxFeature);
		pxFeature^.SetDisabled(true);

		//Add scape buttons to main controller
		CMainController.Get().AddToggleButton(pxAltitude);
		CMainController.Get().AddToggleButton(pxLevel);
		CMainController.Get().AddToggleButton(pxSmoothing);
		CMainController.Get().AddToggleButton(pxRoughen);
		CMainController.Get().AddToggleButton(pxDetail);
		CMainController.Get().AddToggleButton(pxPlateau);
		CMainController.Get().AddToggleButton(pxForest);
		CMainController.Get().AddToggleButton(pxCliff);
		CMainController.Get().AddToggleButton(pxFeature);
		
		pxAltitude^.SetGrouped(true);
		pxLevel^.SetGrouped(true);
		pxRoughen^.SetGrouped(true);
		pxSmoothing^.SetGrouped(true);
		pxDetail^.SetGrouped(true);
		pxPlateau^.SetGrouped(true);
		pxForest^.SetGrouped(true);
		
		m_pxAbsoluteDetail = cast<CCheckBox>(GetControl("EditGroupBox/CheckBoxDetail"));
	
		//Initalize Options on first start
		if(CSettings.NumSubs("Editor/Misc")==0)then
			CSettings.Set("Editor/Misc/AbsoluteDetail","false");
			CSettings.Set("Editor/Misc/Detialgrade",0);
		endif;
		
		var string	sAbsoluteDetail;
		var int		iDetialgrade;
		CSettings.Get("Editor/Misc/AbsoluteDetail",sAbsoluteDetail);
		CSettings.Get("Editor/Misc/Detialgrade",iDetialgrade);
		
		if(sAbsoluteDetail=="true")then
			m_bAbsoluteDetail=true;
			m_pxAbsoluteDetail^.SetChecked(1);
		else
			m_bAbsoluteDetail=false;
			m_pxAbsoluteDetail^.SetChecked(0);
		endif;
	
		m_pxAbsoluteDetail^.m_xOnStateChange = OnAbsoluteDetail;
		m_pxDetailSpinCtrl = cast<CSpinCtrlNumber>(GetControl("EditGroupBox/SpinCtrlDetail"));
		m_pxDetailSpinCtrl^.SetLimits(0,6,1);
		m_pxDetailSpinCtrl^.SetValue(iDetialgrade);
		m_pxDetailSpinCtrl^.m_xOnChange = OnAbsoluteDetailSpinCtrl;
		
		m_pxPlateauSpinCtrl = cast<CSpinCtrlNumber>(GetControl("EditGroupBox/SpinCtrlPlateau"));
		m_pxPlateauSpinCtrl^.SetDecimals(1);
		m_pxPlateauSpinCtrl^.SetLimits(-100.0f,1000.0f,0.1);
		m_pxPlateauSpinCtrl^.m_xOnChange = OnPlateauSpinCtrl;
		
		
		DisableAbsoluteSettings();
		LoadPosition("ScapeEdit");
		
		m_bSelectionValid=false;
		
		var ^CWindow pxDesktop = CWindowMgr.Get().GetDesktop(0);				
		m_fLevelStep=1.0f;
	
		
	endconstructor;

	export destructor()
		
		//Delete all ToggleButtons from main controller
		var ^CToggleButton pxMaterial1 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat1Button"));
		var ^CToggleButton pxMaterial2 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat2Button"));
		var ^CToggleButton pxMaterial3 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat3Button"));
		var ^CToggleButton pxMaterial4 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat4Button"));
		var ^CToggleButton pxMaterial5 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat5Button"));
		var ^CToggleButton pxMaterial6 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat6Button"));
		var ^CToggleButton pxMaterial7 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat7Button"));
		var ^CToggleButton pxMaterial8 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat8Button"));
		
		CMainController.Get().DelToggleButton(pxMaterial1);
		CMainController.Get().DelToggleButton(pxMaterial2);
		CMainController.Get().DelToggleButton(pxMaterial3);
		CMainController.Get().DelToggleButton(pxMaterial4);
		CMainController.Get().DelToggleButton(pxMaterial5);
		CMainController.Get().DelToggleButton(pxMaterial6);
		CMainController.Get().DelToggleButton(pxMaterial7);
		CMainController.Get().DelToggleButton(pxMaterial8);
		
		var ^CToggleButton 	pxAltitude	= cast<CToggleButton>(GetControl("EditGroupBox/AltitudeButton"));
		var ^CToggleButton 	pxDetail	= cast<CToggleButton>(GetControl("EditGroupBox/DetailButton"));
		var ^CToggleButton 	pxSmoothing	= cast<CToggleButton>(GetControl("EditGroupBox/SmoothingButton"));
		var ^CToggleButton 	pxPlateau	= cast<CToggleButton>(GetControl("EditGroupBox/PlateauButton"));
		var ^CToggleButton 	pxForest	= cast<CToggleButton>(GetControl("EditGroupBox/ForestButton"));
		
		CMainController.Get().DelToggleButton(pxAltitude);
		CMainController.Get().DelToggleButton(pxDetail);
		CMainController.Get().DelToggleButton(pxSmoothing);
		CMainController.Get().DelToggleButton(pxPlateau);
		CMainController.Get().DelToggleButton(pxForest);
		
	enddestructor;

	export static proc ref CViewScapeEdit Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CViewScapeEdit;
		endif;
		return(ms_pxInst^);
	endproc;

	//Procref for material 1
	export proc bool OnMaterial1()
		var ^CToggleButton pxMaterial1 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat1Button"));
		CMainController.Get().SetToggleButton(pxMaterial1);
		PaintMaterial(0,pxMaterial1);
		return(true);
	endproc;
	
	//Procref for material 2
	export proc bool OnMaterial2()
		var ^CToggleButton pxMaterial2 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat2Button"));
		CMainController.Get().SetToggleButton(pxMaterial2);
		PaintMaterial(1,pxMaterial2);
		return(true);
	endproc;
	
	//Procref for material 3
	export proc bool OnMaterial3()
		var ^CToggleButton pxMaterial3 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat3Button"));
		CMainController.Get().SetToggleButton(pxMaterial3);
		PaintMaterial(2,pxMaterial3);
		return(true);
	endproc;

	//Procref for material 4
	export proc bool OnMaterial4()
		var ^CToggleButton pxMaterial4 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat4Button"));
		CMainController.Get().SetToggleButton(pxMaterial4);
		PaintMaterial(3,pxMaterial4);
		return(true);
	endproc;
	
	//Procref for material 5
	export proc bool OnMaterial5()
		var ^CToggleButton pxMaterial5 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat5Button"));
		CMainController.Get().SetToggleButton(pxMaterial5);
		PaintMaterial(4,pxMaterial5);
		return(true);
	endproc;
	
	//Procref for material 6
	export proc bool OnMaterial6()
		var ^CToggleButton pxMaterial6 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat6Button"));
		CMainController.Get().SetToggleButton(pxMaterial6);
		PaintMaterial(5,pxMaterial6);
		return(true);
	endproc;
	
	//Procref for material 7
	export proc bool OnMaterial7()
		var ^CToggleButton pxMaterial7 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat7Button"));
		CMainController.Get().SetToggleButton(pxMaterial7);
		PaintMaterial(6,pxMaterial7);
		return(true);
	endproc;

	//Procref for material 8
	export proc bool OnMaterial8()
		var ^CToggleButton pxMaterial8 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat8Button"));
		CMainController.Get().SetToggleButton(pxMaterial8);
		PaintMaterial(7,pxMaterial8);
		return(true);
	endproc;
	
	//Sets Terraincontroller to material paint mode
	proc bool PaintMaterial(int p_iNumber, ^CToggleButton p_pxButton)
		if(p_pxButton^.GetToggleButtonState())then
			CIconBar.Get().DisableEditButtons(true);
			CMainController.Get().ActivateMatPaint(p_iNumber);
			CClientWrap.GetDesktop()^.SetCursor(11);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		return(true);
	endproc;
	
	//Sets bitmaps for buttons
	export proc bool SetSetting(string p_sSetting)
		var ^CToggleButton pxMaterial1 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat1Button"));
		var ^CToggleButton pxMaterial2 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat2Button"));
		var ^CToggleButton pxMaterial3 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat3Button"));
		var ^CToggleButton pxMaterial4 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat4Button"));
		var ^CToggleButton pxMaterial5 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat5Button"));
		var ^CToggleButton pxMaterial6 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat6Button"));
		var ^CToggleButton pxMaterial7 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat7Button"));
		var ^CToggleButton pxMaterial8 = cast<CToggleButton>(GetControl("MaterialsGroupBox/Mat8Button"));

		m_sSetting=p_sSetting;

		
		pxMaterial1^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt00.tga");
		pxMaterial2^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt01.tga");
		pxMaterial3^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt02.tga");
		pxMaterial4^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt03.tga");
		pxMaterial5^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt04.tga");
		pxMaterial6^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt05.tga");
		pxMaterial7^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt06.tga");
		pxMaterial8^.SetBitmap( CClientWrap.GetUrsRelPath()+"/data/base/texture/ui/data/textureButtons/"+m_sSetting+"/mattxt07.tga");
		
		
		return(true);
	endproc;
	
	//Scape editing procs
	
	//Altitude button
	export proc bool OnAltitude()
		var ^CToggleButton 	pxAltitude	= cast<CToggleButton>(GetControl("EditGroupBox/AltitudeButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(0);
		
		DisableAbsoluteSettings();
		
		//Set cursor to altitude mode
		CClientWrap.GetDesktop()^.SetCursor(2);

		if(pxAltitude^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainAltitude();
			CMainController.Get().SetToggleButton(pxAltitude);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;

		return(true);
	endproc;
	
	export proc bool OnRoughen()
		var ^CToggleButton 	pxRoughen	= cast<CToggleButton>(GetControl("EditGroupBox/RoughenButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(3);
		DisableAbsoluteSettings();
				
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		if(pxRoughen^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainNoise();
			CMainController.Get().SetToggleButton(pxRoughen);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		return(true);
	endproc;
	
	export proc bool OnLevel()
		var ^CToggleButton 	pxLevel	= cast<CToggleButton>(GetControl("EditGroupBox/LevelButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(1);
		DisableAbsoluteSettings();
		
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		if(pxLevel^.GetToggleButtonState())then
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().ActivateBlockCtrl();
			CMainController.Get().GetBlockCtrl().SetState(2);
			CMainController.Get().SetToggleButton(pxLevel);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().GetBlockCtrl().Deactivate();
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		
		return(true);
	endproc;
	
	export proc bool ScaleBlockUpMinimum();
		ScaleBlock(true,true);
		return(true);
	endproc;
	
	export proc bool ScaleBlockDownMinimum();
		ScaleBlock(false,true);
		return(true);
	endproc;
	
	export proc bool ScaleBlockUpMaximum();
		ScaleBlock(true,false);
		return(true);
	endproc;
	
	export proc bool ScaleBlockDownMaximum();
		ScaleBlock(false,false);
		return(true);
	endproc;
	
	export proc bool ScaleBlock(bool p_bUp, bool p_bMinimum);
		if(GetSelectionValid())then
			var ^CBrush pxBrush= new CBrush();
			pxBrush^.SetForm(0b);
			pxBrush^.SetHeight(m_fLevelStep);
			m_pxHeightBrush^.SetBrushType(pxBrush^.GetForm());
			m_pxHeightBrush^.SetHeightValue(pxBrush^.GetHeight());
			m_pxHeightBrush^.SetFalloffWidth(0);
			m_pxHeightBrush^.SetFalloffType(0b);
			var real fTempX=(m_xRect.GetRight().ToReal()*32.0f)-(m_pxHeightBrush^.GetWidth().ToReal()*0.25);
			var real fTempY=(m_xRect.GetBottom().ToReal()*32.0f)-(m_pxHeightBrush^.GetHeight().ToReal()*0.25);
			CLevelEditorWrap.GetScapeMgr().FillHeightBrush(fTempX,fTempY,m_pxHeightBrush^);
			var real fBase;
			if(p_bMinimum)then
				fBase=m_pxHeightBrush^.GetMinimum();
			else
				fBase=m_pxHeightBrush^.GetMaximum();
			endif;
			if(p_bUp)then
				m_pxHeightBrush^.ScaleData(+0.95f,fBase);
			else
				m_pxHeightBrush^.ScaleData(+1.05f,fBase);
			endif;
			CLevelEditorWrap.GetScapeMgr().SetHeightBrush(0100b,fTempX,fTempY,m_pxHeightBrush^);
		endif;
		return(true);
	endproc;
	
	export proc bool LevelBlockUp()
		var ^CBlockController pxBlockCtrl=^(CMainController.Get().GetBlockCtrl());
		if(!pxBlockCtrl^.IsActive())then
			return true;
		endif;
		var rect xRect=pxBlockCtrl^.GetSelectedBlocks();
		var int iBlockY;
		for(iBlockY=xRect.GetTop())cond(iBlockY<xRect.GetBottom())iter(iBlockY++)do
			var int iBlockX;
			for(iBlockX=xRect.GetLeft())cond(iBlockX<xRect.GetRight())iter(iBlockX++)do
				CLevelEditorWrap.GetScapeMgr().RaiseBlock(iBlockX,iBlockY,m_fLevelStep);		
			endfor;
		endfor;
		
		var vec3 vPosMin;		
		vPosMin.SetX(xRect.GetLeft().ToReal()*32.0f);
		vPosMin.SetY(xRect.GetTop().ToReal()*32.0f);
		vPosMin.SetZ(0.0f);
		var vec3 vPosMax;
		vPosMax.SetX(xRect.GetRight().ToReal()*32.0f);
		vPosMax.SetY(xRect.GetBottom().ToReal()*32.0f);
		vPosMax.SetZ(1000.0f);	
		var CObjQueryCln xOQ;
		xOQ.RegionRect(vPosMin,vPosMax);
		var CObjList xObjects;
		xOQ.Execute(xObjects);
		var int i,iC=xObjects.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj=xObjects[i].GetObj();
			if(pxObj==null)then continue; endif;
			var vec3 vPos=pxObj^.GetPos();
			vPos.SetZ(vPos.GetZ()+m_fLevelStep);
			pxObj^.SetPos(vPos);
		endfor;
		return(true);
	endproc;
	
	export proc bool LevelBlockDown()
		var ^CBlockController pxBlockCtrl=^(CMainController.Get().GetBlockCtrl());
		if(!pxBlockCtrl^.IsActive())then
			return true;
		endif;
		var rect xRect=pxBlockCtrl^.GetSelectedBlocks();
		var int iBlockY;
		for(iBlockY=xRect.GetTop())cond(iBlockY<xRect.GetBottom())iter(iBlockY++)do
			var int iBlockX;
			for(iBlockX=xRect.GetLeft())cond(iBlockX<xRect.GetRight())iter(iBlockX++)do
				CLevelEditorWrap.GetScapeMgr().RaiseBlock(iBlockX,iBlockY,-m_fLevelStep);	
			endfor;
		endfor;
		
		var vec3 vPosMin;
		vPosMin.SetX(xRect.GetLeft().ToReal()*32.0f);
		vPosMin.SetY(xRect.GetTop().ToReal()*32.0f);
		vPosMin.SetZ(0.0f);
		var vec3 vPosMax;
		vPosMax.SetX(xRect.GetRight().ToReal()*32.0f);
		vPosMax.SetY(xRect.GetBottom().ToReal()*32.0f);
		vPosMax.SetZ(1000.0f);
			
		var CObjQueryCln xOQ;
		xOQ.RegionRect(vPosMin,vPosMax);
		var CObjList xObjects;
		xOQ.Execute(xObjects);
		var int i,iC=xObjects.NumEntries();		
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj=xObjects[i].GetObj();
			if(pxObj==null)then continue; endif;
			var vec3 vPos=pxObj^.GetPos();
			vPos.SetZ(vPos.GetZ()-m_fLevelStep);
			pxObj^.SetPos(vPos);
		endfor;		
		return(true);
	endproc;
	
	export proc void SetSelectionValid(bool p_bParam)
		m_bSelectionValid=p_bParam;
	endproc;
	
	export proc bool GetSelectionValid()
		return(m_bSelectionValid);
	endproc;
	
	export proc bool OnSmoothing()
		var ^CToggleButton 	pxSmoothing	= cast<CToggleButton>(GetControl("EditGroupBox/SmoothingButton"));
		CIconBar.Get().DisableEditButtons(true);
		CIconBar.Get().PushButton(2);
		DisableAbsoluteSettings();
		
		//Set cursor to smoothing mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		if(pxSmoothing^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainBlur();
			CMainController.Get().SetToggleButton(pxSmoothing);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		return(true);
	endproc;
	
	
	export proc bool OnDetail()
		var ^CToggleButton 	pxDetail	= cast<CToggleButton>(GetControl("EditGroupBox/DetailButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(4);
		DisableAbsoluteSettings();
		m_pxAbsoluteDetail^.SetDisabled(false);
		m_pxDetailSpinCtrl^.SetDisabled(false);
		
		//Set cursor to detail mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		if(pxDetail^.GetToggleButtonState())then
			if(m_bAbsoluteDetail)then
				CMainController.Get().ActivateTerrainDetailAbs();
				m_iAbsoluteDetail=m_pxDetailSpinCtrl^.GetValueInt();
				CMainController.Get().GetTerrainCtrl().SetDetailLevel(m_iAbsoluteDetail);
			else
				CMainController.Get().ActivateTerrainDetail();
				CMainController.Get().SetToggleButton(pxDetail);	
			endif;
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
			DisableAbsoluteSettings();
		endif;
		return(true);
	endproc;
	
	export proc bool OnPlateau()
		var ^CToggleButton 	pxPlateau	= cast<CToggleButton>(GetControl("EditGroupBox/PlateauButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(5);
		DisableAbsoluteSettings();
		m_pxPlateauSpinCtrl^.SetDisabled(false);
		
		//Set cursor to plateau mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		CMainController.Get().GetTerrainCtrl().SetPlateauHeight(m_fPlateauHeight);
		
		if(pxPlateau^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainPlateau();
			CMainController.Get().SetToggleButton(pxPlateau);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		
		return(true);
	endproc;
	
	export proc bool OnForest()
		var ^CToggleButton 	pxForest	= cast<CToggleButton>(GetControl("EditGroupBox/ForestButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(6);
		DisableAbsoluteSettings();
		
		//Set cursor to forest mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		
		if(pxForest^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainForest();
			CMainController.Get().SetToggleButton(pxForest);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		
		return(true);
	endproc;
	
	export proc bool OnFeature()
		var ^CToggleButton 	pxFeature=cast<CToggleButton>(GetControl("EditGroupBox/FeatureButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(8);
		DisableAbsoluteSettings();
		//Set cursor to ciff mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		if(pxFeature^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainFeature();
			CMainController.Get().SetToggleButton(pxFeature);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		return(true);
	endproc;
	
	export proc bool OnCliff()
		var ^CToggleButton 	pxCliff	= cast<CToggleButton>(GetControl("EditGroupBox/CliffButton"));
		CIconBar.Get().DisableEditButtons(true);
		PushMaterialButton(-1);
		CIconBar.Get().PushButton(7);
		DisableAbsoluteSettings();
		//Set cursor to ciff mode
		CClientWrap.GetDesktop()^.SetCursor(2);
		if(pxCliff^.GetToggleButtonState())then
			CMainController.Get().ActivateTerrainCliff();
			CMainController.Get().SetToggleButton(pxCliff);
		else
			CMainController.Get().GetTerrainCtrl().SetState(-1);
			CMainController.Get().SetState(0);
			CClientWrap.GetDesktop()^.SetStandardCursor();
		endif;
		return(true);
	endproc;
	
	proc bool OnAbsoluteDetail()
		if(m_bAbsoluteDetail)then
			m_bAbsoluteDetail=false;
			CMainController.Get().ActivateTerrainDetail();
		else
			m_bAbsoluteDetail=true;
			CMainController.Get().ActivateTerrainDetailAbs();
			CMainController.Get().GetTerrainCtrl().SetDetailLevel(m_iAbsoluteDetail);
		endif;
		CSettings.Set("Editor/Misc/AbsoluteDetail",m_bAbsoluteDetail.ToString());
		return(true);
	endproc;
	
	proc bool OnAbsoluteDetailSpinCtrl()
		m_iAbsoluteDetail=m_pxDetailSpinCtrl^.GetValueInt();
		CMainController.Get().GetTerrainCtrl().SetDetailLevel(m_iAbsoluteDetail);
		CSettings.Set("Editor/Misc/Detialgrade",m_iAbsoluteDetail);
		return(true);
	endproc;
	
	proc bool OnPlateauSpinCtrl()
		m_fPlateauHeight=m_pxPlateauSpinCtrl^.GetValueFloat();
		CMainController.Get().GetTerrainCtrl().SetPlateauHeight(m_fPlateauHeight);
		return(true);
	endproc;
	
	proc void DisableAbsoluteSettings()
		m_pxAbsoluteDetail^.SetDisabled(true);
		m_pxDetailSpinCtrl^.SetDisabled(true);
	endproc;
	
	export proc void SetPlateauHight(real p_fParam);
		m_pxPlateauSpinCtrl^.SetValue(p_fParam);
		CMainController.Get().GetTerrainCtrl().SetPlateauHeight(m_fPlateauHeight);
	endproc;
	
	export proc bool SetDetailAbs(int p_iDetailAbs)
		m_pxDetailSpinCtrl^.SetValue(p_iDetailAbs);
		return(true);
	endproc;
	
	export proc bool PushButton(int p_iButton)
		if(p_iButton==(-1))then
			var int i;
			for(i=0)cond(i<m_apxLandscapeButtons.NumEntries())iter(i++)do
				m_apxLandscapeButtons[i]^.SetToggleButtonState(false);
			endfor;
			return(true);
		endif;
		var int iButton =Math.Clamp(p_iButton,0,m_apxLandscapeButtons.NumEntries()-1);
		m_apxLandscapeButtons[p_iButton]^.SetToggleButtonState(true);

		if(p_iButton==4) then
			m_pxAbsoluteDetail^.SetDisabled(false);
			m_pxDetailSpinCtrl^.SetDisabled(false);
			//Hack??
			OnDetail();
		else
			m_pxAbsoluteDetail^.SetDisabled(true);
			m_pxDetailSpinCtrl^.SetDisabled(true);
		endif;
		
		return(true);
	endproc;
	
	export proc bool PushMaterialButton(int p_iButton)
		if(p_iButton==(-1))then
			var int i;
			for(i=0)cond(i<m_apxMaterialButtons.NumEntries())iter(i++)do
				m_apxMaterialButtons[i]^.SetToggleButtonState(false);
			endfor;
			return(true);
		endif;
		var int iButton =Math.Clamp(p_iButton,0,m_apxMaterialButtons.NumEntries()-1);
		m_apxMaterialButtons[p_iButton]^.SetToggleButtonState(true);
		return(true);
	endproc;
	
endclass;