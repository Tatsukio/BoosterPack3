class CViewBrushProperties inherit CEnhancedFrameWindow

	var ^CViewBrush m_pxViewBrush;
	var bitset m_dwStyleBrush, m_dwStyleFalloff;

	export constructor()
		if(!InitFromResource("scape/ViewBrushProperties","BrushesProps")) then
			CLevelEditorWrap.LogError("UI.ViewBrushProperties","InitFromResource failed");
			return;
		endif;
		//m_dwStyleBrush=0b;
		//m_dwStyleFalloff=0b;
		//form
		var ^CGroupBox pxName = cast <CGroupBox>(GetControl("GBox_Name"));
		pxName^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_GBox_Name"));
		var ^CGroupBox pxForm = cast <CGroupBox>(GetControl("GBox_Form"));
		pxForm^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_GBox_Form"));
		var ^CToggleButton pxBtnCircle = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		//pxBtnCircle^.SetBitmap("data/brush_circle.tga");
		pxBtnCircle^.m_xOnClick = OnClickCircle;
		var ^CToggleButton pxBtnRec = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		//pxBtnRec^.SetBitmap("data/brush_rect.tga");
		pxBtnRec^.SetToggleButtonState(true);				//default
		pxBtnRec^.m_xOnClick = OnClickRec;
		var ^CCheckBox pxCheckBSquare = cast<CCheckBox>(GetControl("GBox_Form/CheckB_Square"));
		pxCheckBSquare^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_CheckB_Square"));
		pxCheckBSquare^.m_xOnStateChange = OnCheckSquare;
		var ^CCheckBox pxtCheckBHSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));
		pxtCheckBHSafe^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_CheckB_HSafe"));
		pxtCheckBHSafe^.m_xOnStateChange = OnHSafe;

		//size
		var ^CGroupBox pxSize = cast <CGroupBox>(GetControl("GBox_Size"));
		pxSize^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_GBox_Size"));
		var ^CSpinCtrlNumber pxSpinScaleX = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		pxSpinScaleX^.m_xOnChange = OnChangeSizeSC_X;
		var ^CSpinCtrlNumber pxSpinScaleY = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		pxSpinScaleY^.m_xOnChange = OnChangeSizeSC_Y;
		var ^CSpinCtrlNumber pxSpinScaleH = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		pxSpinScaleH^.SetValue(30.0);
		pxSpinScaleH^.m_xOnChange = OnChangeSizeSC_H;
		var ^CSlider pxSliderScaleX = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		pxSliderScaleX^.m_xOnChange = OnChangeSizeSP_X;
		pxSliderScaleX^.SetSliderRange(100);
		var ^CSlider pxSliderScaleY = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		pxSliderScaleY^.m_xOnChange = OnChangeSizeSP_Y;
		pxSliderScaleY^.SetSliderRange(100);
		var ^CSlider pxSliderScaleH = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_H"));
		pxSliderScaleH^.m_xOnChange = OnChangeSizeSP_H;
		pxSliderScaleH^.SetSliderRange(1000);
		pxSliderScaleH^.SetSliderPos(300);

		//falloff
		var ^CGroupBox pxFalloff = cast <CGroupBox>(GetControl("GBox_Falloff"));
		pxFalloff^.SetText(CLocalizer.Get().Translate("_ViewBrushProperties_GBox_Falloff"));
		var ^CToggleButton pxBtnFalloff_Pillow = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Pillow"));
		//pxBtnFalloff_Pillow^.SetBitmap("data/brush_pillow.tga");
		pxBtnFalloff_Pillow^.SetToggleButtonState(true);
		pxBtnFalloff_Pillow^.m_xOnClick = OnClickPillow;
		var ^CToggleButton pxBtnFalloff_Linear = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Linear"));
		//pxBtnFalloff_Linear^.SetBitmap("data/brush_linear.tga");
		pxBtnFalloff_Linear^.m_xOnClick = OnClickLinear;
		var ^CToggleButton pxBtnFalloff_Spike = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Spike"));
		pxBtnFalloff_Spike^.m_xOnClick = OnClickSpike;
		//pxBtnFalloff_Spike^.SetBitmap("data/brush_spike.tga");
		var ^CSpinCtrlNumber pxSpinFalloff = cast<CSpinCtrlNumber>(GetControl("GBox_Falloff/Spin_Falloff"));
		pxSpinFalloff^.m_xOnChange = OnChangeFalloffSP;
		var ^CSlider pxSliderFalloff = cast<CSlider>(GetControl("GBox_Falloff/Sldr_Falloff"));
		pxSliderFalloff^.m_xOnChange = OnChangeFalloffSC;
		pxSliderFalloff^.SetSliderRange(100);

		//submit
		var ^CButton pxBtnSubmit = cast<CButton>(GetControl("Btn_Submit"));
		pxBtnSubmit^.SetText("Accept");
		pxBtnSubmit^.m_xOnClick = OnSubmitCheck;

	endconstructor;

	export proc bool SetParent(^CViewBrush p_pxViewBrush)
		m_pxViewBrush = p_pxViewBrush;
		return(true);
	endproc;

	export proc void SetBrush(^CBrush p_pxBrush);
		var ^CEdit pxEditName = cast<CEdit>(GetControl("GBox_Name/Edit_Name"));
		var ^CSpinCtrlNumber pxSpinScaleX = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSpinCtrlNumber pxSpinScaleY = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSlider pxSliderScaleX = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		var ^CSlider pxSliderScaleY = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		var ^CSpinCtrlNumber pxSpinFalloff = cast<CSpinCtrlNumber>(GetControl("GBox_Falloff/Spin_Falloff"));
		var ^CSlider pxSliderFalloff = cast<CSlider>(GetControl("GBox_Falloff/Sldr_Falloff"));
		var ^CToggleButton pxBtnRectmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		var ^CToggleButton pxBtnCircletmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		var ^CToggleButton pxtmp_Pillow = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Pillow"));
		var ^CToggleButton pxtmp_Linear = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Linear"));
		var ^CToggleButton pxtmp_Spike = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Spike"));
		var ^CSpinCtrlNumber pxtmp_Size_Height = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		var ^CCheckBox pxtmp_Square = cast<CCheckBox>(GetControl("GBox_Form/CheckB_Square"));
		var ^CCheckBox pxtmp_HSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));

		if(p_pxBrush^.GetSizeX()==p_pxBrush^.GetSizeY())then
			pxtmp_Square^.SetChecked(1);
		else
			pxtmp_Square^.SetChecked(0);
		endif;

		if(29.0<p_pxBrush^.GetHeight()/(Math.Min(p_pxBrush^.GetSizeX().ToReal(),p_pxBrush^.GetSizeY().ToReal())/5000.0)&&p_pxBrush^.GetHeight()/(Math.Min(p_pxBrush^.GetSizeX().ToReal(),p_pxBrush^.GetSizeY().ToReal())/5000.0)<31.0 )then
			pxtmp_HSafe^.SetChecked(1);
		else
			pxtmp_HSafe^.SetChecked(0);
		endif;

		pxEditName^.SetText(p_pxBrush^.GetName());
		pxSpinScaleX^.SetValue(p_pxBrush^.GetSizeX());
		pxSpinScaleY^.SetValue(p_pxBrush^.GetSizeY());
		pxSliderScaleX^.SetSliderPos(p_pxBrush^.GetSizeX());
		pxSliderScaleY^.SetSliderPos(p_pxBrush^.GetSizeY());
		pxSpinFalloff^.SetValue(p_pxBrush^.GetFalloff());
		pxtmp_Size_Height^.SetValue(p_pxBrush^.GetHeight()/(Math.Min(p_pxBrush^.GetSizeX().ToReal(),p_pxBrush^.GetSizeY().ToReal())/5000.0));

		var bitset dwForm, dwFalloffType;
		dwForm=p_pxBrush^.GetForm();
		if (dwForm==00b) then
			pxBtnCircletmp^.SetToggleButtonState(false);
			pxBtnRectmp^.SetToggleButtonState(true);
		elseif (dwForm==01b) then
			pxBtnCircletmp^.SetToggleButtonState(true);
			pxBtnRectmp^.SetToggleButtonState(false);
		else
			CLevelEditorWrap.LogError("UI.ViewBrushProperties","No dwForm="+dwForm.ToString());
		endif;
		dwFalloffType=p_pxBrush^.GetFalloffType();
		if (dwFalloffType==0b) then
			pxtmp_Pillow^.SetToggleButtonState(true);
			pxtmp_Linear^.SetToggleButtonState(false);
			pxtmp_Spike^.SetToggleButtonState(false);
		elseif (dwFalloffType==01b) then
			pxtmp_Pillow^.SetToggleButtonState(false);
			pxtmp_Linear^.SetToggleButtonState(true);
			pxtmp_Spike^.SetToggleButtonState(false);
		elseif (dwFalloffType==010b) then
			pxtmp_Pillow^.SetToggleButtonState(false);
			pxtmp_Linear^.SetToggleButtonState(false);
			pxtmp_Spike^.SetToggleButtonState(true);
		else
			CLevelEditorWrap.LogError("UI.ViewBrushProperties","No dwFalloffType -> "+dwFalloffType.ToString());
		endif;
		InvalidateWindow();
	endproc;

	//======= form ==========
	proc bool OnClickCircle()
		var ^CToggleButton pxBtnRectmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		var ^CToggleButton pxBtnCircletmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		pxBtnRectmp^.SetToggleButtonState(false);
		pxBtnCircletmp^.SetToggleButtonState(true);
		m_dwStyleBrush=01b;
		InvalidateWindow();
		return(true);
	endproc;

	proc bool OnClickRec()
		var ^CToggleButton pxBtnRectmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		var ^CToggleButton pxBtnCircletmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		pxBtnCircletmp^.SetToggleButtonState(false);
		pxBtnRectmp^.SetToggleButtonState(true);
		m_dwStyleBrush=00b;
		InvalidateWindow();
		return(true);
	endproc;

	proc bool OnCheckSquare()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		var ^CSpinCtrlNumber pxTmpC = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSlider pxTmpD = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		pxTmpC^.SetValue(pxTmpB^.GetSliderPos());
		return(true);
	endproc;

	proc bool OnHSafe()
		var ^CSpinCtrlNumber pxtmp_Size_Height = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		var ^CSlider pxtmpScaleH = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_H"));
		var ^CCheckBox pxtmp_HSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));
		if (pxtmp_HSafe^.GetChecked()==1) then
			pxtmp_Size_Height^.SetValue(30.0);
			pxtmpScaleH^.SetSliderPos(300);
		endif;
		return(true);
	endproc;


	//======= size ===========
	proc bool OnChangeSizeSP_X()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		var ^CSpinCtrlNumber pxTmpC = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSlider pxTmpD = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		var ^CCheckBox pxChecktmp = cast<CCheckBox>(GetControl("GBox_Form/CheckB_Square"));
		pxTmpA^.SetValue(pxTmpB^.GetSliderPos());
		if (pxChecktmp^.GetChecked()==1) then
			pxTmpC^.SetValue(pxTmpB^.GetSliderPos());
		endif;
		return(true);
	endproc;
	proc bool OnChangeSizeSP_Y()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		var ^CSpinCtrlNumber pxTmpC = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSlider pxTmpD = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		var ^CCheckBox pxChecktmp = cast<CCheckBox>(GetControl("GBox_Form/CheckB_Square"));
		pxTmpC^.SetValue(pxTmpD^.GetSliderPos());
		if (pxChecktmp^.GetChecked()==1) then
			pxTmpA^.SetValue(pxTmpD^.GetSliderPos());
		endif;
		return(true);
	endproc;
	proc bool OnChangeSizeSP_H()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		var ^CCheckBox pxtmp_HSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_H"));
		if (pxtmp_HSafe^.GetChecked()==1) then
			pxTmpA^.SetValue(30.0);
			pxTmpB^.SetSliderPos(300);
		else
			pxTmpA^.SetValue(pxTmpB^.GetSliderPos().ToReal()/10.0);
		endif;
		return(true);
	endproc;

	proc bool OnChangeSizeSC_X()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_X"));
		pxTmpB^.SetSliderPos(pxTmpA^.GetValueInt());
		return(true);
	endproc;
	proc bool OnChangeSizeSC_Y()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_Y"));
		pxTmpB^.SetSliderPos(pxTmpA^.GetValueInt());
		return(true);
	endproc;
	proc bool OnChangeSizeSC_H()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Size/Sldr_Scale_H"));
		var ^CCheckBox pxtmp_HSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));
		if (pxtmp_HSafe^.GetChecked()==1) then
			pxTmpB^.SetSliderPos(300);
			pxTmpA^.SetValue(30.0);
		else
			pxTmpB^.SetSliderPos((pxTmpA^.GetValueFloat()*10.0).ToInt());
		endif;
		return(true);
	endproc;

	//======= falloff ========
	proc bool OnChangeFalloffSC()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Falloff/Spin_Falloff"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Falloff/Sldr_Falloff"));
		pxTmpA^.SetValue(pxTmpB^.GetSliderPos());
		return(true);
	endproc;
	proc bool OnChangeFalloffSP()
		var ^CSpinCtrlNumber pxTmpA = cast<CSpinCtrlNumber>(GetControl("GBox_Falloff/Spin_Falloff"));
		var ^CSlider pxTmpB = cast<CSlider>(GetControl("GBox_Falloff/Sldr_Falloff"));
		pxTmpB^.SetSliderPos(pxTmpA^.GetValueInt());
		return(true);
	endproc;

	proc bool OnClickPillow()
		OnToggleFallOff(true,false,false);
		m_dwStyleFalloff=0b;
		return(true);
	endproc;
	proc bool OnClickLinear()
		OnToggleFallOff(false,true,false);
		m_dwStyleFalloff=01b;
		return(true);
	endproc;
	proc bool OnClickSpike()
		OnToggleFallOff(false,false,true);
		m_dwStyleFalloff=010b;
		return(true);
	endproc;

	proc bool OnToggleFallOff(bool p_bP, bool p_bL, bool p_bS);
		var ^CToggleButton pxtmp_Pillow = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Pillow"));
		var ^CToggleButton pxtmp_Linear = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Linear"));
		var ^CToggleButton pxtmp_Spike = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Spike"));
		pxtmp_Pillow^.SetToggleButtonState(p_bP);
		pxtmp_Linear^.SetToggleButtonState(p_bL);
		pxtmp_Spike^.SetToggleButtonState(p_bS);
		InvalidateWindow();
		return(true);
	endproc;

	//======= submit =========
	proc bool OnSubmitCheck()
		var ^CToggleButton pxBtnRectmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		var ^CToggleButton pxBtnCircletmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		var ^CToggleButton pxtmp_Pillow = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Pillow"));
		var ^CToggleButton pxtmp_Linear = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Linear"));
		var ^CToggleButton pxtmp_Spike = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Spike"));

		if (pxBtnRectmp^.GetToggleButtonState() || pxBtnCircletmp^.GetToggleButtonState()) then
			if (pxtmp_Pillow^.GetToggleButtonState() || pxtmp_Linear^.GetToggleButtonState() || pxtmp_Spike^.GetToggleButtonState()) then
				OnSubmit();
			else
				CMessageBox.MsgBox(CLocalizer.Get().Translate("_BrushProperties_Attention"), CLocalizer.Get().Translate("_BrushProperties_NoFallOff"));
			endif;
		else
			CMessageBox.MsgBox(CLocalizer.Get().Translate("_BrushProperties_Attention"), CLocalizer.Get().Translate("_BrushProperties_NoBrushTyp"));
		endif;
		return(true);
	endproc;

	proc bool OnSubmit()
		var ^CToggleButton pxBtnRectmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushRec"));
		var ^CToggleButton pxBtnCircletmp = cast<CToggleButton>(GetControl("GBox_Form/Btn_BrushCircle"));
		var ^CToggleButton pxtmp_Pillow = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Pillow"));
		var ^CToggleButton pxtmp_Linear = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Linear"));
		var ^CToggleButton pxtmp_Spike = cast<CToggleButton>(GetControl("GBox_Falloff/Btn_Falloff_Spike"));
		var ^CEdit pxEditName = cast<CEdit>(GetControl("GBox_Name/Edit_Name"));
		var ^CSpinCtrlNumber pxSpinScaleX = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_X"));
		var ^CSpinCtrlNumber pxSpinScaleY = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_Y"));
		var ^CSpinCtrlNumber pxSpinScaleH = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		var ^CSpinCtrlNumber pxSpinFalloff = cast<CSpinCtrlNumber>(GetControl("GBox_Falloff/Spin_Falloff"));
		//CBrush constructor has only 1 parameter left, the name, others are specified separate...
		var ^CBrush pxTmp = new CBrush( pxEditName^.GetText());
		var ^CCheckBox pxtmp_HSafe = cast<CCheckBox>(GetControl("GBox_Form/CheckB_HSafe"));

		if(pxtmp_Pillow^.GetToggleButtonState())then
			m_dwStyleFalloff=00b;
		elseif(pxtmp_Linear^.GetToggleButtonState())then
			m_dwStyleFalloff=01b;
		elseif(pxtmp_Spike^.GetToggleButtonState())then
			m_dwStyleFalloff=010b;
		endif;
		pxTmp^.SetFalloffType(m_dwStyleFalloff);
		pxTmp^.SetFalloff(pxSpinFalloff^.GetValueInt());
		if(pxBtnRectmp^.GetToggleButtonState())then
			m_dwStyleBrush=00b;
		elseif(pxBtnCircletmp^.GetToggleButtonState())then
			m_dwStyleBrush=01b;
		endif;
		pxTmp^.SetForm(m_dwStyleBrush);
		pxTmp^.SetSizeX(pxSpinScaleX^.GetValueInt());
		pxTmp^.SetSizeY(pxSpinScaleY^.GetValueInt());
		//
		if (pxtmp_HSafe^.GetCheckMark()) then
			pxTmp^.SetHeight(30.0*Math.Min(pxSpinScaleX^.GetValueInt().ToReal(),pxSpinScaleY^.GetValueInt().ToReal())/5000.0);
		else
			pxTmp^.SetHeight(pxSpinScaleH^.GetValueFloat()*Math.Min(pxSpinScaleX^.GetValueInt().ToReal(),pxSpinScaleY^.GetValueInt().ToReal())/5000.0);
		endif;
		CIconBar.Get().OnChange();
		if(m_pxViewBrush^.AddBrush(pxTmp))then
			//Windows.DbgPrint("Brush added");
			SetVisible(false);
		endif;
		m_pxViewBrush^.SaveAllBrushesNow();
		//CWindowMgr.Get().ReleaseModal(this);
		return(true);
	endproc;

	export proc int GetBrushIntensity()
		var ^CSpinCtrlNumber pxSpinScaleH = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		return((pxSpinScaleH^.GetValueFloat()+0.5f).ToInt());
	endproc;
	
	export proc void SetBrushIntensity(int p_iParam)
		var ^CSpinCtrlNumber pxSpinScaleH = cast<CSpinCtrlNumber>(GetControl("GBox_Size/Spin_Scale_H"));
		pxSpinScaleH^.SetValue(p_iParam);
		if(GetVisible())then
			OnSubmit();
			SetVisible(true);
		else
			OnSubmit();
		endif;
		return();
	endproc;

	export proc bool OnClose()
		//CWindowMgr.Get().ReleaseModal(this);
		SetVisible(false);
		return(true);
	endproc;

endclass;