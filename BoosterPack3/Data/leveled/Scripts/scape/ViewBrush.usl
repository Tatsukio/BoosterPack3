class CViewBrush inherit CEnhancedFrameWindow

	var ^CDropList 				m_pxBrushes;
	var ^CViewBrushProperties 	m_pxBrushProperties;
	var ^CBrush 				m_pxEmptyBrush;
	var array ^CBrush 			m_apxBrushes;
	var array ^CBrush 			m_apxQuickBrushes;
	var array ^CBrush 			m_apxDelList;
	var ^CDesktop 				m_pxDesktop;
	var int 					m_iIndex;

	export constructor()
		m_pxDesktop=CClientWrap.GetDesktop();
		if(!InitFromResource("scape/ViewBrush","Brushes")) then
			CLevelEditorWrap.LogError("UI.ViewBrush","InitFromResource failed");
			return;
		endif;

		//Set shortcuts for accessing quickbrushes
		SetCmd("GetQuickBrush1", GetQuickBrush1);
		SetCmd("GetQuickBrush2", GetQuickBrush2);
		SetCmd("GetQuickBrush3", GetQuickBrush3);
		SetCmd("GetQuickBrush4", GetQuickBrush4);
		SetCmd("GetQuickBrush5", GetQuickBrush5);
		SetCmd("GetQuickBrush6", GetQuickBrush6);
		SetCmd("GetQuickBrush7", GetQuickBrush7);
		SetCmd("GetQuickBrush8", GetQuickBrush8);

		//Set shortcuts for setting quickbrushes
		SetCmd("SetQuickBrush1", SetQuickBrush1);
		SetCmd("SetQuickBrush2", SetQuickBrush2);
		SetCmd("SetQuickBrush3", SetQuickBrush3);
		SetCmd("SetQuickBrush4", SetQuickBrush4);
		SetCmd("SetQuickBrush5", SetQuickBrush5);
		SetCmd("SetQuickBrush6", SetQuickBrush6);
		SetCmd("SetQuickBrush7", SetQuickBrush7);
		SetCmd("SetQuickBrush8", SetQuickBrush8);

		var 		int 	i;
		var array string 	asBrushes;

		var ^CButton pxAddButton = cast<CButton>(GetControl("AddButton"));
		pxAddButton^.m_xOnClick = ShowPropWindow;
		pxAddButton^.SetText(CLocalizer.Get().Translate("_ViewBrush_AddButton"));

		var ^CButton pxDelButton = cast<CButton>(GetControl("DelButton"));
		pxDelButton^.m_xOnClick = DeleteBrush;
		pxDelButton^.SetText(CLocalizer.Get().Translate("_ViewBrush_DelButton"));

		m_pxBrushes = cast<CDropList>(GetControl("DList_Brushes"));

		//If no quickbrushes are found, create empty brushes
		if(CSettings.NumSubs("Editor/QuickBrushes/Height")==0)then
			CLevelEditorWrap.LogInfo("UI.ViewBrush","Creating Empty Quickbrushes");
			var int i;
			for(i=0)cond(i<8)iter(i++)do
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/Name","Empty");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/Falloff","0");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/SizeX","0");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/SizeY","0");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/Form","0");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/Height","0.0");
				CSettings.Set("Editor/QuickBrushes/Height/Heightbrush"+i.ToString()+"/FalloffType","0");
			endfor;
			CSettings.Save();
		endif;

		var array ^CToggleButton apxToggleButtonArray;
		apxToggleButtonArray=8;
		for(i=0)cond(i<8)iter(i++)do
			apxToggleButtonArray[i]=cast<CToggleButton>(GetControl("Brush"+(1+i).ToString()));
		endfor;

		//Get control over quickbar buttons
		apxToggleButtonArray[0]^.m_xOnClick = GetQuickBrush1;
		apxToggleButtonArray[0]^.SetGrouped(true);
		apxToggleButtonArray[0]^.SetDisabled(true);
		apxToggleButtonArray[1]^.m_xOnClick = GetQuickBrush2;
		apxToggleButtonArray[1]^.SetGrouped(true);
		apxToggleButtonArray[1]^.SetDisabled(true);
		apxToggleButtonArray[2]^.m_xOnClick = GetQuickBrush3;
		apxToggleButtonArray[2]^.SetGrouped(true);
		apxToggleButtonArray[2]^.SetDisabled(true);
		apxToggleButtonArray[3]^.m_xOnClick = GetQuickBrush4;
		apxToggleButtonArray[3]^.SetGrouped(true);
		apxToggleButtonArray[3]^.SetDisabled(true);
		apxToggleButtonArray[4]^.m_xOnClick = GetQuickBrush5;
		apxToggleButtonArray[4]^.SetGrouped(true);
		apxToggleButtonArray[4]^.SetDisabled(true);
		apxToggleButtonArray[5]^.m_xOnClick = GetQuickBrush6;
		apxToggleButtonArray[5]^.SetGrouped(true);
		apxToggleButtonArray[5]^.SetDisabled(true);
		apxToggleButtonArray[6]^.m_xOnClick = GetQuickBrush7;
		apxToggleButtonArray[6]^.SetGrouped(true);
		apxToggleButtonArray[6]^.SetDisabled(true);
		apxToggleButtonArray[7]^.m_xOnClick = GetQuickBrush8;
		apxToggleButtonArray[7]^.SetGrouped(true);
		apxToggleButtonArray[7]^.SetDisabled(true);

		//CKeyHandler.Get().AddWindowKT(apxToggleButtonArray[7],"GetQuickBrush8,Get Quick Brush8");
		//CKeyHandler.Get().AddWindowKT(apxToggleButtonArray[7],"SetQuickBrush8,Set Quick Brush8");

		// read quickbrushes from config database ////////////////////////////////////////////////////////////////
		CBrush.ms_sCfgPath = "Editor/QuickBrushes/Height";
		var int iNumBrushes = CSettings.NumSubs(CBrush.ms_sCfgPath);

		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			var string sBrushKeyName = CSettings.GetSubName(CBrush.ms_sCfgPath,i);
			var ^CBrush pxBrush = new CBrush(""); // brush dummy to be filled
			m_apxDelList.AddEntry(pxBrush);
			if (! pxBrush^.ReadFromCfg(sBrushKeyName)) then // try to fill the brush dummy
				delete pxBrush;	// read failed -> delete dummy
				continue;
			endif;
			m_apxQuickBrushes.AddEntry(pxBrush);
		endfor;

		//Set button text
		for(i=0)cond(i<8)iter(i++)do
			if(m_apxQuickBrushes.NumEntries()!=0)then
				if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-(8-i)]^.GetName()!="Empty")then
					apxToggleButtonArray[i]^.SetText((i+1).ToString());
					apxToggleButtonArray[i]^.SetDisabled(false);
				endif;
			endif;	
		endfor;
								
		// the path where the height brushes are saved: a static member of CBrush. must be 					// initialized here
		CBrush.ms_sCfgPath = "Editor/Brushes/Height";

		// read brushes from config database
		iNumBrushes = CSettings.NumSubs(CBrush.ms_sCfgPath);
		//Windows.DbgPrint("NumSubs von CSettings: "+iNumBrushes.ToString());
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			var string sBrushKeyName = CSettings.GetSubName(CBrush.ms_sCfgPath,i);
			var ^CBrush pxBrush = new CBrush(""); // brush dummy to be filled
			if (! pxBrush^.ReadFromCfg(sBrushKeyName)) then // try to fill the brush dummy
				delete pxBrush;	// read failed -> delete dummy
				continue;
			endif;
			m_apxBrushes.AddEntry(pxBrush);
			m_pxBrushes^.AddItem(pxBrush^.GetName());
		endfor;
		/////////////////////////////////////////////////////////////////////////////////////////////////////

		// if no brushes are found, create a default brush
		if (iNumBrushes == 0) then
			var ^CBrush pxDefaultBrush1 = new CBrush("Default Q 10x10",1,0b,0b,0.1f,10,10);
			var ^CBrush pxDefaultBrush2 = new CBrush("Default Q 20x20",1,0b,0b,0.1f,20,20);
			var ^CBrush pxDefaultBrush3 = new CBrush("Default Q 30x30",1,0b,0b,0.1f,30,30);
			var ^CBrush pxDefaultBrush4 = new CBrush("Default C 50x50",1,0b,01b,0.1f,50,50);
			AddBrush(pxDefaultBrush1);
			AddBrush(pxDefaultBrush2);
			AddBrush(pxDefaultBrush3);
			AddBrush(pxDefaultBrush4);
		endif;

		m_pxBrushProperties = new CViewBrushProperties();
		//CEnhancedMenu.Get().AddWindowToHide(m_pxBrushProperties);
    	m_pxDesktop^.AddChild(m_pxBrushProperties);
    	m_pxBrushProperties^.SetVisible(false);

		m_pxEmptyBrush=new CBrush("Empty");
		m_pxBrushProperties^.SetParent(this);

		LoadPosition("Brushes");
		m_pxBrushes^.m_xOnChange = OnChange;
		//CIconBar.Get().Hack();
		CSettings.Save();
	endconstructor;

	export destructor()
		var int i, iC = m_apxBrushes.NumEntries(); // number of the current brushes
		for(i = 0)cond(i < iC)iter(i++)do
			delete m_apxBrushes[i]; // delete the brush
		endfor;
		iC=m_apxDelList.NumEntries();
		for(i = 0)cond(i < iC)iter(i++)do
			delete m_apxDelList[i]; // delete the brush
		endfor;
		delete m_pxEmptyBrush;
		delete m_pxBrushProperties;
		
		SaveOnDestruct();
    enddestructor;

    proc bool SaveOnDestruct()
		CSettings.Set("Editor/Windows/"+m_sName+"/SelectedBrush",m_pxBrushes^.GetSelectedItem());
		return(true);
	endproc;

    proc bool LoadPosition(string p_sString);
    	super.LoadPosition(p_sString);
		CSettings.Get("Editor/Windows/"+m_sName+"/SelectedBrush",m_iIndex);
		//damit alle da sind, noch ändern
		//m_pxBrushes^.Select(m_iIndex);
		m_pxBrushes^.Select(0);
		return(true);
	endproc;

    proc bool ShowPropWindow()
		if (m_pxBrushProperties^.GetVisible()!=true) then
			CWindowMgr.Get().BringWindowToTop(m_pxBrushProperties,true);
			m_pxBrushProperties^.SetVisible(true);
			CEnhancedMenu.Get().AddWindowToHide(m_pxBrushProperties);
		else
			m_pxBrushProperties^.SetVisible(false);
		endif;
		//CWindowMgr.Get().SetModal(m_pxPropWindow);
		return(true);
	endproc;

	export proc bool DeleteBrush ()
		var int i, iNumBrushes = m_apxBrushes.NumEntries();
		//Check quickbrushes
		var array ^CToggleButton apxToggleButtonArray;
		apxToggleButtonArray=8;
		for(i=0)cond(i<8)iter(i++)do
			apxToggleButtonArray[i]=cast<CToggleButton>(GetControl("Brush"+(1+i).ToString()));
		endfor;	

		for(i = 0)cond(i<m_apxQuickBrushes.NumEntries())iter(i++)do
			if(m_apxQuickBrushes[i]^.GetName()==m_pxBrushes^.GetText())then
				m_apxQuickBrushes[i]=m_pxEmptyBrush;
				apxToggleButtonArray[i]^.SetToggleButtonState(false);
				apxToggleButtonArray[i]^.SetDisabled(true);
				apxToggleButtonArray[i]^.SetText(" ");
			endif;
		endfor;

		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			//Quite a hack actually...
			if((m_apxBrushes[i]^.GetName()==m_pxBrushes^.GetText()))then
				if(m_pxBrushes^.GetText()!="Default Q 10x10")then
					m_pxBrushes^.DeleteItem(i);
					CIconBar.Get().DeleteBrush(i);
					m_apxBrushes.DeleteEntry(i);
					iNumBrushes--;
					SaveAllBrushesNow();
				else
					CMessageBox.MsgBox("Schlachti is very sorry, but...","The default brush cannot be deleted.");
				endif;
			endif;
		endfor;
		m_pxBrushes^.Select(0);
		return(true);
	endproc;
	
	export proc void SelectBrush(int p_iIndex);
		if(p_iIndex!=(-1)&&m_pxBrushes^.NumItems()>0)then
			m_pxBrushes^.Select(p_iIndex);
		endif;
		return();
	endproc;
	
	export proc ref ^CBrush GetSelectedBrush()
		return(m_apxBrushes[m_pxBrushes^.GetSelectedItem()]);
	endproc;
	
	export proc int GetSelectedBrushIndex()
		return(m_pxBrushes^.GetSelectedItem());
	endproc;
	
	export proc int GetBrushIntensity()
		return(m_pxBrushProperties^.GetBrushIntensity());
	endproc;
	
	export proc void SetBrushIntensity(int p_iParam)
		m_pxBrushProperties^.SetBrushIntensity(p_iParam);
		return();
	endproc;
	
	
	
	export proc bool AddBrush( ^CBrush p_pxBrush )
		var int i, iNumBrushes = m_apxBrushes.NumEntries();
		var bool bFlag = true;
		//Hack
		if(p_pxBrush^.GetName()=="Unnamed")then
			return(false);
		endif;
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			if(m_apxBrushes[i]^.GetName()==p_pxBrush^.GetName())then
				bFlag = false;
			endif;
		endfor;

		//Now all the current brushes are saved in the destructor
		if(bFlag)then
			p_pxBrush^.WriteToCfg("HeightBrush"+m_apxBrushes.NumEntries().ToString());
			m_apxBrushes.AddEntry(p_pxBrush);
			var int iTmp=m_pxBrushes^.AddItem(p_pxBrush^.GetName());
			m_pxBrushes^.Select(iTmp);
			CIconBar.Get().AddBrush(p_pxBrush^.GetName());
			SaveAllBrushesNow();
			return(true);
		else
			//CMessageBox.MsgBox(CLocalizer.Get().Translate("_Brush_Attention2"), CLocalizer.Get().Translate("_Brush_Overwrite"));
			for(i = 0)cond(i < iNumBrushes)iter(i++)do
				if(m_apxBrushes[i]^.GetName()==p_pxBrush^.GetName())then
					m_apxBrushes[i] = p_pxBrush;
					CMainController.Get().GetTerrainCtrl().SetBrush(p_pxBrush^);
					SaveAllBrushesNow();
					m_pxBrushProperties^.SetVisible(false);
				endif;
			endfor;
		endif;

		return(true);
	endproc;

	export proc bool SaveAllBrushesNow()
		CBrush.ms_sCfgPath = "Editor/Brushes/Height";
		CSettings.RemAllSubs(CBrush.ms_sCfgPath); // remove all the old brushes (easier than comparing ;-))
		var int i, iNumBrushes = m_apxBrushes.NumEntries(); // number of the current brushes
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			m_apxBrushes[i]^.WriteToCfg("HeightBrush"+i.ToString()); // save the brush
			//Windows.DbgPrint("ERROR: WriteToCfg"+i.ToString());
		endfor;

		CLevelEditorWrap.LogInfo("UI.ViewBrush","SAVE ---> Brushes");
		CBrush.ms_sCfgPath = "Editor/QuickBrushes/Height";
		CSettings.RemAllSubs(CBrush.ms_sCfgPath); // remove all the old brushes (easier than comparing ;-))
		iNumBrushes = m_apxQuickBrushes.NumEntries(); // number of the current brushes
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			m_apxQuickBrushes[i]^.WriteToCfg("HeightBrush"+i.ToString()); // save the brush
		endfor;
		return(true);
	endproc;

	//Gets the tätsächlichen, eigentlichen, wirklichen brush, not the current
	export proc ^CBrush GetActualHeightBrush()
		var ^CDropList pxDrtmp = cast<CDropList>(GetControl("DList_Brushes"));
		//for safety
		if(pxDrtmp^.GetSelectedItem()==(-1))then
			pxDrtmp^.Select(0);
		endif;
		return(m_apxBrushes[pxDrtmp^.GetSelectedItem()]);
	endproc;

	proc bool OnChange()
		if(m_pxBrushes^.GetSelectedItem()!=(-1))then
			CMainController.Get().GetTerrainCtrl().SetBrush(m_apxBrushes[m_pxBrushes^.GetSelectedItem()]^);
			m_pxBrushProperties^.SetBrush(GetActualHeightBrush());

			var int i;
			var array ^CToggleButton apxToggleButtonArray;
			apxToggleButtonArray=8;
			for(i=0)cond(i<8)iter(i++)do
				apxToggleButtonArray[i]=cast<CToggleButton>(GetControl("Brush"+(1+i).ToString()));
				apxToggleButtonArray[i]^.SetToggleButtonState(false);
			endfor;
			//check if current brush ist on quickbar and toggle buttons
			for(i=0)cond(i<8)iter(i++)do
				if(i<m_apxQuickBrushes.NumEntries())then
					if(GetActualHeightBrush()^.GetName()==m_apxQuickBrushes[i]^.GetName())then
						apxToggleButtonArray[i]^.SetToggleButtonState(true);
					endif;
				endif;
			endfor;
			CIconBar.Get().SelectBrush(m_pxBrushes^.GetSelectedItem());
		endif;

		CWindowMgr.Get().BringWindowToTop(this,true);
		
		return(true);
	endproc;

	export proc bool OnClose()
		CBrush.ms_sCfgPath = "Editor/Brushes/Height";
		CSettings.RemAllSubs(CBrush.ms_sCfgPath);
		var int i, iNumBrushes = m_apxBrushes.NumEntries(); // number of the current brushes
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			m_apxBrushes[i]^.WriteToCfg("HeightBrush"+i.ToString()); // save the brush
		endfor;

		//save quickbrushes
		CBrush.ms_sCfgPath = "Editor/QuickBrushes/Height";
		CSettings.RemAllSubs(CBrush.ms_sCfgPath); // remove all the old brushes (easier than comparing ;-))
		iNumBrushes = m_apxQuickBrushes.NumEntries(); // number of the current brushes
		for(i = 0)cond(i < iNumBrushes)iter(i++)do
			m_apxQuickBrushes[i]^.WriteToCfg("HeightBrush"+i.ToString()); // save the brush
		endfor;

		m_pxBrushProperties^.SetVisible(false);
		super.OnClose();
		return(true);
	endproc;

	//calls GetQuickBrush for quickbrush 1
	proc bool GetQuickBrush1()
		if((m_apxQuickBrushes.NumEntries()-8)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-8]^.GetName()!="Empty")then
			var ^CToggleButton pxB1Button = cast<CToggleButton>(GetControl("Brush1"));
			pxB1Button^.SetToggleButtonState(true);
			GetQuickBrush(1);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-8]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 2
	proc bool GetQuickBrush2()
		if((m_apxQuickBrushes.NumEntries()-7)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-7]^.GetName()!="Empty")then
			var ^CToggleButton pxB2Button = cast<CToggleButton>(GetControl("Brush2"));
			pxB2Button^.SetToggleButtonState(true);
			GetQuickBrush(2);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-7]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 3
	proc bool GetQuickBrush3()
		if((m_apxQuickBrushes.NumEntries()-6)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-6]^.GetName()!="Empty")then
			var ^CToggleButton pxB3Button = cast<CToggleButton>(GetControl("Brush3"));
			pxB3Button^.SetToggleButtonState(true);
			GetQuickBrush(3);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-6]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 4
	proc bool GetQuickBrush4()
		if((m_apxQuickBrushes.NumEntries()-5)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-5]^.GetName()!="Empty")then
			var ^CToggleButton pxB4Button = cast<CToggleButton>(GetControl("Brush4"));
			pxB4Button^.SetToggleButtonState(true);
			GetQuickBrush(4);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-5]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 5
	proc bool GetQuickBrush5()
		if((m_apxQuickBrushes.NumEntries()-4)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-4]^.GetName()!="Empty")then
			var ^CToggleButton pxB5Button = cast<CToggleButton>(GetControl("Brush5"));
			pxB5Button^.SetToggleButtonState(true);
			GetQuickBrush(5);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-4]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 6
	proc bool GetQuickBrush6()
		if((m_apxQuickBrushes.NumEntries()-3)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-3]^.GetName()!="Empty")then
			var ^CToggleButton pxB6Button = cast<CToggleButton>(GetControl("Brush6"));
			pxB6Button^.SetToggleButtonState(true);
			GetQuickBrush(6);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-3]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 7
	proc bool GetQuickBrush7()
		if((m_apxQuickBrushes.NumEntries()-2)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-2]^.GetName()!="Empty")then
			var ^CToggleButton pxB7Button = cast<CToggleButton>(GetControl("Brush7"));
			pxB7Button^.SetToggleButtonState(true);
			GetQuickBrush(7);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-2]^.GetName());
		endif;
		return(true);
	endproc;
	//calls GetQuickBrush for quickbrush 8
	proc bool GetQuickBrush8()
		if((m_apxQuickBrushes.NumEntries()-1)<0)then return(false);endif;
		if(m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-1]^.GetName()!="Empty")then
			var ^CToggleButton pxB8Button = cast<CToggleButton>(GetControl("Brush8"));
			pxB8Button^.SetToggleButtonState(true);
			GetQuickBrush(8);
		else
			//Windows.DbgPrint("ERROR: "+m_apxQuickBrushes[m_apxQuickBrushes.NumEntries()-1]^.GetName());
		endif;
		return(true);
	endproc;

	proc bool GetQuickBrush(int p_iQuickBrushNumber)

		//Windows.DbgPrint("GOOD: Getting Quickbrush "+p_iQuickBrushNumber.ToString());

		var ^CDropList pxDrtmp = cast<CDropList>(GetControl("DList_Brushes"));
		CMainController.Get().GetTerrainCtrl().SetBrush(m_apxQuickBrushes[p_iQuickBrushNumber-1]^);
		m_pxBrushProperties^.SetBrush(m_apxQuickBrushes[p_iQuickBrushNumber-1]);

		var string sTmp=m_apxQuickBrushes[p_iQuickBrushNumber-1]^.GetName();
		var int iTmp=pxDrtmp^.FindItem(sTmp);
		pxDrtmp^.Select(iTmp);

		return(true);
	endproc;

	//Setting quickbrushes

	//calls SetQuickBrush for quickbrush 1
	proc bool SetQuickBrush1()
		var ^CToggleButton pxB1Button = cast<CToggleButton>(GetControl("Brush1"));
		SetQuickBrush(1);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 2
	proc bool SetQuickBrush2()
		var ^CToggleButton pxB2Button = cast<CToggleButton>(GetControl("Brush2"));
		SetQuickBrush(2);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 3
	proc bool SetQuickBrush3()
		var ^CToggleButton pxB3Button = cast<CToggleButton>(GetControl("Brush3"));
		SetQuickBrush(3);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 4
	proc bool SetQuickBrush4()
		var ^CToggleButton pxB4Button = cast<CToggleButton>(GetControl("Brush4"));
		SetQuickBrush(4);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 5
	proc bool SetQuickBrush5()
		var ^CToggleButton pxB5Button = cast<CToggleButton>(GetControl("Brush5"));
		SetQuickBrush(5);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 6
	proc bool SetQuickBrush6()
		var ^CToggleButton pxB6Button = cast<CToggleButton>(GetControl("Brush6"));
		SetQuickBrush(6);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 7
	proc bool SetQuickBrush7()
		var ^CToggleButton pxB7Button = cast<CToggleButton>(GetControl("Brush7"));
		SetQuickBrush(7);
		return(true);
	endproc;
	//calls SetQuickBrush for quickbrush 8
	proc bool SetQuickBrush8()
		var ^CToggleButton pxB8Button = cast<CToggleButton>(GetControl("Brush8"));
		SetQuickBrush(8);
		return(true);
	endproc;

	//sets the quickbrush
	proc bool SetQuickBrush(int p_iQuickBrushNumber)
		var int i;
		var array ^CToggleButton apxToggleButtonArray;
		apxToggleButtonArray=8;
		for(i=0)cond(i<8)iter(i++)do
			apxToggleButtonArray[i]=cast<CToggleButton>(GetControl("Brush"+(1+i).ToString()));
		endfor;
		p_iQuickBrushNumber-=1;
		for(i=0)cond(i<m_apxQuickBrushes.NumEntries())iter(i++)do
			if(m_apxQuickBrushes[i]^.GetName()==GetActualHeightBrush()^.GetName())then
				//Windows.DbgPrint("INFO: Deleteing Doubles at "+i.ToString());
				m_apxQuickBrushes[i]=m_pxEmptyBrush;
				apxToggleButtonArray[i]^.SetToggleButtonState(false);
				apxToggleButtonArray[i]^.SetDisabled(true);
				apxToggleButtonArray[i]^.SetText(" ");
			endif;
		endfor;
		m_apxQuickBrushes[p_iQuickBrushNumber]=GetActualHeightBrush();
		apxToggleButtonArray[p_iQuickBrushNumber]^.SetToggleButtonState(true);
		apxToggleButtonArray[p_iQuickBrushNumber]^.SetDisabled(false);
		apxToggleButtonArray[p_iQuickBrushNumber]^.SetText("B"+(p_iQuickBrushNumber+1).ToString());

		SaveAllBrushesNow();
		return(true);
	endproc;

endclass;
