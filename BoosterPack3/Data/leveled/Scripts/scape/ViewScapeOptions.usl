class CViewScapeOptions inherit CWindow

	export constructor()

		if(!InitFromResource("scape/ViewScapeOptions","TimeEdit")) then
			CLevelEditorWrap.LogError("UI.ViewScapeOptions","InitFromResource failed");
			return;
		endif;

		//Initalize ScapeOptions on first start
		if(CSettings.NumSubs("Editor/ScapeOptions")==0)then
			CSettings.Set("Editor/ScapeOptions/WaterDraw","true");
			CSettings.Set("Editor/ScapeOptions/WaterAlpha",127);
			CSettings.Set("Editor/ScapeOptions/GrassDraw","true");
			CSettings.Set("Editor/ScapeOptions/Light","true");
			CSettings.Set("Editor/ScapeOptions/Time",12);
			CSettings.Set("Editor/ScapeOptions/FOWDraw","false");
			CSettings.Set("Editor/ScapeOptions/FOWOwner",0);
			CSettings.Set("Editor/ScapeOptions/ClearScreen","false");
			CSettings.Set("Editor/ScapeOptions/RenderFlatshades","false");
			CSettings.Set("Editor/ScapeOptions/UnderWaterFog","true");
			CSettings.Set("Editor/ScapeOptions/RenderForest","true");
		endif;

		//Light
		var ^CCheckBox pxEnableLight = cast<CCheckBox>(GetControl("CBox_Light"));
		var ^CSpinCtrlNumber pxSpCNHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		pxEnableLight^.SetText("Switch Light");
		//CKeyHandler.Get().AddWindowKT(pxEnableLight,"OnSwitchLight,Set Light");

		var string	sLight;
		var int		iTime;
		CSettings.Get("Editor/ScapeOptions/Light",sLight);
		CSettings.Get("Editor/ScapeOptions/Time",iTime);

		pxSpCNHour^.SetValue(iTime.ToReal());
		CLevelEditorWrap.SetTime(iTime,0,0);

		if(sLight=="true")then
			pxEnableLight^.SetChecked(1);
			CLevelEditorWrap.EnableSun(true);
			pxSpCNHour^.SetDisabled(false);
		else
			pxEnableLight^.SetChecked(0);
			CLevelEditorWrap.EnableSun(false);
			pxSpCNHour^.SetDisabled(true);
		endif;

		pxSpCNHour^.m_xOnChange = HourChange;
		pxEnableLight^.m_xOnStateChange = OnEnableLight;
		
		//ClearScreen
		var ^CCheckBox pxClearScreen = cast<CCheckBox>(GetControl("CheckB_CLS"));
		pxClearScreen^.SetText("Full Color Clear");
		
		var string	sCLS;
		
		CSettings.Get("Editor/ScapeOptions/ClearScreen",sCLS);

		if(sCLS=="true")then
			pxClearScreen^.SetChecked(1);
			CLevelEditorWrap.SetFullColorClear(true);
		else
			pxClearScreen^.SetChecked(0);
			CLevelEditorWrap.SetFullColorClear(false);
		endif;

		pxClearScreen^.m_xOnStateChange = OnClearScreen;

		//Water
		var ^CCheckBox pxEnableWater = cast<CCheckBox>(GetControl("CheckB_Water"));
		var ^CSpinCtrlNumber pxSpCNWater = cast<CSpinCtrlNumber>(GetControl("SpCtrl_Water"));
		pxEnableWater^.SetText("Render Water");
		//CKeyHandler.Get().AddWindowKT(pxEnableWater,"OnSwitchWater,Set Water");

		var string	sWaterDraw;
		var int 	iWaterAlpha;
		CSettings.Get("Editor/ScapeOptions/WaterDraw",sWaterDraw);
		CSettings.Get("Editor/ScapeOptions/WaterAlpha",iWaterAlpha);
		if(sWaterDraw=="true")then
			pxEnableWater^.SetChecked(1);
			CLevelEditorWrap.GetScapeMgr().SetWaterDraw(true);
			pxSpCNWater^.SetDisabled(false);
			if(iWaterAlpha==0)then
				pxSpCNWater^.SetValue(127.0);
			else
				pxSpCNWater^.SetValue(iWaterAlpha);
			endif;
			CLevelEditorWrap.GetScapeMgr().SetWaterMinAlpha(iWaterAlpha);
		else
			pxEnableWater^.SetChecked(0);
			CLevelEditorWrap.GetScapeMgr().SetWaterDraw(false);
			if(iWaterAlpha==0)then
				pxSpCNWater^.SetValue(127.0);
			else
				pxSpCNWater^.SetValue(iWaterAlpha);
			endif;
			pxSpCNWater^.SetDisabled(true);
		endif;
		pxEnableWater^.m_xOnStateChange = OnEnableWater;
		pxSpCNWater^.m_xOnChange = WaterAlpha;


		//Grass
		var ^CCheckBox pxEnableGrass = cast<CCheckBox>(GetControl("CheckB_Grass"));
		pxEnableGrass^.SetText("Render Grass");

		var string	sGrassDraw;
		CSettings.Get("Editor/ScapeOptions/GrassDraw",sGrassDraw);
		if(sGrassDraw=="true")then
			pxEnableGrass^.SetChecked(1);
			CLevelEditorWrap.SetGrassEnable(true);
		else
			pxEnableGrass^.SetChecked(0);
			CLevelEditorWrap.SetGrassEnable(false);
		endif;
		pxEnableGrass^.m_xOnStateChange = OnEnableGrass;


		//Sky
		var ^CCheckBox pxEnableSky = cast<CCheckBox>(GetControl("CheckB_Sky"));
		pxEnableSky^.SetText("Render Clouds");

		var string	sSkyDraw;
		CSettings.Get("Editor/ScapeOptions/SkyCloudsDraw",sSkyDraw);
		if(sSkyDraw=="true")then
			pxEnableSky^.SetChecked(1);
			CLevelEditorWrap.GetSkyMgr().SetCloudsEnabled( true );
		else
			pxEnableSky^.SetChecked(0);
			CLevelEditorWrap.GetSkyMgr().SetCloudsEnabled( false );
		endif;
		CLevelEditorWrap.GetSkyMgr().InitPostLevelLoaded();
		pxEnableSky^.m_xOnStateChange = OnEnableSky;
//		pxEnableSky^.SetDisabled(true);

		//Flatshades
		var ^CCheckBox pxEnableFlatshades = cast<CCheckBox>(GetControl("CheckB_Flatshades"));
		pxEnableFlatshades^.SetText("Render Flatshades");

		var string	sRenderFlatshades;
		CSettings.Get("Editor/ScapeOptions/RenderFlatshades",sRenderFlatshades);
		if(sRenderFlatshades=="true")then
			pxEnableFlatshades^.SetChecked(1);
			CClientWrap.EnableFlatshades(true);
		else
			pxEnableFlatshades^.SetChecked(0);
			CClientWrap.EnableFlatshades(false);
		endif;
		pxEnableFlatshades^.m_xOnStateChange = OnEnableFlatshades;
		pxEnableFlatshades^.SetDisabled(false);

		//FOW
		var ^CCheckBox pxFOW = cast<CCheckBox>(GetControl("CheckB_FOW"));
		var ^CSpinCtrlNumber pxSpCOwner = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlOwner"));

		var string	sFOWDraw;
		var int 	iFOWOwner;
		CSettings.Get("Editor/ScapeOptions/FOWDraw",sFOWDraw);
		CSettings.Get("Editor/ScapeOptions/FOWOwner",iFOWOwner);
		if(sFOWDraw=="true")then
			pxFOW^.SetChecked(1);
			pxSpCOwner^.SetDisabled(false);
			CLevelEditorWrap.SetFOWPlayerID(iFOWOwner);
		else
			pxFOW^.SetChecked(0);
			pxSpCOwner^.SetDisabled(true);
			CLevelEditorWrap.SetFOWPlayerID(-1);
		endif;
		pxSpCOwner^.SetValue(iFOWOwner);
		pxFOW^.m_xOnStateChange = OnEnableFOW;
		pxSpCOwner^.m_xOnChange = FOWChange;

		
		//Underwater fog
		var ^CCheckBox pxUnderWaterFog = cast<CCheckBox>(GetControl("Checkbox_UnderWaterFog"));
		pxUnderWaterFog^.SetText("Underwater Fog");
		var string	sUnderWaterFog;
		CSettings.Get("Editor/ScapeOptions/UnderWaterFog",sUnderWaterFog);
		if(sUnderWaterFog=="true")then
			pxUnderWaterFog^.SetChecked(1);
			CLevelEditorWrap.SetUnderwaterFogEnable(true);
		else
			pxUnderWaterFog^.SetChecked(0);
			CLevelEditorWrap.SetUnderwaterFogEnable(false);
		endif;
		pxUnderWaterFog^.m_xOnStateChange = OnUnderWaterFog;
		
		//Forest
		var ^CCheckBox pxRenderForest = cast<CCheckBox>(GetControl("Checkbox_Forest"));
		pxRenderForest^.SetText("Render Forest");
		var string	sForest;
		CSettings.Get("Editor/ScapeOptions/RenderForest",sForest);
		if(sForest=="true")then
			pxRenderForest^.SetChecked(1);
			CLevelEditorWrap.GetForestMgr().TemporaryEnableRendering(true);
		else
			pxRenderForest^.SetChecked(0);
			CLevelEditorWrap.GetForestMgr().TemporaryEnableRendering(false);
		endif;
		pxRenderForest^.m_xOnStateChange = OnForest;
		
	endconstructor;

	//Switches light on and off
	export proc bool SwitchLight()
		var ^CCheckBox			pxTmp			= cast<CCheckBox>(GetControl("CBox_Light"));
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));

		var	bool bState = pxTmp^.GetCheckMark();

		bState=!bState;

		var	int	iTemp;
		if(bState==true)then
			iTemp=1;
		else
			iTemp=0;
		endif;
		pxTmp^.SetChecked(iTemp);
		CLevelEditorWrap.EnableSun(bState);
		pxHour^.SetDisabled(!bState);

		return(true);
	endproc;
	
	export proc bool SwitchWater()
		var ^CCheckBox pxEnableWater = cast<CCheckBox>(GetControl("CheckB_Water"));
		var ^CSpinCtrlNumber pxSpCNWater = cast<CSpinCtrlNumber>(GetControl("SpCtrl_Water"));
		
		var	bool bState = pxEnableWater^.GetCheckMark();

		bState=!bState;

		var	int	iTemp;
		if(bState==true)then
			iTemp=1;
		else
			iTemp=0;
		endif;
		pxEnableWater^.SetChecked(iTemp);
		CLevelEditorWrap.GetScapeMgr().SetWaterDraw(pxEnableWater^.GetCheckMark());
		pxSpCNWater^.SetDisabled(!bState);
		CSettings.Set("Editor/ScapeOptions/WaterDraw",pxEnableWater^.GetCheckMark().ToString());
		return(true);
	endproc;

	proc bool OnEnableLight()
		var ^CCheckBox pxEnableLight = cast<CCheckBox>(GetControl("CBox_Light"));
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		if(!pxEnableLight^.GetCheckMark())then
			CLevelEditorWrap.EnableSun(false);
			pxHour^.SetDisabled(true);
		else
			CLevelEditorWrap.EnableSun(true);
			pxHour^.SetDisabled(false);
		endif;
		CSettings.Set("Editor/ScapeOptions/Light",pxEnableLight^.GetCheckMark().ToString());
		return(true);
	endproc;

	proc bool HourChange()
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		if(pxHour^.GetValueInt()>23)then
			pxHour^.SetValue(0);
		endif;
		if(pxHour^.GetValueInt()<0)then
			pxHour^.SetValue(23);
		endif;
		CLevelEditorWrap.SetTime(pxHour^.GetValueInt(),0,0);
		CSettings.Set("Editor/ScapeOptions/Time",pxHour^.GetValueInt());
		return(true);

	endproc;
	
	export proc string GetDayTime()
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		return(pxHour^.GetValueInt().ToString());
	endproc;

	export proc void IncreaseDayTime()
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		pxHour^.SetValue(pxHour^.GetValueInt()+1);
	endproc;
	
	export proc void DecreaseDayTime()
		var ^CSpinCtrlNumber pxHour = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlNHour"));
		pxHour^.SetValue(pxHour^.GetValueInt()-1);
	endproc;

	proc bool OnClearScreen()
		var ^CCheckBox pxClearScreen = cast<CCheckBox>(GetControl("CheckB_CLS"));
		CLevelEditorWrap.SetFullColorClear(pxClearScreen^.GetCheckMark());
		CSettings.Set("Editor/ScapeOptions/ClearScreen",pxClearScreen^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	proc bool OnEnableWater()
		var ^CCheckBox pxEnableWater = cast<CCheckBox>(GetControl("CheckB_Water"));
		var ^CSpinCtrlNumber pxSpCNWater = cast<CSpinCtrlNumber>(GetControl("SpCtrl_Water"));
		CLevelEditorWrap.GetScapeMgr().SetWaterDraw(pxEnableWater^.GetCheckMark());
		pxSpCNWater^.SetDisabled(!pxEnableWater^.GetCheckMark());
		if(pxEnableWater^.GetCheckMark())then
			WaterAlpha();
		endif;
		CSettings.Set("Editor/ScapeOptions/WaterDraw",pxEnableWater^.GetCheckMark().ToString());
		return(true);
	endproc;

	proc bool WaterAlpha()
		var ^CSpinCtrlNumber pxSpCNWater = cast<CSpinCtrlNumber>(GetControl("SpCtrl_Water"));
		CSettings.Set("Editor/ScapeOptions/WaterAlpha",pxSpCNWater^.GetValueInt());
		CLevelEditorWrap.GetScapeMgr().SetWaterMinAlpha(pxSpCNWater^.GetValueInt());
		return(true);
	endproc;

	proc bool OnEnableSky()
		var ^CCheckBox pxEnableSky = cast<CCheckBox>(GetControl("CheckB_Sky"));
		CSettings.Set("Editor/ScapeOptions/SkyCloudsDraw",pxEnableSky^.GetCheckMark().ToString());
		CLevelEditorWrap.GetSkyMgr().SetCloudsEnabled(pxEnableSky^.GetCheckMark());
		CLevelEditorWrap.GetSkyMgr().InitPostLevelLoaded();
		return(true);
	endproc;

	proc bool OnForest()
		var ^CCheckBox pxForest = cast<CCheckBox>(GetControl("Checkbox_Forest"));
		CLevelEditorWrap.GetForestMgr().TemporaryEnableRendering(pxForest^.GetCheckMark());
		CSettings.Set("Editor/ScapeOptions/RenderForest",pxForest^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	proc bool OnUnderWaterFog()
		var ^CCheckBox pxUnderWaterFog = cast<CCheckBox>(GetControl("Checkbox_UnderWaterFog"));
		CLevelEditorWrap.SetUnderwaterFogEnable(pxUnderWaterFog^.GetCheckMark());
		CSettings.Set("Editor/ScapeOptions/UnderWaterFog",pxUnderWaterFog^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	//extern
	export proc bool SwitchForest()
		var ^CCheckBox pxForest = cast<CCheckBox>(GetControl("Checkbox_Forest"));
		
		if(pxForest^.GetCheckMark())then
			CLevelEditorWrap.GetForestMgr().TemporaryEnableRendering(false);
			pxForest^.SetChecked(0);
		else
			CLevelEditorWrap.GetForestMgr().TemporaryEnableRendering(true);
			pxForest^.SetChecked(1);
		endif;
		CSettings.Set("Editor/ScapeOptions/RenderForest",pxForest^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	//extern
	export proc bool SwitchUnderWaterFog()
		var ^CCheckBox pxUnderWaterFog = cast<CCheckBox>(GetControl("Checkbox_UnderWaterFog"));
		
		if(pxUnderWaterFog^.GetCheckMark())then
			CLevelEditorWrap.SetUnderwaterFogEnable(false);
			pxUnderWaterFog^.SetChecked(0);
		else
			CLevelEditorWrap.SetUnderwaterFogEnable(true);
			pxUnderWaterFog^.SetChecked(1);
		endif;
		CSettings.Set("Editor/ScapeOptions/UnderWaterFog",pxUnderWaterFog^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	proc bool OnEnableGrass()
		var ^CCheckBox pxEnableGrass = cast<CCheckBox>(GetControl("CheckB_Grass"));
		CLevelEditorWrap.SetGrassEnable(pxEnableGrass^.GetCheckMark());
		CSettings.Set("Editor/ScapeOptions/GrassDraw",pxEnableGrass^.GetCheckMark().ToString());
		return(true);
	endproc;

	proc bool OnEnableFlatshades()
		var ^CCheckBox pxEnableFlatshades = cast<CCheckBox>(GetControl("CheckB_Flatshades"));
		CSettings.Set("Editor/ScapeOptions/RenderFlatshades",pxEnableFlatshades^.GetCheckMark().ToString());
		CClientWrap.EnableFlatshades(pxEnableFlatshades^.GetCheckMark());
		return(true);
	endproc;

	proc bool FOWChange()
		var ^CSpinCtrlNumber pxOwner = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlOwner"));
		CLevelEditorWrap.SetFOWPlayerID(pxOwner^.GetValueInt());
		return(true);
	endproc;

	proc bool OnEnableFOW()
		var ^CCheckBox pxFOW = cast<CCheckBox>(GetControl("CheckB_FOW"));
		var ^CSpinCtrlNumber pxSpCOwner = cast<CSpinCtrlNumber>(GetControl("CSpinCtrlOwner"));

		if(!pxFOW^.GetCheckMark())then
			pxSpCOwner^.SetDisabled(true);
			CLevelEditorWrap.SetFOWPlayerID(-1);
		else
			pxSpCOwner^.SetDisabled(false);
			CLevelEditorWrap.SetFOWPlayerID(pxSpCOwner^.GetValueInt());
		endif;
		return(true);
	endproc;

endclass;