class CViewMaterialNoise inherit CEnhancedFrameWindow

	var int m_iMaterial;

	export constructor( int p_iMaterial )

		m_iMaterial = p_iMaterial;

		if(!InitFromResource("scape/ViewMaterialNoise","MaterialNoise")) then
			CLevelEditorWrap.LogError("UI.ViewMaterialNoise","InitFromResource failed");
			return;
		endif;

		SetCaption("Material "+m_iMaterial.ToString()+" Noise");
		var CScapeMgrLE.CMatNoise xCurrent;
		CLevelEditorWrap.GetScapeMgr().GetMatNoise(p_iMaterial,xCurrent);

		var ^CSlider pxStepsSl = cast<CSlider>(GetControl("Sld_Steps"));
		pxStepsSl^.m_xOnChange=OnChangeStepsSl;
		pxStepsSl^.SetSliderRange(3);

		var ^CSlider pxExpSl = cast<CSlider>(GetControl("Sld_Exp"));
		pxExpSl^.m_xOnChange=OnChangeExpSl;
		pxExpSl^.SetSliderRange(100);

		var ^CSlider pxStretchXSl = cast<CSlider>(GetControl("Sld_StretchX"));
		pxStretchXSl^.m_xOnChange=OnChangeStretchXSl;
		pxStretchXSl^.SetSliderRange(1000);

		var ^CSlider pxStretchYSl = cast<CSlider>(GetControl("Sld_StretchY"));
		pxStretchYSl^.m_xOnChange=OnChangeStretchYSl;
		pxStretchYSl^.SetSliderRange(1000);

		var ^CSpinCtrlNumber pxSteps = cast<CSpinCtrlNumber>(GetControl("Num_Steps"));
		pxSteps^.m_xOnChange=OnChangeSteps;
		pxSteps^.SetValue(xCurrent.GetSteps());

		var ^CSpinCtrlNumber pxExp = cast<CSpinCtrlNumber>(GetControl("Num_Exp"));
		pxExp^.m_xOnChange=OnChangeExp;
		pxExp^.SetValue(xCurrent.GetExponent());

		var ^CSpinCtrlNumber pxStretchX = cast<CSpinCtrlNumber>(GetControl("Num_StretchX"));
		pxStretchX^.m_xOnChange=OnChangeStretchX;
		pxStretchX^.SetValue(xCurrent.GetStretchX()*100.0);

		var ^CSpinCtrlNumber pxStretchY = cast<CSpinCtrlNumber>(GetControl("Num_StretchY"));
		pxStretchY^.m_xOnChange=OnChangeStretchY;
		pxStretchY^.SetValue(xCurrent.GetStretchY()*100.0);

		var ^CButton pxApply = cast<CButton>(GetControl("Btn_Apply"));
		pxApply^.SetText(CLocalizer.Get().Translate("_MaterialNoise_Btn_Apply"));
		pxApply^.m_xOnClick=OnApply;

		var ^CButton pxOK = cast<CButton>(GetControl("Btn_OK"));
		pxOK^.SetText(CLocalizer.Get().Translate("_MaterialNoise_Btn_OK"));
		pxOK^.m_xOnClick=OnOK;

	endconstructor;

	export destructor()
	enddestructor;

	proc bool OnChangeSteps()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_Steps"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_Steps"));
		pxSSl^.SetSliderPos(pxS^.GetValueInt()-3);
		return(true);
	endproc;

	proc bool OnChangeStepsSl()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_Steps"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_Steps"));
		pxS^.SetValue(pxSSl^.GetSliderPos()+3);
		return(true);
	endproc;

	proc bool OnChangeExp()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_Exp"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_Exp"));
		pxSSl^.SetSliderPos((pxS^.GetValueFloat()*10.0).ToInt());
		return(true);
	endproc;

	proc bool OnChangeExpSl()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_Exp"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_Exp"));
		pxS^.SetValue(pxSSl^.GetSliderPos().ToReal()/10.0);
		return(true);
	endproc;

	proc bool OnChangeStretchX()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_StretchX"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_StretchX"));
		pxSSl^.SetSliderPos((pxS^.GetValueFloat()*100.0).ToInt());
		return(true);
	endproc;

	proc bool OnChangeStretchXSl()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_StretchX"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_StretchX"));
		pxS^.SetValue( (pxSSl^.GetSliderPos() - (pxSSl^.GetSliderPos()%5) ).ToReal()/100.0);
		return(true);
	endproc;

	proc bool OnChangeStretchY()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_StretchY"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_StretchY"));
		pxSSl^.SetSliderPos((pxS^.GetValueFloat()*100.0).ToInt());
		return(true);
	endproc;

	proc bool OnChangeStretchYSl()
		var ^CSpinCtrlNumber pxS = cast<CSpinCtrlNumber>(GetControl("Num_StretchY"));
		var ^CSlider pxSSl = cast<CSlider>(GetControl("Sld_StretchY"));
		pxS^.SetValue( (pxSSl^.GetSliderPos() - (pxSSl^.GetSliderPos()%5) ).ToReal()/100.0);
		return(true);
	endproc;

	proc bool OnApply()
		var ^CSpinCtrlNumber pxA = cast<CSpinCtrlNumber>(GetControl("Num_Exp"));
		var ^CSpinCtrlNumber pxB = cast<CSpinCtrlNumber>(GetControl("Num_Steps"));
		var ^CSpinCtrlNumber pxC = cast<CSpinCtrlNumber>(GetControl("Num_StretchX"));
		var ^CSpinCtrlNumber pxD = cast<CSpinCtrlNumber>(GetControl("Num_StretchY"));

		var CScapeMgrLE.CMatNoise xCurrent;
		xCurrent.SetSteps(pxB^.GetValueInt());
		xCurrent.SetExponent(pxA^.GetValueFloat());
		CLevelEditorWrap.LogSpam("UI.ViewMaterialNoise",pxA^.GetValueFloat().ToString());
		xCurrent.SetStretchX(pxC^.GetValueFloat()/100.0);
		xCurrent.SetStretchY(pxD^.GetValueFloat()/100.0);

		CLevelEditorWrap.GetScapeMgr().SetMatNoise(m_iMaterial,xCurrent);
		return(true);
	endproc;

	proc bool OnOK()
		OnApply();
		delete this;
		return(true);
	endproc;

	proc bool OnClose()
		delete this;
		return(true);
	endproc;

endclass;