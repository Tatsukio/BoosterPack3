class CSequenceEditor inherit CEnhancedFrameWindow
	var ^CTabCtrl			m_pxTabCtrl;
	var ^CTabFile			m_pxTabFile;
	var ^CTabActors			m_pxTabActors;
	var ^CTabStory			m_pxTabStory;
	var ^CTabEvents			m_pxTabEvents;
	var ^CTabParticle 		m_pxTabParticle;
	var ^CTabLights 		m_pxTabLights;
	var ^CTabSounds 		m_pxTabSounds;

	export constructor()
		if(!InitFromResource("sequencer/SequenceEditor","SequenceEditor")) then
			CLevelEditorWrap.LogError("UI.SequenceEditor","InitFromResource failed");
			return;
		endif;

		m_pxTabFile=new CTabFile(this);
		m_pxTabActors=new CTabActors(this);
		m_pxTabStory=new CTabStory(this);
		m_pxTabEvents=new CTabEvents(this);
		m_pxTabParticle=new CTabParticle(this);
		m_pxTabLights=new CTabLights(this);
		m_pxTabSounds=new CTabSounds(this);

		m_pxTabCtrl=cast<CTabCtrl>(GetControl("TabCtrl"));
		m_pxTabCtrl^.AddTab("      File      ",m_pxTabFile);
		m_pxTabCtrl^.AddTab(" Seq. Browser ",m_pxTabActors);
		m_pxTabCtrl^.AddTab("      Story     ",m_pxTabStory);
		m_pxTabCtrl^.AddTab("     Events     ",m_pxTabEvents);
		m_pxTabCtrl^.AddTab("    Particle    ",m_pxTabParticle);
		m_pxTabCtrl^.AddTab("    Lights    ",m_pxTabLights);
		m_pxTabCtrl^.AddTab("    Sounds    ",m_pxTabSounds);		
		m_pxTabCtrl^.m_xOnChangeTab=OnChangeTab;



		SetVisible(false);

		SetCaption("Sequenzeditor");
		LoadPosition("Sequenzeditor");
		InitShortcuts();
		SetDisabled(true);
	endconstructor;

	export destructor()	
		/*werden vom TabCtrl automatisch gelöscht?
		m_pxTabLights^.Destroy();
		m_pxTabParticle^.Destroy();
		m_pxTabEvents^.Destroy();
		m_pxTabStory^.Destroy();
		m_pxTabActors^.Destroy();
		m_pxTabFile^.Destroy();
		*/
	enddestructor;
	
	export proc void OnShutInstance()
		m_pxTabFile^.OnShutInstance();
	endproc;
	
	proc void InitShortcuts()
		AddAccelerator("SPACE , NONE , SwitchPlayPause");
		AddAccelerator("S , CONTROL , Save");
		AddAccelerator("E , CONTROL , SwitchEditMode");	
		AddAccelerator(". , NONE , GoToNextKey");
		AddAccelerator("COMMA , NONE , GoToPrevKey");
		AddAccelerator("C , ALT , GoToNextCamera");
		AddAccelerator("C , NONE , SwitchCameraMode");
			
		SetCmd("SwitchPlayPause",SwitchPlayPause);
		SetCmd("Save",m_pxTabFile^.OnSaveSequence);	
		SetCmd("SwitchEditMode",SwitchEditMode);
		SetCmd("GoToNextKey",GoToNextKey);
		SetCmd("GoToPrevKey",GoToPrevKey);
		SetCmd("GoToNextCamera",GoToNextCamera);
		SetCmd("SwitchCameraMode",SwitchCameraMode);
	endproc;
	
	proc bool SwitchPlayPause()
		var ^CSequence pxSequence=GetSequence();
		if(pxSequence!=null)then
			if(!pxSequence^.IsPlaying() || pxSequence^.IsPaused())then
				pxSequence^.Play();
			elseif(pxSequence^.IsPlaying() && !pxSequence^.IsPaused())then
				pxSequence^.Pause();
			endif;
		endif;
		return true;
	endproc;
	
	proc bool SwitchEditMode()
		var ^CUSLTrackCtrl pxTrackCtrl=GetTrackCtrl();
		if(pxTrackCtrl!=null)then
			pxTrackCtrl^.SetEditMode(!pxTrackCtrl^.GetEditMode());
		endif;	
		return true;
	endproc;
	
	proc bool GoToNextKey()
		var ^CUSLTrackCtrl pxTrackCtrl=GetTrackCtrl();
		if(pxTrackCtrl!=null)then
			var ^CSeqRuler pxRuler=pxTrackCtrl^.GetRuler();
			if(pxRuler!=null)then
				pxRuler^.GoToNextKey();
			endif;			
		endif;	
		return true;
	endproc;
	
	proc bool GoToPrevKey()
		var ^CUSLTrackCtrl pxTrackCtrl=GetTrackCtrl();
		if(pxTrackCtrl!=null)then
			var ^CSeqRuler pxRuler=pxTrackCtrl^.GetRuler();
			if(pxRuler!=null)then
				pxRuler^.GoToPrevKey();
			endif;			
		endif;	
		return true;
	endproc;
	
	proc bool GoToNextCamera()
		var ^CSequence pxSequence=GetSequence();
		var ^CUSLTrackCtrl pxTrackCtrl=GetTrackCtrl();		
		if(pxSequence!=null && pxTrackCtrl!=null)then			
			var int iCurCam=pxSequence^.GetActiveCameraIdx();			
			var int iNumCameras=pxSequence^.NumCameras();
			iCurCam++;
			if(iCurCam>=iNumCameras)then iCurCam=0; endif;			
			pxSequence^.SetActiveCameraIdx(iCurCam);			
		endif;
		return true;
	endproc;
	
	proc bool SwitchCameraMode()
		var ^CUSLTrackCtrl pxTrackCtrl=GetTrackCtrl();
		if(pxTrackCtrl!=null)then
			pxTrackCtrl^.SetCamMode(!pxTrackCtrl^.GetCamMode());
		endif;
		return true;
	endproc;
	
	export proc ^CUSLTrackCtrl GetTrackCtrl()
		return m_pxTabStory^.GetTrackCtrl();
	endproc;

	export proc ^CSequence GetSequence()
		return m_pxTabFile^.GetSequence();
	endproc;

	export proc void OnSelectionChanged()
		m_pxTabActors^.OnSelectionChanged();
		m_pxTabStory^.OnSelectionChanged();
	endproc;
	
	export proc void DeleteActor(CGuid p_xObjGuid)
		m_pxTabActors^.DeleteActor(p_xObjGuid);
	endproc;
	
	export proc void UpdateActors()
		m_pxTabActors^.Update();
	endproc;

	export proc void OnUpdateControlPanel()
		m_pxTabFile^.OnUpdateControlPanel();
		m_pxTabStory^.OnUpdateControlPanel();
		m_pxTabEvents^.OnUpdateControlPanel();
		m_pxTabParticle^.OnUpdateControlPanel();
		m_pxTabLights^.OnUpdateControlPanel();
		m_pxTabSounds^.OnUpdateControlPanel();
	endproc;

	export proc bool OnDelCameraByGuid(CGuid p_xGuid)
		var ^CSequence pxSequence=GetSequence();
		pxSequence^.DelCamera(p_xGuid);
		return(true);
	endproc;
/*
	export proc void UpdateProperties(^CItemCtrl p_pxItemCtrl)
		m_pxTabStory^.UpdateItemPropWindow(p_pxItemCtrl);
		var ^CItemPropView pxItemPropView=GetTrackCtrl()^.GetItemPropView();
		if(pxItemPropView!=null)then
			pxItemPropView^.Init(p_pxItemCtrl);
		endif;
	endproc;
*/
	export proc bool IsSequenceValid()
		var ^CSequence pxSequence=GetSequence();
		if(pxSequence!=null)then
			return(true);
		else
			return(false);
		endif;
	endproc;

	export proc void OnChangeSequence()
		m_pxTabActors^.Update();	
		m_pxTabStory^.OnChangeSequence();
		m_pxTabEvents^.OnChangeSequence();
		m_pxTabParticle^.OnChangeSequence();
		m_pxTabLights^.OnChangeSequence();	
		m_pxTabSounds^.OnChangeSequence();	
	endproc;

	proc bool OnChangeTab(int p_iCurTab)
		var ^CSeqTab pxTab=cast<CSeqTab>(m_pxTabCtrl^.GetTabWindow(p_iCurTab));
		var ^CSeqRuler pxRuler=pxTab^.GetRuler();
		if(pxRuler!=null)then
			GetTrackCtrl()^.SetRuler(pxRuler);
		endif;
		var ^CItemPropView pxItemPropView=pxTab^.GetItemPropView();
		if(pxItemPropView!=null)then
			GetTrackCtrl()^.SetItemPropView(pxItemPropView);
			pxRuler^.SetItemPropView(pxItemPropView);
			pxItemPropView^.InvalidateContent();
		endif;
		return true;
	endproc;

endclass;

class CSeqTab inherit CWindow

	export proc ^CSeqRuler GetRuler()
		return null;
	endproc;

	export proc ^CItemPropView GetItemPropView()
		return null;
	endproc;
endclass;

class CTrackItemView inherit CWindow
	export constructor()
		if(!InitFromResource("sequencer/SequenceEditor","TrackItemView")) then
			CLevelEditorWrap.LogError("UI.SequenceEditor","TrackItemView init failed");
			return;
		endif;
	endconstructor;
endclass;

