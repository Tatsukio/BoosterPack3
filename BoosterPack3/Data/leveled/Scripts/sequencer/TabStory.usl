
class CTabStory inherit CSeqTab

	var ^CSequenceEditor	m_pxSeqEditor;
	var ^CUSLTrackCtrl		m_pxTrackCtrl;
	var ^CSeqRuler 			m_pxRuler;
	var ^CItemPropView		m_pxItemPropView;
	var ^CSequenceControlPanelSmall	m_pxControlPanel;

	export constructor(^CSequenceEditor p_pxSeqEditor)
		if(!InitFromResource("sequencer/SequenceEditor","Tab_Story"))then
			CLevelEditorWrap.LogError("UI.SequenceEditor","Tab_Story InitFromRessource() failed");
			return;
		endif;


		m_pxSeqEditor=p_pxSeqEditor;
		m_pxItemPropView=cast<CItemPropView>(GetControl("ItemPropView"));
		m_pxControlPanel=cast<CSequenceControlPanelSmall>(GetControl("ControlPanel"));
		m_pxTrackCtrl=cast<CUSLTrackCtrl>(GetControl("TrackCtrl/TrackCtrl"));
		m_pxTrackCtrl^.SetSequenceEditor(m_pxSeqEditor);
		//m_pxTrackCtrl^.SetItemPropView(m_pxItemPropView);
		m_pxRuler=cast<CSeqRuler>(GetControl("Ruler"));
		//m_pxTrackCtrl^.SetRuler(m_pxRuler);


		var ^CWindow pxRTContainer=m_pxTrackCtrl^.GetControl("right_top_container");
		if(!pxRTContainer^.InitFromResource("sequencer/SequenceEditor","CameraTracksContainer"))then
			CLevelEditorWrap.LogError("UI.SequenceEditor","CameraTracksContainer InitFromRessource() failed");
			return;
		endif;
		var ^CWindow pxLTContainer=m_pxTrackCtrl^.GetControl("left_top_container");
		if(!pxLTContainer^.InitFromResource("sequencer/SequenceEditor","CameraTrackInfosContainer"))then
			CLevelEditorWrap.LogError("UI.SequenceEditor","CameraTrackInfosContainer InitFromRessource() failed");
			return;
		endif;

		var ^CTrackContainer pxTrackContainer=cast<CTrackContainer>(pxRTContainer^.GetControl("TrackContainer"));
		m_pxTrackCtrl^.AddTrackContainer(pxTrackContainer);
		var ^IBaseTrack pxCameraTrack1=cast<IBaseTrack>(pxTrackContainer^.GetControl("TrackCamera1"));
		pxTrackContainer^.AddTrack(pxCameraTrack1);
		var ^IBaseTrack pxCameraTrack2=cast<IBaseTrack>(pxTrackContainer^.GetControl("TrackCamera2"));
		pxTrackContainer^.AddTrack(pxCameraTrack2);
		var ^IBaseTrack pxCameraTrack3=cast<IBaseTrack>(pxTrackContainer^.GetControl("TrackCamera3"));
		pxTrackContainer^.AddTrack(pxCameraTrack3);
		var ^IBaseTrack pxCameraTrack4=cast<IBaseTrack>(pxTrackContainer^.GetControl("TrackCamera4"));
		pxTrackContainer^.AddTrack(pxCameraTrack4);
		var ^IBaseTrack pxCameraTrackFX=cast<IBaseTrack>(pxTrackContainer^.GetControl("TrackCameraFX"));
		pxTrackContainer^.AddTrack(pxCameraTrackFX);

	endconstructor;

	export destructor()
		m_pxTrackCtrl^.SetItemPropView(null);
	enddestructor;

	export proc ^CSeqRuler GetRuler()
		return m_pxRuler;
	endproc;

	export proc ^CItemPropView GetItemPropView()
		return m_pxItemPropView;
	endproc;


	export proc ^CUSLTrackCtrl GetTrackCtrl()
		return m_pxTrackCtrl;
	endproc;

	export proc void OnUpdateControlPanel()
		m_pxControlPanel^.Update(m_pxTrackCtrl,m_pxSeqEditor^.GetSequence());
	endproc;
	
	export proc void OnChangeSequence()
		if(m_pxItemPropView!=null)then
			m_pxItemPropView^.Init(null);
		endif;		
	endproc;
	
	export proc void OnSelectionChanged()
		var ^CSequence pxSequence=m_pxSeqEditor^.GetSequence();
		if(pxSequence==null)then return; endif;
		m_pxTrackCtrl^.DeselectAllActors();
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		var int i,iC=pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxWalk=pxSel^[i].GetObj();
			if(pxWalk!=null)then
				var CGuid xGuid=pxWalk^.GetGuid();
				if(pxSequence^.FindActor(xGuid)!=-1)then
					m_pxTrackCtrl^.SelectActor(xGuid);
					break;
				endif;
			endif;
		endfor;		
	endproc;
/*
	export proc void UpdateItemPropWindow(^CItemCtrl p_pxItemCtrl)
		m_pxItemPropView^.Init(p_pxItemCtrl);
	endproc;*/

endclass;
