class CGraphicPreferences inherit CEnhancedFrameWindow;
	
	var string		m_sPassability,m_sNonPassability;
	var string		m_sWallmap,m_sObjectNames;
	var string 		m_sInvisibleObjects;
	var string		m_sGridType;
	var int			m_iRed,m_iGreen,m_iBlue;
	
	var ^CRadioButton m_pxRBGridTypeNone;
	var ^CRadioButton m_pxRBGridTypeMat;
	var ^CRadioButton m_pxRBGridTypeHeight;
	var ^CRadioButton m_pxRBGridType32Block;
		
	export constructor()
		if(!InitFromResource("options/GraphicPreferences","GraphicPreferences")) then
			CLevelEditorWrap.LogError("UI.GraphicPreferences","InitFromResource failed");
			return;
		endif;
	
		//Initalize Graphic Preferences on first start
		if(CSettings.NumSubs("Editor/ScapeOptions")==0)then
			CSettings.Set("Editor/ScapeOptions/GridType","none");			
			CSettings.Set("Editor/ScapeOptions/GridColorRed",255);
			CSettings.Set("Editor/ScapeOptions/GridColorGreen",255);
			CSettings.Set("Editor/ScapeOptions/GridColorBlue",255);
			CSettings.Set("Editor/ScapeOptions/Passability","false");
			CSettings.Set("Editor/ScapeOptions/NonPassability","false");
			CSettings.Set("Editor/ScapeOptions/InvisibleObjects","false");
			CSettings.Set("Editor/ScapeOptions/Wallmap","false");
			CSettings.Set("Editor/ScapeOptions/ObjectNames","false");
		endif;
		
		//Read settings from config
		CSettings.Get("Editor/ScapeOptions/GridType",m_sGridType);	
		CSettings.Get("Editor/ScapeOptions/GridColorRed",m_iRed);
		CSettings.Get("Editor/ScapeOptions/GridColorGreen",m_iGreen);
		CSettings.Get("Editor/ScapeOptions/GridColorBlue",m_iBlue);
		CSettings.Get("Editor/ScapeOptions/Passability",m_sPassability);
		CSettings.Get("Editor/ScapeOptions/NonPassability",m_sNonPassability);
		CSettings.Get("Editor/ScapeOptions/InvisibleObjects",m_sInvisibleObjects);
		CSettings.Get("Editor/ScapeOptions/Wallmap",m_sWallmap);
		CSettings.Get("Editor/ScapeOptions/ObjectNames",m_sObjectNames);
		
		//Grid Groupbox
		var ^CGroupBox pxGroupBoxGrid = cast<CGroupBox>(GetControl("GroupBoxGrid"));		
		//Grid CheckBox
		m_pxRBGridTypeNone=cast<CRadioButton>(pxGroupBoxGrid^.GetControl("GT_None"));
		m_pxRBGridTypeMat=cast<CRadioButton>(pxGroupBoxGrid^.GetControl("GT_Material"));
		m_pxRBGridTypeHeight=cast<CRadioButton>(pxGroupBoxGrid^.GetControl("GT_Height"));
		m_pxRBGridType32Block=cast<CRadioButton>(pxGroupBoxGrid^.GetControl("GT_32Block"));
		m_pxRBGridTypeNone^.m_xOnChange=OnChangeGridType;
		m_pxRBGridTypeMat^.m_xOnChange=OnChangeGridType;
		m_pxRBGridTypeHeight^.m_xOnChange=OnChangeGridType;
		m_pxRBGridType32Block^.m_xOnChange=OnChangeGridType;
		
		if(m_sGridType=="material")then
			m_pxRBGridTypeMat^.SetSelected(true);
		elseif(m_sGridType=="height")then
			m_pxRBGridTypeHeight^.SetSelected(true);
		elseif(m_sGridType=="32block")then
			m_pxRBGridType32Block^.SetSelected(true);
		else
			m_pxRBGridTypeNone^.SetSelected(true);
		endif;
		/*
		//Check if grid is checked
		if(m_sGrid=="true")then
			pxCheckBoxGrid^.SetChecked(1);
			EnableGrid(true);
		else
			pxCheckBoxGrid^.SetChecked(0);
			EnableGrid(false);
		endif;
		
		if(pxCheckBoxGrid^.GetCheckMark()==true)then
			pxGroupBoxGrid^.SetDisabled(false);	
		else
			pxGroupBoxGrid^.SetDisabled(true);	
		endif;
		
		//Grid CheckBox
		var ^CCheckBox pxCheckBoxGrid32 = cast<CCheckBox>(GetControl("CheckBoxGrid32"));
		pxCheckBoxGrid32^.m_xOnStateChange = OnChangeGrid32;
		
		//Check if grid is checked
		if(m_sGrid32=="true")then
			pxCheckBoxGrid32^.SetChecked(1);
			//EnableGrid32(true);
		else
			pxCheckBoxGrid32^.SetChecked(0);
			//EnableGrid32(false);
		endif;
		*/
		
		//Red
		var ^CSpinCtrlNumber pxRed = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Red"));
		pxRed^.SetLimits(0,255,1);
		pxRed^.SetValue(m_iRed);
		pxRed^.m_xOnChange = OnChangeRed;
		
		//Green
		var ^CSpinCtrlNumber pxGreen = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Green"));
		pxGreen^.SetLimits(0,255,1);
		pxGreen^.SetValue(m_iGreen);
		pxGreen^.m_xOnChange = OnChangeGreen;
		
		//Blue
		var ^CSpinCtrlNumber pxBlue = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Blue"));
		pxBlue^.SetLimits(0,255,1);
		pxBlue^.SetValue(m_iBlue);
		pxBlue^.m_xOnChange = OnChangeBlue;
				
		UpdateGridColor();
		
		//Passability CheckBox
		var ^CCheckBox pxCheckBoxPassability = cast<CCheckBox>(GetControl("GroupBoxRight/Passability"));
		pxCheckBoxPassability^.m_xOnClick = OnChangePassability;
		//Check if passability is checked
		if(m_sPassability=="true")then
			pxCheckBoxPassability^.SetChecked(1);
			EnablePassability(true);
		else
			pxCheckBoxPassability^.SetChecked(0);
			EnablePassability(false);
		endif;
		
		//NonPassability CheckBox
		var ^CCheckBox pxCheckBoxNonPassability = cast<CCheckBox>(GetControl("GroupBoxRight/NonPassability"));
		pxCheckBoxNonPassability^.m_xOnClick = OnChangeNonPassability;
		//Check if passability is checked
		if(m_sNonPassability=="true")then
			pxCheckBoxNonPassability^.SetChecked(1);
			EnableNonPassability(true);
		else
			pxCheckBoxNonPassability^.SetChecked(0);
			EnableNonPassability(false);
		endif;
		
		var ^CCheckBox pxEnableWallmap = cast<CCheckBox>(GetControl("GroupBoxRight/Wallmap"));
		var ^CWallMapCln pxWM=CLevelEditorWrap.GetObjMgr().GetObjPlaceChecker()^.GetWallMap();
		if(m_sWallmap=="true")then
			pxEnableWallmap^.SetChecked(1);
			pxWM^.EnableGridRendering(true);
			pxWM^.EnableMapRendering(true);
		else
			pxEnableWallmap^.SetChecked(0);
			pxWM^.EnableGridRendering(false);
			pxWM^.EnableMapRendering(false);
		endif;
		pxEnableWallmap^.m_xOnStateChange = OnSwitchWallmap;
		
		//Invisible objects
		var ^CCheckBox pxInvisibleObjects = cast<CCheckBox>(GetControl("GroupBoxRight/InvisibleObjects"));
		if(m_sInvisibleObjects=="true")then
			pxInvisibleObjects^.SetChecked(1);
			CLevelEditorWrap.SetShowInvisibleObjs(true);
		else
			pxInvisibleObjects^.SetChecked(0);
			CLevelEditorWrap.SetShowInvisibleObjs(false);
		endif;
		//ToDo
		//pxInvisibleObjects^.m_xOnStateChange = OnSwitchInvisibleObjects;
		
		//Objectnames CheckBox
		var ^CCheckBox pxCheckBoxObjectNames=cast<CCheckBox>(GetControl("GroupBoxRight/ObjectNames"));
		pxCheckBoxObjectNames^.m_xOnClick = OnChangeObjectNames;
		
		if(m_sObjectNames=="true")then
			pxCheckBoxObjectNames^.SetChecked(1);
			CClientWrap.GetObjMgr().ShowObjNamesEnable(true);
		else
			pxCheckBoxObjectNames^.SetChecked(0);
			CClientWrap.GetObjMgr().ShowObjNamesEnable(false);
		endif;
		var CFourCC xTmp="CHTR";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="BLDG";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,0,0,255}});
		xTmp="ANML";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{0,255,0,255}});
		xTmp="SLOC";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="FGHT";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="TRSP";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="VHCL";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="SHIP";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="NEST";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		xTmp="RSRC";CLevelEditorWrap.GetObjMgr().ShowObjNamesSetType(xTmp,true,{{225,255,255,255}});
		
	endconstructor;

	destructor()
		
	enddestructor;
	
	export proc string GetDayTime()
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		return(pxScapeOptions^.GetDayTime());
	endproc;
	
	export proc void IncreaseDayTime()
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		pxScapeOptions^.IncreaseDayTime();
	endproc;
	
	export proc void DecreaseDayTime()
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		pxScapeOptions^.DecreaseDayTime();
	endproc;
	
	//Switches wallmap rendering on shortcut
	export proc bool SwitchWallmap()
		var ^CCheckBox pxSwitchWallmap = cast<CCheckBox>(GetControl("GroupBoxRight/Wallmap"));
		var ^CWallMapCln pxWM=CLevelEditorWrap.GetObjMgr().GetObjPlaceChecker()^.GetWallMap();
		if(pxSwitchWallmap^.GetCheckMark())then
			pxWM^.EnableGridRendering(false);
			pxWM^.EnableMapRendering(false);
			pxSwitchWallmap^.SetChecked(0);
		else
			pxWM^.EnableGridRendering(true);
			pxWM^.EnableMapRendering(true);
			pxSwitchWallmap^.SetChecked(1);
		endif;
		CSettings.Set("Editor/ScapeOptions/Wallmap",pxSwitchWallmap^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	export proc void SwitchObjectNames()
		var ^CCheckBox pxObjectNames = cast<CCheckBox>(GetControl("GroupBoxRight/ObjectNames"));
		if(pxObjectNames^.GetCheckMark())then
			CLevelEditorWrap.GetObjMgr().ShowObjNamesEnable(false);
			pxObjectNames^.SetChecked(0);
		else
			CLevelEditorWrap.GetObjMgr().ShowObjNamesEnable(true);
			pxObjectNames^.SetChecked(1);
		endif;
		CSettings.Set("Editor/ScapeOptions/ObjectNames",pxObjectNames^.GetCheckMark().ToString());
		return();
	endproc;

	//Switches forest rendering on shortcut
	export proc void SwitchRenderForest()
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		pxScapeOptions^.SwitchForest();
		return();
	endproc;
	
	export proc void SwitchUnderWaterFog();
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		pxScapeOptions^.SwitchUnderWaterFog();
	endproc;

	//Switches water rendering on shortcut
	export proc void SwitchWater();
		var ^CViewScapeOptions pxScapeOptions = cast<CViewScapeOptions>(GetControl("GroupBoxLeftTop/Options"));
		pxScapeOptions^.SwitchWater();
	endproc;
	
	//Switches grid if shortcut is used
	export proc void SwitchGrid()
		KLog.LogSpam("AnTr","CGraphicPref::SwitchGrid()");
		if(m_pxRBGridTypeNone^.GetSelected())then
			m_pxRBGridTypeMat^.SetSelected(true);
		elseif(m_pxRBGridTypeMat^.GetSelected())then
			m_pxRBGridTypeHeight^.SetSelected(true);
		elseif(m_pxRBGridTypeHeight^.GetSelected())then
			m_pxRBGridType32Block^.SetSelected(true);
		elseif(m_pxRBGridType32Block^.GetSelected())then
			m_pxRBGridTypeNone^.SetSelected(true);
		endif;		
		OnChangeGridType();
	endproc;
	
	proc bool OnChangeGridType()
		m_sGridType="none";		
		var int iGridType=0;
		if(m_pxRBGridTypeMat^.GetSelected())then
			m_sGridType="material";			
			iGridType=1;
		elseif(m_pxRBGridTypeHeight^.GetSelected())then
			m_sGridType="height";			
			iGridType=2;
		elseif(m_pxRBGridType32Block^.GetSelected())then
			m_sGridType="32block";			
			iGridType=3;
		endif;		
		CLevelEditorWrap.GetScapeMgr().GetGrid()^.SetGridType(iGridType);
		CSettings.Set("Editor/ScapeOptions/GridType",m_sGridType);		
		return true;
	endproc;
	
	proc bool OnChangeRed()
		var ^CSpinCtrlNumber pxRed = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Red"));
		m_iRed=pxRed^.GetValueInt();
		CSettings.Set("Editor/ScapeOptions/GridColorRed",m_iRed);
		UpdateGridColor();
		return(true);
	endproc;
	
	proc bool OnChangeGreen()
		var ^CSpinCtrlNumber pxGreen = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Green"));
		m_iGreen=pxGreen^.GetValueInt();
		CSettings.Set("Editor/ScapeOptions/GridColorGreen",m_iGreen);
		UpdateGridColor();
		return(true);
	endproc;
	
	proc bool OnChangeBlue()
		var ^CSpinCtrlNumber pxBlue = cast<CSpinCtrlNumber>(GetControl("GroupBoxGrid/Blue"));
		m_iBlue=pxBlue^.GetValueInt();
		CSettings.Set("Editor/ScapeOptions/GridColorBlue",m_iBlue);
		UpdateGridColor();
		return(true);
	endproc;
	
	proc void UpdateGridColor()
		var ^CPane		pxGridColor = cast<CPane>(GetControl("GroupBoxGrid/ColorButton/Color"));
		var color	xColor;
		xColor.SetRed(m_iRed);
		xColor.SetGreen(m_iGreen);
		xColor.SetBlue(m_iBlue);
		pxGridColor^.SetColor(xColor);
		CLevelEditorWrap.GetScapeMgr().GetGrid()^.SetColor(xColor);
	endproc;

	proc bool OnSwitchWallmap()
		var ^CCheckBox pxSwitchWallmap = cast<CCheckBox>(GetControl("GroupBoxRight/Wallmap"));
		var ^CWallMapCln pxWM=CLevelEditorWrap.GetObjMgr().GetObjPlaceChecker()^.GetWallMap();
		if(pxSwitchWallmap^.GetCheckMark())then
			pxWM^.EnableGridRendering(true);
			pxWM^.EnableMapRendering(true);
		else
			pxWM^.EnableGridRendering(false);
			pxWM^.EnableMapRendering(false);		
		endif;
		CSettings.Set("Editor/ScapeOptions/Wallmap",pxSwitchWallmap^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	export proc void SwitchRenderAllObjects()
		var ^CObjMgr pxObjMgr=^(CClientWrap.GetObjMgr());
		var ^CIdiObjMgrClient pxIdiObjMgr=^(CLevelEditorWrap.GetIdiObjMgr());
		var bool bEnable=pxObjMgr^.GetEnable();
		pxObjMgr^.SetEnable(!bEnable);		
		pxIdiObjMgr^.SetRenderFlag(!bEnable);
	endproc;
	
	export proc bool OnChangeObjectNames()
		var ^CCheckBox pxObjectNames = cast<CCheckBox>(GetControl("GroupBoxRight/ObjectNames"));
		if(!pxObjectNames^.GetCheckMark())then
			pxObjectNames^.SetChecked(1);
			CClientWrap.GetObjMgr().ShowObjNamesEnable(true);
		else
			pxObjectNames^.SetChecked(0);
			CClientWrap.GetObjMgr().ShowObjNamesEnable(false);
		endif;
		CSettings.Set("Editor/ScapeOptions/ObjectNames",pxObjectNames^.GetCheckMark().ToString());
		
		return(true);
	endproc;

	export proc bool OnChangePassability()
		var ^CCheckBox pxCheckBoxPassability = cast<CCheckBox>(GetControl("GroupBoxRight/Passability"));
		
		if(!pxCheckBoxPassability^.GetCheckMark())then
			pxCheckBoxPassability^.SetChecked(1);
			EnablePassability(true);
		else
			pxCheckBoxPassability^.SetChecked(0);
			EnablePassability(false);
		endif;
		CSettings.Set("Editor/ScapeOptions/Passability",pxCheckBoxPassability^.GetCheckMark().ToString());
		return(true);
	endproc;

	export proc bool OnChangeNonPassability()
		var ^CCheckBox pxCheckBoxNonPassability = cast<CCheckBox>(GetControl("GroupBoxRight/NonPassability"));
		
		if(!pxCheckBoxNonPassability^.GetCheckMark())then
			pxCheckBoxNonPassability^.SetChecked(1);
			EnableNonPassability(true);
		else
			pxCheckBoxNonPassability^.SetChecked(0);
			EnableNonPassability(false);
		endif;
		CSettings.Set("Editor/ScapeOptions/NonPassability",pxCheckBoxNonPassability^.GetCheckMark().ToString());
		return(true);
	endproc;
	
	proc void EnablePassability(bool p_bParam);
		var bool bTemp;
		if(m_sNonPassability=="true")then
			bTemp=true;
		else
			bTemp=false;
		endif;
		
		CLevelEditorWrap.ShowPassability(p_bParam,bTemp);
		if(p_bParam)then
			m_sPassability="true";
		else
			m_sPassability="false";
		endif;
	endproc;
	
	proc void EnableNonPassability(bool p_bParam);
		var bool bTemp;
		if(m_sPassability=="true")then
			bTemp=true;
		else
			bTemp=false;
		endif;
		CLevelEditorWrap.ShowPassability(bTemp,p_bParam);
		if(p_bParam)then
			m_sNonPassability="true";
		else
			m_sNonPassability="false";
		endif;
	endproc;
	
endclass;