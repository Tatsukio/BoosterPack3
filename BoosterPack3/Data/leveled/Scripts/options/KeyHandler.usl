class CKeyHandler;
	static var ^CKeyHandler					ms_pxCKeyH;
	var array string						m_asKeyConvert;
	var ^CDesktop							m_pxDesktop;
	
	var array string						m_asShortcuts;
	
	export constructor()
		m_pxDesktop=CClientWrap.GetDesktop();
		InitKeyConverter();
		CheckUserKeys();
		InitalizeShortcuts();
	endconstructor;
	
	export destructor() 
		
	enddestructor;
	
	proc void CheckUserKeys();
		var CPropDB	xDB;		
		if(!xDB.Load(CSettings.GetUserSettingsDir()+"UserKeys.cfg"))then			
			if(xDB.Load(CLevelEditorWrap.GetUrsRelPath()+"/Data/LevelEd/Scripts/options/Keys.srf"))then
				xDB.Save(CSettings.GetUserSettingsDir()+"UserKeys.cfg");
			else
				KLog.LogError("KeyHandler",CLevelEditorWrap.GetUrsRelPath()+"/Data/LevelEd/Scripts/options/Keys.srf"+" could not be opened!");
			endif;
		else
			var CPropDB	xDefaultKeys;			
			xDefaultKeys.Load(CLevelEditorWrap.GetUrsRelPath()+"/Data/LevelEd/Scripts/options/Keys.srf");
			var ^CPropDB.CNode pxRoot=^(xDefaultKeys.GetRoot());
			var ^CPropDB.CNode pxShortcuts=^((pxRoot^)[0]);
			var int iDefaultKeys=pxShortcuts^.NumSubs();
			
			pxRoot=^(xDB.GetRoot());
			pxShortcuts=^((pxRoot^)[0]);
			var int iUserKeys=pxShortcuts^.NumSubs();
			//Check if new shortcuts have been added
			if(iDefaultKeys!=iUserKeys)then
			
			endif;
		endif;
	endproc;
	
	export proc void InitalizeShortcuts()
		var CPropDB	xDB;		
		if(xDB.Load(CSettings.GetUserSettingsDir()+"UserKeys.cfg"))then
			var ^CPropDB.CNode pxRoot=^(xDB.GetRoot());
			var ^CPropDB.CNode pxShortcuts=^((pxRoot^)[0]);
			var int i,j;
			for(i=0)cond(i<pxShortcuts^.NumSubs())iter(i++)do
				var ^CPropDB.CNode pxEntry=^((pxShortcuts^)[i]);
				var string sEntry=pxEntry^.Value();
				sEntry.Remove(' ');
				if(sEntry!="")then
					if(CClientWrap.GetDesktop()^.AddAccelerator(sEntry))then
						m_asShortcuts.AddEntry(sEntry);
					else
						//KLog.LogError("KeyHandler","Kacke!");
					endif;	
				endif;
			endfor;
		else
			KLog.LogError("KeyHandler",CLevelEditorWrap.GetUrsRelPath()+"/Data/LevelEd/Scripts/options/Keys.srf"+" could not be opened!");
		endif;	
	endproc;
	
	export proc void DeleteAccelerators();
		m_pxDesktop^.DeleteAllAccelerators();
	endproc;

	export proc bool UpdateAccelerators();
		InitalizeShortcuts();
		return(true);
	endproc;	
	
	export proc bool AddToolTip(^CWindow p_pxCWindow,string p_sCommand,string p_sToolTip)
		var int i;
		var string sKey;
		var string sModifier;
		var string sShortcut;
		for(i=0)cond(i<m_asShortcuts.NumEntries())iter(i++)do
			var string sEntry=m_asShortcuts[i];
			if(sEntry.Find(p_sCommand)!=(-1))then
				sKey=sEntry.Left(sEntry.Find(','));
				sModifier=sEntry.Mid(sEntry.Find(',')+1,(sEntry.FindRev(',')+1)-sEntry.Find(',')-2);
				sModifier=ConvertKey(sModifier);
			endif;
			sShortcut=" ("+sModifier+" - "+sKey+")";
		endfor;
		p_pxCWindow^.SetToolTipText(p_sToolTip+sShortcut);
		return(true);
	endproc;
	
		
	export proc bool InitKeyConverter()
		m_asKeyConvert.AddEntry("BACKSPACE,BS");
		m_asKeyConvert.AddEntry("NONE,-1");
		m_asKeyConvert.AddEntry("SHIFT,Shift");
		m_asKeyConvert.AddEntry("TAB,Tab");
		m_asKeyConvert.AddEntry("CONTROL,Ctrl");
		m_asKeyConvert.AddEntry("RETURN,Return");
		m_asKeyConvert.AddEntry("ALT,Alt");
		m_asKeyConvert.AddEntry("ESC,Esc");
		m_asKeyConvert.AddEntry("SPACE,Space");
		m_asKeyConvert.AddEntry("PAGEUP,PgUp");
		m_asKeyConvert.AddEntry("PAGEDOWN,PgDown");
		m_asKeyConvert.AddEntry("END,End");
		m_asKeyConvert.AddEntry("HOME,Home");
		m_asKeyConvert.AddEntry("LEFT,Left");
		m_asKeyConvert.AddEntry("RIGHT,Right");
		m_asKeyConvert.AddEntry("UP,Up");
		m_asKeyConvert.AddEntry("DOWN,Down");
		m_asKeyConvert.AddEntry("PRINT,Print");
		m_asKeyConvert.AddEntry("INSERT,Ins");
		m_asKeyConvert.AddEntry("DELETE,Del");
		m_asKeyConvert.AddEntry("NUMPAD0,Num0");
		m_asKeyConvert.AddEntry("NUMPAD1,Num1");
		m_asKeyConvert.AddEntry("NUMPAD2,Num2");
		m_asKeyConvert.AddEntry("NUMPAD3,Num3");
		m_asKeyConvert.AddEntry("NUMPAD4,Num4");
		m_asKeyConvert.AddEntry("NUMPAD5,Num5");
		m_asKeyConvert.AddEntry("NUMPAD6,Num6");
		m_asKeyConvert.AddEntry("NUMPAD7,Num7");
		m_asKeyConvert.AddEntry("NUMPAD8,Num8");
		m_asKeyConvert.AddEntry("NUMPAD9,Num9");
		m_asKeyConvert.AddEntry("MUL,Num*");
		m_asKeyConvert.AddEntry("ADD,Num+");
		m_asKeyConvert.AddEntry("SUB,Num-");
		m_asKeyConvert.AddEntry("DECIMALPAD,Num,");
		m_asKeyConvert.AddEntry("COMMA,,");
		m_asKeyConvert.AddEntry("DIV,/");
		m_asKeyConvert.AddEntry("CLEAR,Clear");
		m_asKeyConvert.AddEntry("PAUSE,Pause");
		m_asKeyConvert.AddEntry("CONTROL|SHIFT,Ctrl+Shift");
		m_asKeyConvert.AddEntry("CONTROL|ALT,Ctrl+Alt");
		m_asKeyConvert.AddEntry("SHIFT|ALT,Shift+Alt");
		m_asKeyConvert.AddEntry("!,Shift+1");
		m_asKeyConvert.AddEntry("\",Shift+2");
		m_asKeyConvert.AddEntry("§,Shift+3");
		m_asKeyConvert.AddEntry("$,Shift+4");
		m_asKeyConvert.AddEntry("%,Shift+5");
		m_asKeyConvert.AddEntry("&,Shift+6");
		m_asKeyConvert.AddEntry("/,Shift+7");
		m_asKeyConvert.AddEntry("(,Shift+8");
		m_asKeyConvert.AddEntry("),Shift+9");
		m_asKeyConvert.AddEntry("=,Shift+0");
		return(true);
	endproc;
	
	export proc string ConvertKey(string p_sKey)
		var int idx;
		for(idx=0)cond(idx<m_asKeyConvert.NumEntries())iter(idx++)do
			if(p_sKey==SplitKeyToKey(m_asKeyConvert[idx]))then
				return(SplitKeyToModify(m_asKeyConvert[idx]));
			endif;
		endfor;
		return(p_sKey);
	endproc;
	
	export proc string SplitKeyToKey(string p_sKey)
		p_sKey = p_sKey.Left(p_sKey.Find(','));
		return(p_sKey);
	endproc;
	
	export proc string SplitKeyToModify(string p_sKey);
		p_sKey = p_sKey.Right(p_sKey.GetLength()-(p_sKey.FindRev(',')+1));
		return(p_sKey);
	endproc;
	
	export static proc ref CKeyHandler Get()
		if (ms_pxCKeyH==null)then
			ms_pxCKeyH=new CKeyHandler;
		endif;
		return(ms_pxCKeyH^);
	endproc;
	
	export static proc void ShutStatic()
		delete ms_pxCKeyH;
	endproc;
	
endclass;
