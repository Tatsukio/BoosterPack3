class CFXSettings inherit CEnhancedFrameWindow;

	var color m_xDOT, m_xBlend;
	var real m_fBlendFactor; 
	var ^CDesktop m_pxDesktop;

	export constructor()

		if(!InitFromResource("options/FXSettings","FXSettings")) then
			CLevelEditorWrap.LogError("UI.FXSettings","InitFromResource failed");
			return;
		endif;

		LoadPosition("FXSettings");

		var ^CSlider pxSlider;

		pxSlider = cast<CSlider>(GetControl("RedDOT"));
		pxSlider^.m_xOnChange = OnColorChange;
		pxSlider = cast<CSlider>(GetControl("GreenDOT"));
		pxSlider^.m_xOnChange = OnColorChange;
		pxSlider = cast<CSlider>(GetControl("BlueDOT"));
		pxSlider^.m_xOnChange = OnColorChange;

		pxSlider = cast<CSlider>(GetControl("RedBlend"));
		pxSlider^.m_xOnChange = OnColorChange;
		pxSlider = cast<CSlider>(GetControl("GreenBlend"));
		pxSlider^.m_xOnChange = OnColorChange;
		pxSlider = cast<CSlider>(GetControl("BlueBlend"));
		pxSlider^.m_xOnChange = OnColorChange;

		pxSlider = cast<CSlider>(GetControl("BlendFactor"));
		pxSlider^.m_xOnChange = OnColorChange;
		
		

		var ^CButton pxBtn = cast<CButton>(GetControl("Save"));
		pxBtn^.m_xOnClick = OnSave;
		pxBtn = cast<CButton>(GetControl("Cancel"));
		pxBtn^.m_xOnClick = OnCancel;
		pxBtn = cast<CButton>(GetControl("GetCurrent"));
		pxBtn^.m_xOnClick = GetValues;

		var ^CCheckBox pxBox = cast<CCheckBox>(GetControl("Enable"));
		pxBox^.m_xOnStateChange = OnEnabled;

		m_pxDesktop=CClientWrap.GetDesktop();

	endconstructor;




	proc bool OnBlendFactorChange()
		var ^CSlider pxSlider;
		return true;
	endproc;

	proc bool OnSave()
	
		var ^CSlider pxSlider;
		pxSlider = cast<CSlider>(GetControl("RedDOT"));
		var int iRed = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("GreenDOT"));
		var int iGreen = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("BlueDOT"));
		var int iBlue = pxSlider^.GetSliderPos();
		
		var color xCol;
		xCol.SetRed(iRed);
		xCol.SetGreen(iGreen);
		xCol.SetBlue(iBlue);
		xCol.SetAlpha(255);
		
		m_xDOT = xCol;
		
		pxSlider = cast<CSlider>(GetControl("RedBlend"));
		iRed = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("GreenBlend"));
		iGreen = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("BlueBlend"));
		iBlue = pxSlider^.GetSliderPos();

		xCol.SetRed(iRed);
		xCol.SetGreen(iGreen);
		xCol.SetBlue(iBlue);
		xCol.SetAlpha(255);

		m_xBlend = xCol;
		
		pxSlider = cast<CSlider>(GetControl("BlendFactor"));
		m_fBlendFactor = (pxSlider^.GetSliderPos().ToReal()/1000.0);

		var ^CEnhancedTGADialog pxTmp = new CEnhancedTGADialog(1,"skygradient.tga");
		pxTmp^.ClearFilters();
		pxTmp^.AddFilter("Skygradients","*.tga");
		pxTmp^.m_xReturnFileString=OnReturnSaveString;
		m_pxDesktop^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp, true);
		CWindowMgr.Get().SetModal(pxTmp);
	
		return true;
		
	endproc;

	proc bool OnReturnSaveString(string p_sFileString);
		CLevelEditorWrap.GetSkyMgr().SaveSkyColors(p_sFileString.Mid(p_sFileString.FindRev('/')+1));
		return(true);
	endproc;


	proc bool OnCancel()
		SetValues();
		return true;
	endproc;

	proc bool OnNothing()
		return true;
	endproc;

	proc bool OnEnabled()
		var ^CCheckBox pxBox = cast<CCheckBox>(GetControl("Enable"));
		var bool bEnabled = pxBox^.GetCheckMark();
		if(bEnabled)then
			CVisFXManager.FXBlooming.Enable(bEnabled);
		endif;
		return true;
	endproc;
	
	proc bool GetValues()

		CVisFXManager.FXBlooming.GetCurrentValues(m_xDOT,m_xBlend,m_fBlendFactor);
		SetValues();
		return true;

	endproc;
	
	proc void SetValues()

		var ^CSlider pxSlider;
		pxSlider = cast<CSlider>(GetControl("RedDOT"));
		pxSlider^.SetSliderPos(m_xDOT.GetRed());
		pxSlider = cast<CSlider>(GetControl("GreenDOT"));
		pxSlider^.SetSliderPos(m_xDOT.GetGreen());
		pxSlider = cast<CSlider>(GetControl("BlueDOT"));
		pxSlider^.SetSliderPos(m_xDOT.GetBlue());

		pxSlider = cast<CSlider>(GetControl("RedBlend"));
		pxSlider^.SetSliderPos(m_xBlend.GetRed());
		pxSlider = cast<CSlider>(GetControl("GreenBlend"));
		pxSlider^.SetSliderPos(m_xBlend.GetGreen());
		pxSlider = cast<CSlider>(GetControl("BlueBlend"));
		pxSlider^.SetSliderPos(m_xBlend.GetBlue());

		var ^CPane pxPane = cast<CPane>(GetControl("DOT_Color"));
		pxPane^.SetColor(m_xDOT);
		pxPane = cast<CPane>(GetControl("Blend_Color"));
		pxPane^.SetColor(m_xBlend);


		pxSlider = cast<CSlider>(GetControl("BlendFactor"));
		pxSlider^.SetSliderPos((m_fBlendFactor*1000.0).ToInt());

	endproc;

	proc bool OnColorChange()
	
		var ^CSlider pxSlider;
		pxSlider = cast<CSlider>(GetControl("RedDOT"));
		var int iRed = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("GreenDOT"));
		var int iGreen = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("BlueDOT"));
		var int iBlue = pxSlider^.GetSliderPos();
		
		var ^CPane pxPane = cast<CPane>(GetControl("DOT_Color"));
		var color xColDOT;
		xColDOT.SetRed(iRed);
		xColDOT.SetGreen(iGreen);
		xColDOT.SetBlue(iBlue);
		xColDOT.SetAlpha(255);
		
		pxPane^.SetColor(xColDOT);
		
		pxSlider = cast<CSlider>(GetControl("RedBlend"));
		iRed = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("GreenBlend"));
		iGreen = pxSlider^.GetSliderPos();
		pxSlider = cast<CSlider>(GetControl("BlueBlend"));
		iBlue = pxSlider^.GetSliderPos();
		
		pxPane = cast<CPane>(GetControl("Blend_Color"));
		var color xColBlend;
		xColBlend.SetRed(iRed);
		xColBlend.SetGreen(iGreen);
		xColBlend.SetBlue(iBlue);
		xColBlend.SetAlpha(255);

		pxPane^.SetColor(xColBlend);
		
		pxSlider = cast<CSlider>(GetControl("BlendFactor"));
		var real fFactor = (pxSlider^.GetSliderPos().ToReal()/1000.0);

		CVisFXManager.FXBlooming.SetCurrentValues(xColDOT,xColBlend,fFactor);
		
		return true;
	endproc;
	
endclass;