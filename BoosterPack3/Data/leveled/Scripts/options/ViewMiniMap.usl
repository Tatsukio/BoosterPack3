class CViewMiniMap inherit CEnhancedFrameWindow;

	var ^CMiniMap 		m_pxMiniMap;
	var ^CCheckBox		m_pxLayerScape;
	var ^CCheckBox		m_pxLayerResource;
	var ^CCheckBox		m_pxLayerForest;
	var ^CCheckBox		m_pxLayerItems;
	var ^CCheckBox		m_pxLayerBuildings;
	var ^CCheckBox		m_pxLayerUnits;
	

	export constructor()

		if(!InitFromResource("options/ViewMiniMap","MiniMap")) then
			CLevelEditorWrap.LogError("UI.ViewMiniMap","InitFromResource failed");
			return;
		endif;		
		SetAttrib("style","");
		//SetSize(230,230);

		m_pxMiniMap=^(CClientWrap.GetUIMgr().GetMiniMap());
		if(m_pxMiniMap!=null)then
			//m_pxMiniMap^.SetColors(CClientWrap.GetUrsRelPath() + "/Data/Base/Texture/Scape/Northland/minimap_colors.tga");
			AddChildWithLayout(m_pxMiniMap,"MiniMapContainer");
		endif;
		LoadPosition("MiniMap");
		var ^CDesktop	pxDesktop=CClientWrap.GetDesktop();		
		SetPos(pxDesktop^.GetWidth()-GetWidth(),pxDesktop^.GetHeight()-GetHeight()-20);
		m_pxMiniMap^.SetSize(230,230);
		m_pxMiniMap^.SetDestinationSize({230,230});
		m_pxMiniMap^.SetBorderWidth(0);
		
		m_pxLayerScape=cast<CCheckBox>(GetControl("LayerScape"));
		m_pxLayerResource=cast<CCheckBox>(GetControl("LayerResource"));
		m_pxLayerForest=cast<CCheckBox>(GetControl("LayerForest"));
		m_pxLayerItems=cast<CCheckBox>(GetControl("LayerItems"));
		m_pxLayerBuildings=cast<CCheckBox>(GetControl("LayerBuildings"));
		m_pxLayerUnits=cast<CCheckBox>(GetControl("LayerUnits"));
		
		var bitset dwLayers=m_pxMiniMap^.GetEnabledLayers();
		m_pxLayerScape^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Scape)!=0h)then
			m_pxLayerScape^.SetChecked(1);
		endif;
		m_pxLayerResource^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Resources)!=0h)then
			m_pxLayerResource^.SetChecked(1);
		endif;
		m_pxLayerForest^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Forest)!=0h)then
			m_pxLayerForest^.SetChecked(1);
		endif;
		m_pxLayerItems^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Items)!=0h)then
			m_pxLayerItems^.SetChecked(1);
		endif;
		m_pxLayerBuildings^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Buildings)!=0h)then
			m_pxLayerBuildings^.SetChecked(1);
		endif;
		m_pxLayerUnits^.SetChecked(0);
		if((dwLayers&CMiniMap.LT_Units)!=0h)then
			m_pxLayerUnits^.SetChecked(1);
		endif;
		
		m_pxLayerScape^.m_xOnStateChange=OnChangeLayers;
		m_pxLayerResource^.m_xOnStateChange=OnChangeLayers;
		m_pxLayerForest^.m_xOnStateChange=OnChangeLayers;
		m_pxLayerItems^.m_xOnStateChange=OnChangeLayers;
		m_pxLayerBuildings^.m_xOnStateChange=OnChangeLayers;
		m_pxLayerUnits^.m_xOnStateChange=OnChangeLayers;
	endconstructor;

	export destructor()
		if(m_pxMiniMap!=null)then
			RemoveChild(m_pxMiniMap);
		endif;
	enddestructor;

	proc bool OnChangeLayers()
		var bitset dwLayers=0h;
		if(m_pxLayerScape^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Scape;
		endif;
		if(m_pxLayerResource^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Resources;
		endif;
		if(m_pxLayerForest^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Forest;
		endif;
		if(m_pxLayerItems^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Items;
		endif;
		if(m_pxLayerBuildings^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Buildings;
		endif;
		if(m_pxLayerUnits^.GetCheckMark())then
			dwLayers|=CMiniMap.LT_Units;
		endif;
		m_pxMiniMap^.EnableLayers(dwLayers);
		return true;
	endproc;
	/*export proc void SetManualUpdate(bool p_bParam)
		if(m_pxMiniMap!=null)then
			m_pxMiniMap^.SetUpdateScapeManual(true);
		endif;
	endproc;
	*/

	export proc void Invalidate()
		if(m_pxMiniMap!=null)then
			m_pxMiniMap^.Update();
		endif;
	endproc;

endclass;
