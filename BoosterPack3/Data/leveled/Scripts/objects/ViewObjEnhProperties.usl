class CViewObjEnhProperties inherit CEnhancedFrameWindow

	var CClntHndl 		m_xAssotiatedObj;
	var ^CRegionBase 	m_pxRegion;

	export constructor(ref CClntHndl p_rxAssotiatedObj)

		m_xAssotiatedObj 	= p_rxAssotiatedObj;
		var ^CObj pxObj 	= m_xAssotiatedObj.GetObj();
		if(pxObj==null)then return;endif;
		var CFourCC xType	=pxObj^.GetType();
		if(xType=="ZONE")then
			if(!InitFromResource("objects/ViewObjEnhProperties","Props_ZONE")) then
				CLevelEditorWrap.LogError("UI.ViewObjEnhProperties","InitFromResource failed");
				return;
			endif;
			var ^CToggleButton pxAdd		=	cast<CToggleButton>(GetControl("CGroupBoxRegions/Btn_Add"));
			var ^CToggleButton pxClear		=	cast<CToggleButton>(GetControl("CGroupBoxRegions/Btn_Clear"));
			var ^CToggleButton pxApply		=	cast<CToggleButton>(GetControl("CGroupBoxRegions/Btn_Apply"));
			pxAdd^.m_xOnClick			=	AddSubRegion;
			pxClear^.m_xOnClick			=	ClearRegion;
			pxApply^.m_xOnClick			=	Apply;
			pxAdd^.SetGrouped(true);
			pxClear^.SetGrouped(true);
			pxApply^.SetGrouped(true);

			var ^CRegionMgrClient pxRMgr = CClientWrap.GetRegionMgr();

			var int i;
			var bool bRegionExists=false;
			//checks, if region already exists
			for(i=0)cond(i<pxRMgr^.NumRegions())iter(i++)do
				if((pxRMgr^)[i]^.GetName()==pxObj^.GetName())then
					m_pxRegion = (pxRMgr^)[i];
					bRegionExists=true;
					CLevelEditorWrap.LogInfo("UI.ViewObjEnhProperties","Region already exists, using "+pxObj^.GetName());
				endif;
			endfor;
			//If not found, create new region
			if(!bRegionExists)then
//				m_pxRegion=pxRMgr^.CreateRegion(pxObj^.GetName());
				CLevelEditorWrap.LogInfo("UI.ViewObjEnhProperties","New region created: "+pxObj^.GetName());
			endif;

			//show subregions...
			var procref<void> xProcRefRender=CMainController.Get().GetRegionCtrl().Render;
			CClientWrap.SetProcRefRender(xProcRefRender);
//			CMainController.Get().GetRegionCtrl().SetRegion(m_pxRegion);

		endif;
		LoadPosition("EnhancedObjectProperties");
		SetVisible(true);
	endconstructor;

	proc bool AddSubRegion()
		var ^CToggleButton pxAdd		=	cast<CToggleButton>(GetControl("CGroupBoxRegions/Btn_Add"));
		if(pxAdd^.GetToggleButtonState())then
			CMainController.Get().ActivateRegionCtrl();
		else
			CMainController.Get().SetState(0);
		endif;
		return(true);
	endproc;

	proc bool ClearRegion()
		var ^CToggleButton pxClear		=	cast<CToggleButton>(GetControl("CGroupBoxRegions/Btn_Clear"));
		pxClear^.SetToggleButtonState(false);
		return(true);
	endproc;

	proc bool Apply()
		CMainController.Get().SetState(0);
		//TODO
		//CMainController.Get().GetRegionCtrl().SetState(-1);
		OnClose();
		return(true);
	endproc;

endclass;