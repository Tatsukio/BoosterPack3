class CViewObjTransform inherit CEnhancedFrameWindow

	class CCoordTriple inherit CWindow

		var ^CStaticCtrl			m_pxCaption;
		var ^CSpinCtrlNumber		m_pxCtrlX,m_pxCtrlY,m_pxCtrlZ;
		export var procref<bool>	m_xOnChange;

		export constructor()
			if(!InitFromResource("objects/ViewObjTransform","CoordTriple")) then
				CLevelEditorWrap.LogError("UI.ViewObjTransform","CCoordTripple.InitFromResource failed");
				return;
			endif;

			m_pxCaption=cast<CStaticCtrl>(GetControl("Caption"));

			m_pxCtrlX=cast<CSpinCtrlNumber>(GetControl("CtrlX"));
			m_pxCtrlX^.SetValue(0.0);
			m_pxCtrlX^.SetStyle(0);
			m_pxCtrlX^.m_xOnChange=OnEditChanged;
			m_pxCtrlY=cast<CSpinCtrlNumber>(GetControl("CtrlY"));
			m_pxCtrlY^.SetValue(0.0);
			m_pxCtrlY^.SetStyle(0);
			m_pxCtrlY^.m_xOnChange=OnEditChanged;
			m_pxCtrlZ=cast<CSpinCtrlNumber>(GetControl("CtrlZ"));
			m_pxCtrlZ^.SetValue(0.0);
			m_pxCtrlZ^.SetStyle(0);
			m_pxCtrlZ^.m_xOnChange=OnEditChanged;
		endconstructor;

		export proc void SetCaption(string p_sCaption)
			m_pxCaption^.SetText(p_sCaption);
		endproc;

		export proc void SetLimits(real p_fMinX,real p_fMaxX,real p_fMinY,real p_fMaxY,real p_fMinZ,real p_fMaxZ,real p_fStep)
			m_pxCtrlX^.m_xOnChange.Clear();
			m_pxCtrlY^.m_xOnChange.Clear();
			m_pxCtrlZ^.m_xOnChange.Clear();

			m_pxCtrlX^.SetLimits(p_fMinX,p_fMaxX,p_fStep);
			m_pxCtrlY^.SetLimits(p_fMinY,p_fMaxY,p_fStep);
			m_pxCtrlZ^.SetLimits(p_fMinZ,p_fMaxZ,p_fStep);

			m_pxCtrlX^.m_xOnChange=OnEditChanged;
			m_pxCtrlY^.m_xOnChange=OnEditChanged;
			m_pxCtrlZ^.m_xOnChange=OnEditChanged;
		endproc;

		export proc void SetX(real p_fValue)
			m_pxCtrlX^.m_xOnChange.Clear();
			m_pxCtrlX^.SetValue(p_fValue);
			m_pxCtrlX^.m_xOnChange=OnEditChanged;
		endproc;
		export proc real GetX()
			return m_pxCtrlX^.GetValueFloat();
		endproc;
		export proc void SetY(real p_fValue)
			m_pxCtrlY^.m_xOnChange.Clear();
			m_pxCtrlY^.SetValue(p_fValue);
			m_pxCtrlY^.m_xOnChange=OnEditChanged;
		endproc;
		export proc real GetY()
			return m_pxCtrlY^.GetValueFloat();
		endproc;
		export proc void SetZ(real p_fValue)
			m_pxCtrlZ^.m_xOnChange.Clear();
			m_pxCtrlZ^.SetValue(p_fValue);
			m_pxCtrlZ^.m_xOnChange=OnEditChanged;
		endproc;
		export proc real GetZ()
			return m_pxCtrlZ^.GetValueFloat();
		endproc;

		export proc void SetValues(real p_fX,real p_fY,real p_fZ)
			SetX(p_fX);SetY(p_fY);SetZ(p_fZ);
		endproc;

		proc bool OnEditChanged()
			if(!m_xOnChange.IsNull())then
				m_xOnChange.Call();
			endif;
			return true;
		endproc;
	endclass;

	var ^CCoordTriple	m_pxMoveAbs,m_pxMoveRel,m_pxRotateSel,m_pxRotateObj;

	export constructor()
		if(!InitFromResource("objects/ViewObjTransform","ObjTransform")) then
			CLevelEditorWrap.LogError("UI.ViewObjTransform","InitFromResource failed");
			return;
		endif;

		m_pxMoveAbs=cast<CCoordTriple>(GetControl("GroupMove/Absolute"));
		m_pxMoveAbs^.SetCaption(CLocalizer.Get().Translate("_ViewObjTransform_CGB1/CSC4"));
		m_pxMoveAbs^.SetLimits(0.0,5000.0,0.0,5000.0,0.0,500.0,0.01);
		m_pxMoveAbs^.m_xOnChange=OnMoveAbs;
		m_pxMoveRel=cast<CCoordTriple>(GetControl("GroupMove/Relative"));
		m_pxMoveRel^.SetCaption(CLocalizer.Get().Translate("_ViewObjTransform_CGB1/CSC8"));
		m_pxMoveRel^.SetLimits(0.0,5000.0,0.0,5000.0,0.0,500.0,0.01);
		m_pxMoveRel^.m_xOnChange=OnMoveOff;
		m_pxRotateSel=cast<CCoordTriple>(GetControl("GroupRotate/Selection"));
		m_pxRotateSel^.SetCaption(CLocalizer.Get().Translate("_ViewObjTransform_CGB2/CSC4"));
		m_pxRotateSel^.SetLimits(-180.0,180.0,-180.0,180.0,-180.0,180.0,1.0);
		m_pxRotateSel^.m_xOnChange=OnRotateSelection;
		m_pxRotateObj=cast<CCoordTriple>(GetControl("GroupRotate/Objects"));
		m_pxRotateObj^.SetCaption(CLocalizer.Get().Translate("_ViewObjTransform_CGB2/CSC8"));
		m_pxRotateObj^.SetLimits(-180.0,180.0,-180.0,180.0,-180.0,180.0,1.0);
		m_pxRotateObj^.m_xOnChange=OnRotateObject;

    	LoadPosition("ObjTransform");
    	OnSelectionChanged();
	endconstructor;

	//---------------------------------SelectionUpdate-----------------------------------------
	export proc void OnSelectionChanged()
		var vec3 vPos=CClientWrap.GetSelection().GetPos();
		m_pxMoveAbs^.SetValues(vPos.GetX(),vPos.GetY(),vPos.GetZ());
		m_pxMoveRel^.SetValues(0.0,0.0,0.0);
		m_pxRotateSel^.SetValues(0.0,0.0,0.0);
		m_pxRotateObj^.SetValues(0.0,0.0,0.0);
	endproc;

	proc void MakeUndoStep(^CObjSelection p_pxSel)
		if(p_pxSel==null)then return; endif;
		CLevelEditorWrap.GetUndoBuffer().BeginStep();
		CLevelEditorWrap.GetUndoBuffer().Add2Step(new CObjUndoEntry(p_pxSel^));
		CLevelEditorWrap.GetUndoBuffer().AcceptStep("Obj transform");
	endproc;

	//---------------------------------Move-----------------------------------------------------
	proc bool OnMoveAbs()
		ObjMove(m_pxMoveAbs^.GetX(),m_pxMoveAbs^.GetY(),m_pxMoveAbs^.GetZ());
		OnSelectionChanged();
		return(true);
	endproc;

	proc bool OnMoveOff()
		//	Move = Absolut + Offset
		ObjMove(m_pxMoveAbs^.GetX()+m_pxMoveRel^.GetX(),m_pxMoveAbs^.GetY()+m_pxMoveRel^.GetY(),m_pxMoveAbs^.GetZ()+m_pxMoveRel^.GetZ());
		OnSelectionChanged();
		return(true);
	endproc;

	//	Object Move
	proc bool ObjMove(real p_fMoveX, real p_fMoveY, real p_fMoveZ)
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		MakeUndoStep(pxSel);
		var vec3 vPos;
		vPos.SetX(p_fMoveX);
		vPos.SetY(p_fMoveY);
		vPos.SetZ(p_fMoveZ);
		//Set New Position
		pxSel^.SetPos(vPos);
		pxSel^.UpdatePos();
		return(true);
	endproc;

	//---------------------------------Rotation--------------------------------------------------
	proc bool OnRotateSelection()
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		MakeUndoStep(pxSel);
		var vec3 vRot;
		vRot.SetX(Math.Rad(m_pxRotateSel^.GetX()));
		vRot.SetY(Math.Rad(m_pxRotateSel^.GetY()));
		vRot.SetZ(Math.Rad(m_pxRotateSel^.GetZ()));
		//Rotation
		pxSel^.Rotate(vRot);
		pxSel^.UpdateRot();
		OnSelectionChanged();
		return(true);
	endproc;


	proc bool OnRotateObject()
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		MakeUndoStep(pxSel);
		var vec3 vRot;
		vRot.SetX(Math.Rad(m_pxRotateObj^.GetX()));
		vRot.SetY(Math.Rad(m_pxRotateObj^.GetY()));
		vRot.SetZ(Math.Rad(m_pxRotateObj^.GetZ()));
		var int i,iC=pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var CClntHndl xObj=(pxSel^)[i];
			xObj.GetObj()^.Rotate(vRot);
		endfor;
		OnSelectionChanged();
		return(true);
	endproc;
endclass;
