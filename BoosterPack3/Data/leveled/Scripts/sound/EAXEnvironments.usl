class CMyEAXEnvironment inherit CEAXEnvironment

endclass;



class CEAXEnvironments inherit CEnhancedFrameWindow

	var ^CStaticCtrl		m_pxEAXPresetLabel, m_pxEnvironmentSizeLabel, m_pxEnvironmentDiffusionLabel, m_pxRoomLabel,
							m_pxRoomHFLabel, m_pxDecayTimeLabel, m_pxDecayHFRatioLabel, m_pxReflectionsLabel, m_pxReflectionsDelayLabel,
							m_pxReverbLabel, m_pxReverbDelayLabel, m_pxRoomRolloffLabel, m_pxAirAbsorbtionLabel;

	var ^CSpinCtrlNumber	m_pxEnvironmentSize, m_pxEnvironmentDiffusion, m_pxRoom,
							m_pxRoomHF, m_pxDecayTime, m_pxDecayHFRatio, m_pxReflections, m_pxReflectionsDelay,
							m_pxReverb, m_pxReverbDelay, m_pxRoomRolloff, m_pxAirAbsorbtion;

	var ^CSlider			m_pxEnvironmentSizeSlider, m_pxEnvironmentDiffusionSlider, m_pxRoomSlider,
							m_pxRoomHFSlider, m_pxDecayTimeSlider, m_pxDecayHFRatioSlider, m_pxReflectionsSlider, m_pxReflectionsDelaySlider,
							m_pxReverbSlider, m_pxReverbDelaySlider, m_pxRoomRolloffSlider, m_pxAirAbsorbtionSlider;

	var ^CCheckBox			m_pxCheckScaleDecayTime, m_pxCheckScaleReflections, m_pxCheckScaleReflectionsDelay,
							m_pxCheckScaleReverb, m_pxCheckScaleReverbDelay, m_pxCheckHFDecayLimit;

	var ^CDropList			m_pxEnvironment;

	var array ^CSpinCtrlSliderCouple		m_apxCouples;
	var bool 				m_bChangeEnabled;

	export constructor()
		if(!InitFromResource("sound/EAXEnvironments","EAXEnvironments")) then
			CLevelEditorWrap.LogError("UI.EAXEnvironments","InitFromResource failed");
			return;
		endif;

		m_pxEAXPresetLabel 				= cast<CStaticCtrl>(GetControl("EAXPresetLabel"));
		m_pxEnvironmentSizeLabel 		= cast<CStaticCtrl>(GetControl("Scroller/EnvironmentSizeLabel"));
		m_pxEnvironmentDiffusionLabel 	= cast<CStaticCtrl>(GetControl("Scroller/EnvironmentDiffusionLabel"));
		m_pxRoomLabel 					= cast<CStaticCtrl>(GetControl("Scroller/RoomLabel"));
		m_pxRoomHFLabel					= cast<CStaticCtrl>(GetControl("Scroller/RoomHFLabel"));
		m_pxDecayTimeLabel 				= cast<CStaticCtrl>(GetControl("Scroller/DecayTimeLabel"));
		m_pxDecayHFRatioLabel 			= cast<CStaticCtrl>(GetControl("Scroller/DecayHFRatioLabel"));
		m_pxReflectionsLabel 			= cast<CStaticCtrl>(GetControl("Scroller/ReflectionsLabel"));
		m_pxReflectionsDelayLabel 		= cast<CStaticCtrl>(GetControl("Scroller/ReflectionsDelayLabel"));
		m_pxReverbLabel 				= cast<CStaticCtrl>(GetControl("Scroller/ReverbLabel"));
		m_pxReverbDelayLabel 			= cast<CStaticCtrl>(GetControl("Scroller/ReverbDelayLabel"));
		m_pxRoomRolloffLabel 			= cast<CStaticCtrl>(GetControl("Scroller/RoomRolloffLabel"));
		m_pxAirAbsorbtionLabel 			= cast<CStaticCtrl>(GetControl("Scroller/AirAbsorbtionLabel"));

		m_pxEnvironmentSize 			= cast<CSpinCtrlNumber>(GetControl("Scroller/EnvironmentSize"));
		m_pxEnvironmentDiffusion 		= cast<CSpinCtrlNumber>(GetControl("Scroller/EnvironmentDiffusion"));
		m_pxRoom 						= cast<CSpinCtrlNumber>(GetControl("Scroller/Room"));
		m_pxRoomHF						= cast<CSpinCtrlNumber>(GetControl("Scroller/RoomHF"));
		m_pxDecayTime 					= cast<CSpinCtrlNumber>(GetControl("Scroller/DecayTime"));
		m_pxDecayHFRatio 				= cast<CSpinCtrlNumber>(GetControl("Scroller/DecayHFRatio"));
		m_pxReflections 				= cast<CSpinCtrlNumber>(GetControl("Scroller/Reflections"));
		m_pxReflectionsDelay 			= cast<CSpinCtrlNumber>(GetControl("Scroller/ReflectionsDelay"));
		m_pxReverb 						= cast<CSpinCtrlNumber>(GetControl("Scroller/Reverb"));
		m_pxReverbDelay 				= cast<CSpinCtrlNumber>(GetControl("Scroller/ReverbDelay"));
		m_pxRoomRolloff 				= cast<CSpinCtrlNumber>(GetControl("Scroller/RoomRolloff"));
		m_pxAirAbsorbtion 				= cast<CSpinCtrlNumber>(GetControl("Scroller/AirAbsorbtion"));

		m_pxEnvironmentSizeSlider 		= cast<CSlider>(GetControl("Scroller/EnvironmentSizeSlider"));
		m_pxEnvironmentDiffusionSlider 	= cast<CSlider>(GetControl("Scroller/EnvironmentDiffusionSlider"));
		m_pxRoomSlider 					= cast<CSlider>(GetControl("Scroller/RoomSlider"));
		m_pxRoomHFSlider				= cast<CSlider>(GetControl("Scroller/RoomHFSlider"));
		m_pxDecayTimeSlider 			= cast<CSlider>(GetControl("Scroller/DecayTimeSlider"));
		m_pxDecayHFRatioSlider 			= cast<CSlider>(GetControl("Scroller/DecayHFRatioSlider"));
		m_pxReflectionsSlider 			= cast<CSlider>(GetControl("Scroller/ReflectionsSlider"));
		m_pxReflectionsDelaySlider 		= cast<CSlider>(GetControl("Scroller/ReflectionsDelaySlider"));
		m_pxReverbSlider 				= cast<CSlider>(GetControl("Scroller/ReverbSlider"));
		m_pxReverbDelaySlider 			= cast<CSlider>(GetControl("Scroller/ReverbDelaySlider"));
		m_pxRoomRolloffSlider 			= cast<CSlider>(GetControl("Scroller/RoomRolloffSlider"));
		m_pxAirAbsorbtionSlider 		= cast<CSlider>(GetControl("Scroller/AirAbsorbtionSlider"));

		m_pxCheckScaleDecayTime 		= cast<CCheckBox>(GetControl("Scroller/CheckScaleDecayTime"));
		m_pxCheckScaleReflections 		= cast<CCheckBox>(GetControl("Scroller/CheckScaleReflections"));
		m_pxCheckScaleReflectionsDelay 	= cast<CCheckBox>(GetControl("Scroller/CheckScaleReflectionsDelay"));
		m_pxCheckScaleReverb 			= cast<CCheckBox>(GetControl("Scroller/CheckScaleReverb"));
		m_pxCheckScaleReverbDelay 		= cast<CCheckBox>(GetControl("Scroller/CheckScaleReverbDelay"));
		m_pxCheckHFDecayLimit 			= cast<CCheckBox>(GetControl("Scroller/CheckHFDecayLimit"));

		m_pxEnvironment					= cast<CDropList>(GetControl("Environment"));

		var ^CScrollWindow pxScroller	= cast<CScrollWindow>(GetControl("Scroller"));
		pxScroller^.SetClientAreaSize({200, 900});

		m_pxEnvironment^.AddItem("Generic");
		m_pxEnvironment^.AddItem("Padded Cell");
		m_pxEnvironment^.AddItem("Room");
		m_pxEnvironment^.AddItem("Bath Room");
		m_pxEnvironment^.AddItem("Living Room");
		m_pxEnvironment^.AddItem("Stone Room");
		m_pxEnvironment^.AddItem("Auditorium");
		m_pxEnvironment^.AddItem("Concert Hall");
		m_pxEnvironment^.AddItem("Cave");
		m_pxEnvironment^.AddItem("Arena");
		m_pxEnvironment^.AddItem("Hangar");
		m_pxEnvironment^.AddItem("Carpeted Hallway");
		m_pxEnvironment^.AddItem("Hallway");
		m_pxEnvironment^.AddItem("Stone Corridor");
		m_pxEnvironment^.AddItem("Alley");
		m_pxEnvironment^.AddItem("Forest");
		m_pxEnvironment^.AddItem("City");
		m_pxEnvironment^.AddItem("Mountains");
		m_pxEnvironment^.AddItem("Quarry");
		m_pxEnvironment^.AddItem("Plain");
		m_pxEnvironment^.AddItem("Parking Lot");
		m_pxEnvironment^.AddItem("Sewer Pipe");
		m_pxEnvironment^.AddItem("Unter Water");
		m_pxEnvironment^.AddItem("Drugged");
		m_pxEnvironment^.AddItem("Dizzy");
		m_pxEnvironment^.AddItem("Psychotic");
		m_pxEnvironment^.AddItem("undefined");

		m_pxEnvironment^.m_xOnChange = OnEnvironmentSelect;

		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxEnvironmentSize, m_pxEnvironmentSizeSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxEnvironmentDiffusion, m_pxEnvironmentDiffusionSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxRoom, m_pxRoomSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxRoomHF, m_pxRoomHFSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxDecayTime, m_pxDecayTimeSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxDecayHFRatio, m_pxDecayHFRatioSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxReflections, m_pxReflectionsSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxReflectionsDelay, m_pxReflectionsDelaySlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxReverb, m_pxReverbSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxReverbDelay, m_pxReverbDelaySlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxRoomRolloff, m_pxRoomRolloffSlider));
		m_apxCouples.AddEntry(new CSpinCtrlSliderCouple(m_pxAirAbsorbtion, m_pxAirAbsorbtionSlider));

		var int i;
		for(i=0)cond(i<m_apxCouples.NumEntries())iter(++i)do
			m_apxCouples[i]^.m_xOnChange = OnChange;
		endfor;

		m_bChangeEnabled = true;

		LoadPosition("EAXEnvironments");
		SetParametersFromSystem();
	endconstructor;

	export destructor()
		var int i;
		for(i=0)cond(i<m_apxCouples.NumEntries())iter(++i)do
			delete m_apxCouples[i];
		endfor;
	enddestructor;


	export proc void SetVisible(bool p_bVisible)
		if(p_bVisible) then
			if(!CLevelEditorWrap.GetAtmoSoundMgr()^.GetEAXSupport()) then
				CMessageBox.MsgBox("Warning", "Your sound card does not support the Environmental Audio Extensions (EAX). \nYou may use this dialogue, but will not receive proper feedback; \ni.e. when you select an environmental preset, you will not see the associated parameters and \nwhen you change the room size you will not see connected paramters change. \nAnd, of course, you will not be able to hear any EAX effects, no matter what you do.\n\nIt is strongly recommended to use this dialogue only on a computer with EAX support!");
			endif;
		endif;

		super.SetVisible(p_bVisible);
	endproc;


	proc bool OnEnvironmentSelect()
		var int i = m_pxEnvironment^.GetSelectedItem();

		if(i != 26) then
			var ^CAtmoSoundMgr pxAtmoMgr = CLevelEditorWrap.GetAtmoSoundMgr();
			pxAtmoMgr^.SetEAXEnvironment(i);
			SetParametersFromSystem();
		else
			OnChange();
		endif;

		return true;
	endproc;


	/**
		querys system for current eax settings and sets all dialogue elements accordingly
	*/
	proc void SetParametersFromSystem()
		var ^CAtmoSoundMgr pxAtmoMgr = CLevelEditorWrap.GetAtmoSoundMgr();
		if(pxAtmoMgr^.GetEAXSupport()) then
			m_bChangeEnabled = false;
			var CMyEAXEnvironment xEnv;
			pxAtmoMgr^.GetEAXEnvironment(^xEnv);
			SetParameters(^xEnv);
			m_bChangeEnabled = true;
		endif;
	endproc;


	proc void SetParameters(^CMyEAXEnvironment p_pxEnv)
		m_pxEnvironment^.Select(p_pxEnv^.m_iEnvironment);
		m_pxEnvironmentSize^.SetValue(p_pxEnv^.m_fEnvironmentSize);
		m_pxEnvironmentDiffusion^.SetValue(p_pxEnv^.m_fEnvironmentDiffusion);
		m_pxRoom^.SetValue(p_pxEnv^.m_iRoom);
		m_pxRoomHF^.SetValue(p_pxEnv^.m_iRoomHF);
		m_pxDecayTime^.SetValue(p_pxEnv^.m_fDecayTime);
		m_pxDecayHFRatio^.SetValue(p_pxEnv^.m_fDecayHFRatio);
		m_pxReflections^.SetValue(p_pxEnv^.m_iReflections);
		m_pxReflectionsDelay^.SetValue(p_pxEnv^.m_fReflectionsDelay);
		m_pxReverb^.SetValue(p_pxEnv^.m_iReverb);
		m_pxReverbDelay^.SetValue(p_pxEnv^.m_fReverbDelay);
		m_pxRoomRolloff^.SetValue(p_pxEnv^.m_fRoomRollOff);
		m_pxAirAbsorbtion^.SetValue(p_pxEnv^.m_fAirAbsorption);

		if(p_pxEnv^.m_bDecayTimeScale) 			then m_pxCheckScaleDecayTime^.SetChecked(1);		else m_pxCheckScaleDecayTime^.SetChecked(0); endif;
		if(p_pxEnv^.m_bReflectionsScale) 		then m_pxCheckScaleReflections^.SetChecked(1);		else m_pxCheckScaleReflections^.SetChecked(0); endif;
		if(p_pxEnv^.m_bReflectionsDelayScale) 	then m_pxCheckScaleReflectionsDelay^.SetChecked(1);	else m_pxCheckScaleReflectionsDelay^.SetChecked(0); endif;
		if(p_pxEnv^.m_bReverbScale)				then m_pxCheckScaleReverb^.SetChecked(1);			else m_pxCheckScaleReverb^.SetChecked(0); endif;
		if(p_pxEnv^.m_bReverbDelayScale)		then m_pxCheckScaleReverbDelay^.SetChecked(1);		else m_pxCheckScaleReverbDelay^.SetChecked(0); endif;
		if(p_pxEnv^.m_bDecayHFLimit)			then m_pxCheckHFDecayLimit^.SetChecked(1);			else m_pxCheckHFDecayLimit^.SetChecked(0); endif
	endproc;


	proc void GetParameters(^CMyEAXEnvironment p_pxEnv)
		p_pxEnv^.m_iEnvironment				= m_pxEnvironment^.GetSelectedItem();
		p_pxEnv^.m_fEnvironmentSize			= m_pxEnvironmentSize^.GetValueFloat();
		p_pxEnv^.m_fEnvironmentDiffusion	= m_pxEnvironmentDiffusion^.GetValueFloat();
		p_pxEnv^.m_iRoom					= m_pxRoom^.GetValueInt();
		p_pxEnv^.m_iRoomHF					= m_pxRoomHF^.GetValueInt();
		p_pxEnv^.m_fDecayTime				= m_pxDecayTime^.GetValueFloat();
		p_pxEnv^.m_fDecayHFRatio			= m_pxDecayHFRatio^.GetValueFloat();
		p_pxEnv^.m_iReflections				= m_pxReflections^.GetValueInt();
		p_pxEnv^.m_fReflectionsDelay		= m_pxReflectionsDelay^.GetValueFloat();
		p_pxEnv^.m_iReverb					= m_pxReverb^.GetValueInt();
		p_pxEnv^.m_fReverbDelay				= m_pxReverbDelay^.GetValueFloat();
		p_pxEnv^.m_fRoomRollOff				= m_pxRoomRolloff^.GetValueFloat();
		p_pxEnv^.m_fAirAbsorption			= m_pxAirAbsorbtion^.GetValueFloat();
		p_pxEnv^.m_bDecayTimeScale			= m_pxCheckScaleDecayTime^.GetCheckMark();
		p_pxEnv^.m_bReflectionsScale		= m_pxCheckScaleReflections^.GetCheckMark();
		p_pxEnv^.m_bReflectionsDelayScale	= m_pxCheckScaleReflectionsDelay^.GetCheckMark();
		p_pxEnv^.m_bReverbScale				= m_pxCheckScaleReverb^.GetCheckMark();
		p_pxEnv^.m_bReverbDelayScale		= m_pxCheckScaleReverbDelay^.GetCheckMark();
		p_pxEnv^.m_bDecayHFLimit			= m_pxCheckHFDecayLimit^.GetCheckMark();
	endproc;



	/**
		settings have changed
	*/
	proc bool OnChange()
		if(m_bChangeEnabled) then
			var CMyEAXEnvironment xEnv;
			GetParameters(^xEnv);

			var ^CAtmoSoundMgr pxAtmoMgr = CLevelEditorWrap.GetAtmoSoundMgr();
			pxAtmoMgr^.SetEAXEnvironment(^xEnv);

			SetParametersFromSystem();
		endif;

		return true;
	endproc;

endclass;


class CSpinCtrlSliderCouple

	export var procref<bool> m_xOnChange;

	var ^CSlider			m_pxSlider;
	var ^CSpinCtrlNumber	m_pxSpinCtrl;

	export constructor(^CSpinCtrlNumber p_pxSpinCtrl, ^CSlider p_pxSlider)
		m_pxSlider		= p_pxSlider;
		m_pxSpinCtrl	= p_pxSpinCtrl;
		m_pxSlider^.m_xOnChange = OnSliderChange;
		m_pxSpinCtrl^.m_xOnChange = OnSpinCtrlChange;
	endconstructor;

	export destructor()
	enddestructor;

	proc bool OnSpinCtrlChange()
		var real fMin, fMax, fStep, fValue;
		m_pxSpinCtrl^.GetLimitsFloat(fMin, fMax, fStep);
		fValue = m_pxSpinCtrl^.GetValueFloat();
		if(fMax-fMin>0.0) then
			var real fSliderPos = (fValue - fMin) / ((fMax - fMin) / 100.0);
			m_pxSlider^.SetSliderPos(Math.Round(fSliderPos).ToInt());
		endif;

		m_xOnChange.Call();
		return true;
	endproc;

	proc bool OnSliderChange()
		var real fMin, fMax, fStep;
		m_pxSpinCtrl^.GetLimitsFloat(fMin, fMax, fStep);
		var int iPos = m_pxSlider^.GetSliderPos();
		var real fVal=fMin + (fMax - fMin) * iPos.ToReal() / 100.0;
		m_pxSpinCtrl^.SetValue(fVal);
		return true;
	endproc;

endclass;