class CAtmoProperties inherit CWindow

	var ^CSpinCtrlNumber 	m_pxPriority, m_pxVolume, m_pxPitch, m_pxMinFadeDist, m_pxMaxFadeDist, m_pxMaxHearingDist,
							m_pxInnerConeAngle, m_pxOuterConeAngle, m_pxConeOutsideVolume;
	var ^CStaticCtrl		m_pxInnerConeAngleLabel, m_pxOuterConeAngleLabel, m_pxConeOutsideVolumeLabel;
	var ^CCheckBox			m_pxCheckDirectional, m_pxCheckDayEnable, m_pxCheckNightEnable;
	var ^CEdit				m_pxWav1, m_pxWav2, m_pxWav3, m_pxPlaylist;
    var ^CLoadSaveDialog 	m_pxLSD;
	var int					m_iBrowseWav;				///< wav file which is browsed for at the moment (1, 2 or 3)

	var bool				m_bChangeMsg;				///< OnChange is only called if this is set to true
	export var procref<bool> m_xOnChange;				///< OnChange handler; should be set by the user of this dialog


	export constructor()
		if(!InitFromResource("sound/AtmoProperties","AtmoProperties")) then
			CLevelEditorWrap.LogError("UI.ViewAtmoProperties","InitFromResource failed");
			return;
		endif;

		m_xOnChange = DoNothing;

		m_pxPriority			= cast<CSpinCtrlNumber>(GetControl("Priority"));
		m_pxVolume 				= cast<CSpinCtrlNumber>(GetControl("Volume"));
		m_pxPitch 				= cast<CSpinCtrlNumber>(GetControl("Pitch"));
		m_pxMinFadeDist 		= cast<CSpinCtrlNumber>(GetControl("MinFadeDist"));
		m_pxMaxFadeDist 		= cast<CSpinCtrlNumber>(GetControl("MaxFadeDist"));
		m_pxMaxHearingDist 		= cast<CSpinCtrlNumber>(GetControl("MaxHearingDist"));
		m_pxInnerConeAngle 		= cast<CSpinCtrlNumber>(GetControl("InnerConeAngle"));
		m_pxOuterConeAngle 		= cast<CSpinCtrlNumber>(GetControl("OuterConeAngle"));
		m_pxConeOutsideVolume	= cast<CSpinCtrlNumber>(GetControl("ConeOutsideVolume"));
		m_pxWav1 				= cast<CEdit>(GetControl("Wav1Edit"));
		m_pxWav2 				= cast<CEdit>(GetControl("Wav2Edit"));
		m_pxWav3 				= cast<CEdit>(GetControl("Wav3Edit"));
		m_pxPlaylist			= cast<CEdit>(GetControl("Playlist"));
		m_pxInnerConeAngleLabel = cast<CStaticCtrl>(GetControl("ConeInnerAngleLabel"));
		m_pxOuterConeAngleLabel = cast<CStaticCtrl>(GetControl("ConeOuterAngleLabel"));
		m_pxConeOutsideVolumeLabel = cast<CStaticCtrl>(GetControl("ConeOutsideVolumeLabel"));

		m_pxCheckDirectional = cast<CCheckBox>(GetControl("CheckDirectional"));
		m_pxCheckDayEnable   = cast<CCheckBox>(GetControl("CheckDayEnable"));
		m_pxCheckNightEnable = cast<CCheckBox>(GetControl("CheckNightEnable"));

		var ^CButton pxBrowse1 = cast<CButton>(GetControl("BrowseWav1"));
		var ^CButton pxBrowse2 = cast<CButton>(GetControl("BrowseWav2"));
		var ^CButton pxBrowse3 = cast<CButton>(GetControl("BrowseWav3"));
		pxBrowse1^.m_xOnClick = OnBrowse1;
		pxBrowse2^.m_xOnClick = OnBrowse2;
		pxBrowse3^.m_xOnClick = OnBrowse3;

	    var ^CButton pxPlaylistHelpButton  = cast<CButton>(GetControl("PlaylistHelpButton"));
		pxPlaylistHelpButton^.m_xOnClick = OnPlaylistHelp;


		m_pxPriority^.m_xOnChange=OnCtrlChanged;
		m_pxVolume^.m_xOnChange=OnCtrlChanged;
		m_pxPitch^.m_xOnChange=OnCtrlChanged;
		m_pxMinFadeDist^.m_xOnChange=OnCtrlChanged;
		m_pxMaxFadeDist^.m_xOnChange=OnCtrlChanged;
		m_pxMaxHearingDist^.m_xOnChange=OnCtrlChanged;
		m_pxInnerConeAngle^.m_xOnChange=OnCtrlChanged;
		m_pxOuterConeAngle^.m_xOnChange=OnCtrlChanged;
		m_pxConeOutsideVolume^.m_xOnChange=OnCtrlChanged;
		m_pxCheckDirectional^.m_xOnStateChange=OnCtrlChanged;
		m_pxCheckDayEnable^.m_xOnStateChange=OnCtrlChanged;
		m_pxCheckNightEnable^.m_xOnStateChange=OnCtrlChanged;
		m_pxWav1^.m_xOnUpdate=OnCtrlChanged;
		m_pxWav2^.m_xOnUpdate=OnCtrlChanged;
		m_pxWav3^.m_xOnUpdate=OnCtrlChanged;
		m_pxPlaylist^.m_xOnUpdate=OnCtrlChanged;

		m_bChangeMsg = true;
	endconstructor;

	export destructor()
	enddestructor;


	export proc void SetWav1(string p_sWav1)
		m_bChangeMsg = false;
		m_pxWav1^.SetText(p_sWav1);
		m_bChangeMsg = true;
	endproc;

	export proc void SetWav2(string p_sWav2)
		m_bChangeMsg = false;
		m_pxWav2^.SetText(p_sWav2);
		m_bChangeMsg = true;
	endproc;

	export proc void SetWav3(string p_sWav3)
		m_bChangeMsg = false;
		m_pxWav3^.SetText(p_sWav3);
		m_bChangeMsg = true;
	endproc;

	export proc void SetPriority(real p_fPriority)
		m_bChangeMsg = false;
		m_pxPriority^.SetValue(p_fPriority);
		m_bChangeMsg = true;
	endproc;

	export proc void SetVolume(int p_iVolume)
		m_bChangeMsg = false;
		m_pxVolume^.SetValue(p_iVolume);
		m_bChangeMsg = true;
	endproc;

	export proc void SetPitch(real p_fPitch)
		m_bChangeMsg = false;
		m_pxPitch^.SetValue(p_fPitch);
		m_bChangeMsg = true;
	endproc;

	export proc void SetMinFadeDist(real p_fDist)
		m_bChangeMsg = false;
		m_pxMinFadeDist^.SetValue(p_fDist);
		m_bChangeMsg = true;
	endproc;

	export proc void SetMaxFadeDist(real p_fDist)
		m_bChangeMsg = false;
		m_pxMaxFadeDist^.SetValue(p_fDist);
		m_bChangeMsg = true;
	endproc;

	export proc void SetMaxHearingDist(real p_fDist)
		m_bChangeMsg = false;
		m_pxMaxHearingDist^.SetValue(p_fDist);
		m_bChangeMsg = true;
	endproc;

	export proc void SetPlaylist(string p_sPlaylist)
		m_bChangeMsg = false;
		m_pxPlaylist^.SetText(p_sPlaylist);
		m_bChangeMsg = true;
	endproc;

	export proc void SetConeInnerAngle(int p_iAngle)
		m_bChangeMsg = false;
		m_pxInnerConeAngle^.SetValue(p_iAngle);
		m_bChangeMsg = true;
	endproc;

	export proc void SetConeOuterAngle(int p_iAngle)
		m_bChangeMsg = false;
		m_pxOuterConeAngle^.SetValue(p_iAngle);
		m_bChangeMsg = true;
	endproc;

	export proc void SetConeOutsideVolume(int p_iVolume)
		m_bChangeMsg = false;
		m_pxConeOutsideVolume^.SetValue(p_iVolume);
		m_bChangeMsg = true;
	endproc;

	export proc void SetDirectional(bool p_bDirectional)
		m_bChangeMsg = false;
		if(p_bDirectional) then
			m_pxCheckDirectional^.SetChecked(1);
		else
			m_pxCheckDirectional^.SetChecked(0);
		endif;
		m_bChangeMsg = true;
	endproc;

	export proc void SetDayEnable(bool p_bDayEnable)
		m_bChangeMsg = false;
		if(p_bDayEnable) then
			m_pxCheckDayEnable^.SetChecked(1);
		else
			m_pxCheckDayEnable^.SetChecked(0);
		endif;
		m_bChangeMsg = true;
	endproc;

	export proc void SetNightEnable(bool p_bNightEnable)
		m_bChangeMsg = false;
		if(p_bNightEnable) then
			m_pxCheckNightEnable^.SetChecked(1);
		else
			m_pxCheckNightEnable^.SetChecked(0);
		endif;
		m_bChangeMsg = true;
	endproc;


	export proc string GetWav1()
		return m_pxWav1^.GetText();
	endproc;

	export proc string GetWav2()
		return m_pxWav2^.GetText();
	endproc;

	export proc string GetWav3()
		return m_pxWav3^.GetText();
	endproc;

	export proc real GetPriority()
		return m_pxPriority^.GetValueFloat();
	endproc;

	export proc int GetVolume()
		return m_pxVolume^.GetValueInt();
	endproc;

	export proc real GetPitch()
		return m_pxPitch^.GetValueFloat();
	endproc;

	export proc real GetMinFadeDist()
		return m_pxMinFadeDist^.GetValueFloat();
	endproc;

	export proc real GetMaxFadeDist()
		return m_pxMaxFadeDist^.GetValueFloat();
	endproc;

	export proc real GetMaxHearingDist()
		return m_pxMaxHearingDist^.GetValueFloat();
	endproc;

	export proc int GetConeInnerAngle()
		return m_pxInnerConeAngle^.GetValueInt();
	endproc;

	export proc int GetConeOuterAngle()
		return m_pxOuterConeAngle^.GetValueInt();
	endproc;

	export proc int GetConeOutsideVolume()
		return m_pxConeOutsideVolume^.GetValueInt();
	endproc;

	export proc bool GetDirectional()
		return m_pxCheckDirectional^.GetCheckMark();
	endproc;

	export proc bool GetDayEnable()
		return m_pxCheckDayEnable^.GetCheckMark();
	endproc;

	export proc bool GetNightEnable()
		return m_pxCheckNightEnable^.GetCheckMark();
	endproc;

	export proc string GetPlaylist()
		return m_pxPlaylist^.GetText();
	endproc;

	proc bool DoNothing()
		return true;
	endproc;


	proc bool OnBrowse1()
		OpenBrowseDialog();
        m_iBrowseWav = 1;
		return true;
	endproc;


	proc bool OnBrowse2()
		OpenBrowseDialog();
        m_iBrowseWav = 2;
		return true;
	endproc;


	proc bool OnBrowse3()
		OpenBrowseDialog();
        m_iBrowseWav = 3;
		return true;
	endproc;


	export proc void AllowDirectionalSounds(bool p_bAllow)
		m_pxCheckDirectional^.SetChecked(0);
		m_pxCheckDirectional^.SetDisabled(true);
	endproc;


	proc bool OnCtrlChanged()
		var bool b = m_pxCheckDirectional^.GetCheckMark();
		m_pxInnerConeAngle^.SetDisabled(!b);
		m_pxOuterConeAngle^.SetDisabled(!b);
		m_pxConeOutsideVolume^.SetDisabled(!b);
		m_pxInnerConeAngleLabel^.SetDisabled(!b);
		m_pxOuterConeAngleLabel^.SetDisabled(!b);
		m_pxConeOutsideVolumeLabel^.SetDisabled(!b);

		if(m_bChangeMsg) then
			m_xOnChange.Call();
		endif;
		return true;
	endproc;


	proc void OpenBrowseDialog()
        m_pxLSD = new CLoadSaveDialog();
       	m_pxLSD^.m_xOnOpen = OnDialogOpenFile;
       	m_pxLSD^.m_xOnClose = OnDialogClose;
        m_pxLSD^.SetType(0);
        m_pxLSD^.ClearFilters();
        m_pxLSD^.SetPath(CClientWrap.GetUrsRelPath() + "/Data/Base/Audio/Sound");
        var int i = m_pxLSD^.AddFilter("Wav Files", "*.wav");
        m_pxLSD^.SetFilter(i);
        CWindowMgr.Get().AddTopLevelWindow(m_pxLSD);
	endproc;


    /**
    	called when a browse dialog has been closed
	*/
	proc bool OnDialogOpenFile()
		var string sBase = CClientWrap.GetUrsRelPath() + "/Data/Base/Audio/Sound/";
		var string sFile = m_pxLSD^.GetSelectedFile();
		if(sFile.Left(sBase.GetLength()) == sBase) then
			sFile = sFile.Right(sFile.GetLength() - sBase.GetLength());
		endif;

		switch(m_iBrowseWav)
			case(1) do: 		m_pxWav1^.SetText(sFile); endcase;
			case(2) do: 		m_pxWav2^.SetText(sFile); endcase;
			case default do: 	m_pxWav3^.SetText(sFile); endcase;
		endswitch;
		OnCtrlChanged();

	    return true;
    endproc;


    /**
    	called when a browse dialog has been closed
	*/
	proc bool OnDialogClose()
		m_pxLSD^.Destroy();
		m_pxLSD = null;
	    return true;
    endproc;


	proc bool OnPlaylistHelp()
		var ^CWindow pxDesktop = CClientWrap.GetDesktop();
		pxDesktop^.AddChild(new CPlaylistHelpWindow());
		return true;
	endproc;

endclass;



class CPlaylistHelpWindow inherit CFrameWindow
    var ^CEdit          m_pxEdit;
	var ^CButton		m_pxButton;

    export constructor()
        var ^CBoxLayout pxLayout = new CBoxLayout("main",1);
        SetLayoutMgr(pxLayout);

        pxLayout^.SetCellPadding(8,4);
        pxLayout^.AddBox("main",CBoxLayout.BT_Prop,0.9,"top");
        pxLayout^.AddBox("main",CBoxLayout.BT_Prop,0.1,"bottom");
        pxLayout^.AddBox("bottom",CBoxLayout.BT_Prop,0.7,"b1");
        pxLayout^.AddBox("bottom",CBoxLayout.BT_Prop,0.3,"b2");

        m_pxEdit = new CEdit({0, 0}, "", true);
        AddChildWithLayout(m_pxEdit, "top");
		m_pxEdit^.SetReadOnly(true);
		m_pxEdit^.SetText("A play list is a string of commands separated by spaces. Example: \n\n W1 L2 P1000 W2 L1-3 \n\nThe commands are:\n\nWn - switch to wav file n (1, 2 or 3)\nPn - pause n milliseconds (e.g. P1000 pauses for 1 second)\nPn-m - pause n-m milliseconds (e.g. P1000-3000 makes a pause of Random length between 1 and 3 seconds)\nLn - loop current wav file n times (e.g. L3 loops 3 times)\nLn-m - loops current wav file n-m (e.g. L3-10 makes a Random number of loops between 3 and 10)\n\nPlay lists loop indefinitely. The above example play list would play wav file 1 twice, pause for 1 second, then play wav file 2 1, 2 or 3 times and then start over.");

		m_pxButton = new CButton({0, 0}, "OK");
		m_pxButton^.m_xOnClick = OnClose;
        AddChildWithLayout(m_pxButton, "b2");

        SetCaption("Playlist Help");
        SetStyle(WS_Border | WS_Caption | WS_Resize | WS_CloseButton);

        SetSize(250, 400);
        SetPos(100 + Random.GetInt() % 400, Random.GetInt() % 400);
	endconstructor;

    export destructor()
	enddestructor;

    proc bool OnClose()
        delete this;
        return true;
    endproc;

endclass;

