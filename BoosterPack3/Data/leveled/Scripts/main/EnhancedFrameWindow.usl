class CEnhancedFrameWindow inherit CFrameWindow;

	var	string				m_sName;
	var	bool				m_bModal;
	var string				m_sHelp;
	var bool				m_bTempInVis;

	export constructor()
		m_bModal=false;
		m_sHelp="wuff test";
		m_bTempInVis=false;
		SetCmd("HideAllUI", SetTempInvisible );
	endconstructor;

	export destructor()
		SaveOnDestruct();
	enddestructor;

// set position and size to default regarding screen resolution
	export proc bool ResetWindow()
		return(true);
	endproc;

	export proc bool SetTempInvisible()
		//CLevelEditorWrap.LogSpam("UI.EnchancedFrameWindow","BluBB!!!");
		if(m_bTempInVis && !GetVisible())then
			m_bTempInVis=false;
			SetVisible(true);
		elseif(!m_bTempInVis && GetVisible())then
			m_bTempInVis=true;
			SetVisible(false);
		endif;
		return(true);
	endproc;

	export proc bool SetSettingsName( string p_sName )
		m_sName = p_sName;
		return(true);
	endproc;

	export proc void SetToolTipText(string p_sText)
		var ^CViewHelp pxHelpWin=new CViewHelp(m_sHelp);
		pxHelpWin^.Update();
		CClientWrap.GetDesktop()^.AddChild(pxHelpWin);
	endproc;

	export proc bool SetHelpText( string p_sHelp )
		m_sHelp=p_sHelp;
		return(true);
	endproc;

// loads config data like position, size and (maybe) contents from config file
	export proc bool LoadPosition( string p_sName,bool p_bSize )
		var int iDSX, iDSY;
		iDSX = CClientWrap.GetDesktop()^.GetSize().GetX();
		iDSY = CClientWrap.GetDesktop()^.GetSize().GetY();
		CLevelEditorWrap.LogSpam("UI.EnchancedFrameWindow","Position  --> "+iDSX.ToString()+"  "+iDSY.ToString());

		m_sName = p_sName;
		var int iVis, iX, iY, iH, iW, iStatus;
		var bool bVis;
		CSettings.Get("Editor/Windows/"+m_sName+"/Pos_X",iX);
		CSettings.Get("Editor/Windows/"+m_sName+"/Pos_Y",iY);
		CSettings.Get("Editor/Windows/"+m_sName+"/Visible",iVis);
		CSettings.Get("Editor/Windows/"+m_sName+"/Status",iStatus);
		CSettings.Get("Editor/Windows/"+m_sName+"/Height",iH);
		CSettings.Get("Editor/Windows/"+m_sName+"/Width",iW);

		if((iX+iW>iDSX)||(iY+iH>iDSY))then
			CLevelEditorWrap.LogSpam("UI.EnchancedFrameWindow","X -->"+(iX+iW).ToString()+"  Y -->"+(iY+iH).ToString());
			SetVisible(false);
		else
			SetPos(iX,iY);
			if(iVis!=0)then bVis=true; else bVis=false; endif;
			SetVisible(bVis);
			if(GetSizable())then
				if(iW!=0 && iH!=0 && p_bSize)then
					SetSize(iW,iH);
					if(iStatus==0)then
						Minimize();
					endif;
					if(iStatus==2)then
						Maximize();
					endif;
				endif;
			endif;
		endif;
		return(true);		
	endproc;

	export proc bool LoadPosition( string p_sName )
		return(LoadPosition(p_sName,true));
	endproc;

// saves config data like position, size and (maybe) contents to config file
	export proc bool SaveOnDestruct()
		if(m_sName!="")then
			var int iVis;
			if(GetVisible())then iVis=1; else iVis=0; endif;
			if(m_sName=="FileNew")then iVis=0; endif;
			CSettings.Set("Editor/Windows/"+m_sName+"/Pos_X",GetPos().GetX());
			CSettings.Set("Editor/Windows/"+m_sName+"/Pos_Y",GetPos().GetY());
			CSettings.Set("Editor/Windows/"+m_sName+"/Visible",iVis);
	
			var point xSize = GetSize();
			//RestoreSize();
			if(GetSize()==GetMinSize())then
				CSettings.Set("Editor/Windows/"+m_sName+"/Status","0");
			elseif(GetSize()==GetMaxSize())then
				CSettings.Set("Editor/Windows/"+m_sName+"/Status","2");
			else
				CSettings.Set("Editor/Windows/"+m_sName+"/Status","1");
			endif;
			CSettings.Set("Editor/Windows/"+m_sName+"/Width",GetSize().GetX());
			CSettings.Set("Editor/Windows/"+m_sName+"/Height",GetSize().GetY());
		endif;
		return(true);
	endproc;

	export proc bool SetModal()
		CWindowMgr.Get().SetModal(this);
		m_bModal=true;
		return(true);
	endproc;

	export proc bool ReleaseModal()
		CWindowMgr.Get().ReleaseModal(this);
		m_bModal = false;
		return true;
	endproc;

	export proc string GetName()
		return(m_sName);
	endproc;

// default OnClose proc, called when close button is clicked
	export proc bool OnClose()
		if(m_bModal)then
			CWindowMgr.Get().ReleaseModal(this);
		endif;
		SetVisible(false);
		CWindowMgr.Get().BringWindowToTop(CClientWrap.GetDesktop(),true);
		return(true);
	endproc;

endclass;
