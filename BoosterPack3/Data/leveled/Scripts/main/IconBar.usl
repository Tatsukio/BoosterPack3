class CIconBar inherit CWindow;

	var ^CLine          	   	m_pxLine;
	var ^CDesktop				m_pxDesktop;
	static var ^CIconBar		ms_pxInst;
	var array ^CToggleButton	m_apxLandscapeButtons;
	export var ^CDropList		m_pxBrushes;
	var ^CSpinCtrlNumber		m_pxBrushIntensity;
	var string					m_sShowAudioListener;
	
	export constructor()
		m_pxDesktop=CClientWrap.GetDesktop();
		SetSize(CClientWrap.GetDesktop()^.GetWidth(),GetHeight());
		if(!InitFromResource("main/IconBar","IconBar")) then
			CLevelEditorWrap.LogError("UI.IconBar","InitFromResource failed");
			return;
		endif;

		ms_pxInst=this;

		m_pxLine = new CLine({5, 0}, GetSize().GetX() - 10, 0);
		m_pxLine^.SetColor({{100, 100, 100, 255}});
		AddChild(m_pxLine);

		//New level
		var ^CButton pxNewLevel = cast<CButton>(GetControl("NewLevel"));
		pxNewLevel^.m_xOnClick = OnNewLevel;
		//Open level
		var ^CButton pxOpenLevel = cast<CButton>(GetControl("OpenLevel"));
		pxOpenLevel^.m_xOnClick = OnOpenLevel;
		//Save level
		var ^CButton pxSaveLevel = cast<CButton>(GetControl("SaveLevel"));
		pxSaveLevel^.m_xOnClick = OnSaveLevel;


		//Undo
		var ^CButton pxUndo = cast<CButton>(GetControl("Undo"));
		pxUndo^.m_xOnClick = OnUndo;
		//Redo
		var ^CButton pxRedo = cast<CButton>(GetControl("Redo"));
		pxRedo^.m_xOnClick = OnRedo;

		//Select
		var ^CToggleButton pxObjectSelect = cast<CToggleButton>(GetControl("Select"));
		pxObjectSelect^.m_xOnClick = OnObjectSelect;
		//Rotate
		var ^CToggleButton pxObjectRotate = cast<CToggleButton>(GetControl("Rotate"));
		pxObjectRotate^.m_xOnClick = OnObjectRotate;
		//Transform
		var ^CToggleButton pxObjectTransform = cast<CToggleButton>(GetControl("Transform"));
		pxObjectTransform^.m_xOnClick = OnObjectTransform;

		pxObjectSelect^.SetGrouped(true);
		pxObjectRotate^.SetGrouped(true);
		pxObjectTransform^.SetGrouped(true);

		var ^CCheckBox pxLocalTransform = cast<CCheckBox>(GetControl("LocalGlobalTransRot"));
		pxLocalTransform^.m_xOnStateChange = OnLocalGlobalTransRot;
		pxLocalTransform^.SetTristate(false);
		if(CMainController.Get().GetTransformCtrl().GetLocalTransform())then
			pxLocalTransform^.SetChecked(1);
		endif;

		//Free camera
		var ^CToggleButton pxFreeCamera = cast<CToggleButton>(GetControl("Cameras/FreeCamera"));
		pxFreeCamera^.m_xOnClick = OnFreeCamera;

		//Game camera
		var ^CToggleButton pxGameCamera = cast<CToggleButton>(GetControl("Cameras/GameCamera"));
		pxGameCamera^.m_xOnClick = OnGameCamera;

		//Sequence camera
		var ^CToggleButton pxSequenceCamera = cast<CToggleButton>(GetControl("Cameras/SequenceCamera"));
		pxSequenceCamera^.m_xOnClick = OnSequenceCamera;


		pxFreeCamera^.SetGrouped(true);
		pxGameCamera^.SetGrouped(true);
		pxSequenceCamera^.SetGrouped(true);

		var ^CToggleButton pxShowAudioListener = cast<CToggleButton>(GetControl("AudioListener"));
		CSettings.Get("Editor/Misc/ShowAudioListener",m_sShowAudioListener);
		if(m_sShowAudioListener=="true")then
			CLevelEditorWrap.GetAtmoSoundMgr()^.SetDisplayListener(true);
			pxShowAudioListener^.SetToggleButtonState(true);
		endif;
		pxShowAudioListener^.m_xOnClick = OnAudioListener;

		var ^CToggleButton pxShowInvisibleObjects = cast<CToggleButton>(GetControl("InvisibleObjects"));
		pxShowInvisibleObjects^.m_xOnClick = OnInvisibleObjects;

		//ScapeButtons
		var ^CToggleButton pxScapeAltitude = cast<CToggleButton>(GetControl("ScapeButtons/ScapeAltitude"));
		pxScapeAltitude^.m_xOnClick = OnScapeAltitude;
		var ^CToggleButton pxScapeLevel = cast<CToggleButton>(GetControl("ScapeButtons/ScapeLevel"));
		pxScapeLevel^.m_xOnClick = OnScapeLevel;
		var ^CToggleButton pxScapeBlur = cast<CToggleButton>(GetControl("ScapeButtons/ScapeBlur"));
		pxScapeBlur^.m_xOnClick = OnScapeBlur;
		var ^CToggleButton pxScapeNoise = cast<CToggleButton>(GetControl("ScapeButtons/ScapeNoise"));
		pxScapeNoise^.m_xOnClick = OnScapeNoise;
		var ^CToggleButton pxScapeDetail = cast<CToggleButton>(GetControl("ScapeButtons/ScapeDetail"));
		pxScapeDetail^.m_xOnClick = OnScapeDetail;
		var ^CToggleButton pxScapePlateau = cast<CToggleButton>(GetControl("ScapeButtons/ScapePlateau"));
		pxScapePlateau^.m_xOnClick = OnScapePlateau;
		var ^CToggleButton pxScapeForest = cast<CToggleButton>(GetControl("ScapeButtons/ScapeForest"));
		pxScapeForest^.m_xOnClick = OnScapeForest;
		var ^CToggleButton pxScapeCliff = cast<CToggleButton>(GetControl("ScapeButtons/ScapeCliff"));
		pxScapeCliff^.m_xOnClick = OnScapeCliff;
		pxScapeCliff^.SetDisabled(true);
		var ^CToggleButton pxScapeFeature = cast<CToggleButton>(GetControl("ScapeButtons/ScapeFeature"));
		pxScapeFeature^.m_xOnClick = OnScapeFeature;
		pxScapeFeature^.SetDisabled(true);
		

		pxScapeAltitude^.SetGrouped(true);
		pxScapeLevel^.SetGrouped(true);
		pxScapeBlur^.SetGrouped(true);
		pxScapeNoise^.SetGrouped(true);
		pxScapeDetail^.SetGrouped(true);
		pxScapePlateau^.SetGrouped(true);
		pxScapeForest^.SetGrouped(true);
		pxScapeCliff^.SetGrouped(true);
		pxScapeFeature^.SetGrouped(true);

		m_apxLandscapeButtons.AddEntry(pxScapeAltitude);
		m_apxLandscapeButtons.AddEntry(pxScapeLevel);
		m_apxLandscapeButtons.AddEntry(pxScapeBlur);
		m_apxLandscapeButtons.AddEntry(pxScapeNoise);
		m_apxLandscapeButtons.AddEntry(pxScapeDetail);
		m_apxLandscapeButtons.AddEntry(pxScapePlateau);
		m_apxLandscapeButtons.AddEntry(pxScapeForest);
		m_apxLandscapeButtons.AddEntry(pxScapeCliff);
		m_apxLandscapeButtons.AddEntry(pxScapeFeature);

		m_pxBrushes=cast<CDropList>(GetControl("BrushControls/BrushesDropList"));
		m_pxBrushIntensity=cast<CSpinCtrlNumber>(GetControl("BrushControls/BrushIntensity"));
		
		InitBrushesDropList();
		m_pxBrushIntensity^.SetLimits(1,100,1);
		CheckButtons();
		InitShortcuts();
	endconstructor;

	export destructor()
       	delete m_pxLine;
	enddestructor;

	export static proc ref CIconBar Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CIconBar;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export proc bool Hack()
		m_pxBrushes^.m_xOnChange=OnChange;
		m_pxBrushIntensity^.m_xOnChange=OnChangeIntensity;
		return(true);
	endproc;

	export proc bool HandleMessage(ref CEvtPointer p_rxEvt)
		if(p_rxEvt.GetClass().ToString()=="sMLDown")then
			return true;
		endif
		if(p_rxEvt.GetClass().ToString()=="sMLUp")then
			return true;
		endif
		return super.HandleMessage(p_rxEvt);
	endproc;
	
	proc void InitBrushesDropList()
		var string sTmp="Editor/Brushes/Height";
		var int i,iNumBrushes=CSettings.NumSubs(sTmp);
		if(iNumBrushes==0)then
			m_pxBrushes^.AddItem("Default Q 10x10");
			m_pxBrushes^.AddItem("Default Q 20x20");
			m_pxBrushes^.AddItem("Default Q 30x30");
			m_pxBrushes^.AddItem("Default Q 50x50");
		else
			for(i=0)cond(i<iNumBrushes)iter(i++)do
				var string sBrushKeyName=CSettings.GetSubName(sTmp,i);
				var ^CBrush pxBrush=new CBrush("");
				if(!pxBrush^.ReadFromCfg(sBrushKeyName))then
					delete pxBrush;
					continue;
				endif;
				if(pxBrush^.GetName()!="Unnamed")then
					if(pxBrush^.GetName()!="Empty")then
						m_pxBrushes^.AddItem(pxBrush^.GetName());
					else
						m_pxBrushes^.AddItem("Default Q 10x10");
						m_pxBrushes^.AddItem("Default Q 20x20");
						m_pxBrushes^.AddItem("Default Q 30x30");
						m_pxBrushes^.AddItem("Default Q 50x50");
						delete pxBrush;
						break;
					endif;
				endif;
				delete pxBrush;
			endfor;
		endif;
		
		return();
	endproc;
	
	proc bool OnChangeIntensity()
		CEnhancedMenu.Get().GetViewBrushes()^.SetBrushIntensity(m_pxBrushIntensity^.GetValueInt());
		return(true);
	endproc;
	
	export proc bool SetIntensity(int p_iParam)
		m_pxBrushIntensity^.SetValue(m_pxBrushIntensity^.GetValueInt()+p_iParam);
		return(true);
	endproc;
	
	export proc bool OnChange()
		var int iIndex=m_pxBrushes^.GetSelectedItem();
		if(iIndex!=(-1))then
			CEnhancedMenu.Get().GetViewBrushes()^.SelectBrush(iIndex);
			m_pxBrushIntensity^.SetValue(CEnhancedMenu.Get().GetViewBrushes()^.GetBrushIntensity());
		endif;
		return(true);
	endproc;
	
	export proc void SelectBrush(int p_iIndex);
		if(p_iIndex!=(-1)&&m_pxBrushes^.NumItems()>0)then
			m_pxBrushes^.m_xOnChange.Clear();
			m_pxBrushIntensity^.m_xOnChange.Clear();
			m_pxBrushes^.Select(p_iIndex);
			m_pxBrushIntensity^.SetValue(CEnhancedMenu.Get().GetViewBrushes()^.GetBrushIntensity());
			m_pxBrushIntensity^.m_xOnChange=OnChangeIntensity;
			m_pxBrushes^.m_xOnChange=OnChange;
		endif;
		return();
	endproc;
	
	export proc void AddBrush(string p_sParam)
		m_pxBrushes^.AddItem(p_sParam);
		m_pxBrushes^.Select(CEnhancedMenu.Get().GetViewBrushes()^.GetSelectedBrushIndex());
		return();
	endproc;
	
	export proc void DeleteBrush(int p_iParam)
		m_pxBrushes^.DeleteItem(p_iParam);
		return();
	endproc;
	
	proc bool OnNewLevel()
		CEnhancedMenu.Get().OnFileNew();
		return(true);
	endproc;

	proc bool OnOpenLevel()
		CEnhancedMenu.Get().OnLoad();
		return(true);
	endproc;

	proc bool OnSaveLevel()
		CEnhancedMenu.Get().OnSave();
		return(true);
	endproc;

	proc bool OnUndo()
		CEnhancedMenu.Get().UNDO();
		return(true);
	endproc;

	proc bool OnRedo()
		//Redo
		return(true);
	endproc;

	export proc void DisableEditButtons(bool p_bParam)
		var ^CToggleButton pxSelect = cast<CToggleButton>(GetControl("Select"));
		var ^CToggleButton pxRotate = cast<CToggleButton>(GetControl("Rotate"));
		var ^CToggleButton pxTransform = cast<CToggleButton>(GetControl("Transform"));

		pxSelect^.SetToggleButtonState(!p_bParam);
		pxRotate^.SetToggleButtonState(!p_bParam);
		pxTransform^.SetToggleButtonState(!p_bParam);

		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		if(pxSel!=null)then
			pxSel^.Clear();
		endif;

		CMainController.Get().SetState(-1);
	endproc;


	export proc bool OnObjectSelect()
		var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Select"));
		pxTemp^.SetToggleButtonState(true);
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		if(pxSel!=null)then
			pxSel^.Clear();
		endif;
		PushButton(-1);
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(-1);
		CEnhancedMenu.Get().GetScapeEdit()^.PushMaterialButton(-1);
		CMainController.Get().DeselectAllToggleButton();
		CMainController.Get().SetState(0);
		CMainController.Get().GetObjCreator()^.DeleteGhost();
		UpdateStates();
		return(true);
	endproc;

	proc bool OnObjectRotate()
		if(CMainController.Get().GetAlternativeEditMode())then
			
		else
			var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Rotate"));
			pxTemp^.SetToggleButtonState(true);
			PushButton(-1);
			CEnhancedMenu.Get().GetScapeEdit()^.PushButton(-1);
			UpdateStates();
		endif;
		return(true);
	endproc;

	proc bool OnObjectTransform()
		KLog.LogWarn("Manni","OnObjectTransform()");
		var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Transform"));
		pxTemp^.SetToggleButtonState(true);
		PushButton(-1);
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(-1);
		UpdateStates();
		return(true);
	endproc;

	proc bool OnLocalGlobalTransRot()
		var ^CCheckBox pxLocalTransform = cast<CCheckBox>(GetControl("LocalGlobalTransRot"));
		var bool bLocal=false;
		if(pxLocalTransform^.GetChecked()==1)then
			bLocal=true;
		endif;
		CMainController.Get().GetTransformCtrl().SetLocalTransform(bLocal);
		return(true);
	endproc;

	proc bool OnFreeCamera()
		var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Cameras/FreeCamera"));
		pxTemp^.SetToggleButtonState(true);
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(-1);
		UpdateStates();
		return(true);
	endproc;

	proc bool OnGameCamera()
		var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Cameras/GameCamera"));
		pxTemp^.SetToggleButtonState(true);
		UpdateStates();
		return(true);
	endproc;

	proc bool OnSequenceCamera()
		var ^CToggleButton pxTemp = cast<CToggleButton>(GetControl("Cameras/SequenceCamera"));
		pxTemp^.SetToggleButtonState(true);
		UpdateStates();
		return(true);
	endproc;

	proc bool OnAudioListener()
		var ^CToggleButton pxShowAudioListener = cast<CToggleButton>(GetControl("AudioListener"));
		CLevelEditorWrap.GetAtmoSoundMgr()^.SetDisplayListener(pxShowAudioListener^.GetToggleButtonState());
		CSettings.Set("Editor/Misc/ShowAudioListener",pxShowAudioListener^.GetToggleButtonState().ToString());
		return true;
	endproc;

	//From menu/shortcut
	export proc bool OnSwitchAudioListener()
		var ^CToggleButton pxShowAudioListener = cast<CToggleButton>(GetControl("AudioListener"));
		pxShowAudioListener^.SetToggleButtonState(!pxShowAudioListener^.GetToggleButtonState());
		CLevelEditorWrap.GetAtmoSoundMgr()^.SetDisplayListener(pxShowAudioListener^.GetToggleButtonState());
		return true;
	endproc;

	//From menu/shortcut
	export proc bool SwitchShowInvisibleObjects()
		var ^CToggleButton pxInvisibleObjects = cast<CToggleButton>(GetControl("InvisibleObjects"));
		pxInvisibleObjects^.SetToggleButtonState(!pxInvisibleObjects^.GetToggleButtonState());
		CLevelEditorWrap.SetShowInvisibleObjs(pxInvisibleObjects^.GetToggleButtonState());
		return(true);
	endproc;

	proc bool OnInvisibleObjects()
		var ^CToggleButton pxInvisibleObjects = cast<CToggleButton>(GetControl("InvisibleObjects"));
		CLevelEditorWrap.SetShowInvisibleObjs(!pxInvisibleObjects^.GetToggleButtonState());
		return true;
	endproc;


	proc bool OnScapeAltitude()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(0);
		CEnhancedMenu.Get().GetScapeEdit()^.OnAltitude();
		return(true);
	endproc;

	proc bool OnScapeLevel()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(1);
		CEnhancedMenu.Get().GetScapeEdit()^.OnLevel();
		return(true);
	endproc;

	proc bool OnScapeBlur()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(2);
		CEnhancedMenu.Get().GetScapeEdit()^.OnSmoothing();
		return(true);
	endproc;

	proc bool OnScapeNoise()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(3);
		CEnhancedMenu.Get().GetScapeEdit()^.OnRoughen();
		return(true);
	endproc;

	proc bool OnScapeDetail()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(4);
		CEnhancedMenu.Get().GetScapeEdit()^.OnDetail();
		return(true);
	endproc;

	proc bool OnScapePlateau()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(5);
		CEnhancedMenu.Get().GetScapeEdit()^.OnPlateau();
		return(true);
	endproc;

	proc bool OnScapeForest()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(6);
		CEnhancedMenu.Get().GetScapeEdit()^.OnForest();
		return(true);
	endproc;
	
	proc bool OnScapeCliff()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(7);
		CEnhancedMenu.Get().GetScapeEdit()^.OnCliff();
		return(true);
	endproc;
	
	proc bool OnScapeFeature()
		CEnhancedMenu.Get().GetScapeEdit()^.PushButton(8);
		CEnhancedMenu.Get().GetScapeEdit()^.OnFeature();
		return(true);
	endproc;

	export proc bool PushButton(int p_iButton)
		if(p_iButton==(-1))then
			var int i;
			for(i=0)cond(i<m_apxLandscapeButtons.NumEntries())iter(i++)do
				m_apxLandscapeButtons[i]^.SetToggleButtonState(false);
			endfor;
			return(true);
		endif;
		var int iButton =Math.Clamp(p_iButton,0,m_apxLandscapeButtons.NumEntries()-1);
		m_apxLandscapeButtons[p_iButton]^.SetToggleButtonState(true);
		return(true);
	endproc;


	export proc bool UpdateStates()
		var ^CToggleButton pxObjectSelect = cast<CToggleButton>(GetControl("Select"));
		var ^CToggleButton pxObjectRotate = cast<CToggleButton>(GetControl("Rotate"));
		var ^CToggleButton pxObjectTransform = cast<CToggleButton>(GetControl("Transform"));
		var ^CToggleButton pxFreeCamera = cast<CToggleButton>(GetControl("Cameras/FreeCamera"));
		var ^CToggleButton pxGameCamera = cast<CToggleButton>(GetControl("Cameras/GameCamera"));
		var ^CToggleButton pxSequenceCamera = cast<CToggleButton>(GetControl("Cameras/SequenceCamera"));

		CMainController.Get().ResetState();
		if(pxObjectSelect^.GetToggleButtonState())then
			CMainController.Get().SetState(0);
		endif;
		if(pxObjectRotate^.GetToggleButtonState())then
			CMainController.Get().SetState(1);
			CMainController.Get().GetTransformCtrl().SetTransformState(1);
		endif;
		if(pxObjectTransform^.GetToggleButtonState())then
			CMainController.Get().SetState(1);
			CMainController.Get().GetTransformCtrl().SetTransformState(0);
		endif;
		//Camera
		if(pxFreeCamera^.GetToggleButtonState())then
			CClientWrap.GetDesktop()^.SetStandardCursor();
			CMainController.Get().ActivateCameraFree();
		endif;
		if(pxGameCamera^.GetToggleButtonState())then
			CClientWrap.GetDesktop()^.SetStandardCursor();
			CMainController.Get().ActivateCameraGame();
		endif;
		if(pxSequenceCamera^.GetToggleButtonState())then
			CClientWrap.GetDesktop()^.SetStandardCursor();
			CMainController.Get().ActivateCameraSequence();
		endif;

		return(true);
	endproc;

	export proc bool CheckButtons()
		var ^CToggleButton pxObjectSelect = cast<CToggleButton>(GetControl("Select"));
		var ^CToggleButton pxObjectRotate = cast<CToggleButton>(GetControl("Rotate"));
		var ^CToggleButton pxObjectTransform = cast<CToggleButton>(GetControl("Transform"));
		var ^CToggleButton pxFreeCamera = cast<CToggleButton>(GetControl("Cameras/FreeCamera"));
		var ^CToggleButton pxGameCamera = cast<CToggleButton>(GetControl("Cameras/GameCamera"));
		var ^CToggleButton pxSequenceCamera = cast<CToggleButton>(GetControl("Cameras/SequenceCamera"));

		if(CMainController.Get().GetCameraState()==0)then
			pxFreeCamera^.SetToggleButtonState(true);
		elseif(CMainController.Get().GetCameraState()==1)then
			pxGameCamera^.SetToggleButtonState(true);
		elseif(CMainController.Get().GetCameraState()==2)then
			pxSequenceCamera^.SetToggleButtonState(true);
		endif;
		if(CMainController.Get().GetState()==0)then
			pxObjectSelect^.SetToggleButtonState(true);
		elseif(CMainController.Get().GetState()==1)then
			if(CMainController.Get().GetTransformCtrl().GetTransformState()==0)then
				pxObjectTransform^.SetToggleButtonState(true);
			endif;
			if(CMainController.Get().GetTransformCtrl().GetTransformState()==1)then
				pxObjectRotate^.SetToggleButtonState(true);
			endif;
		endif;

		return(true);
	endproc;

	proc bool InitShortcuts()
		m_pxDesktop^.SetCmd("RotateObject", OnObjectRotate );
		m_pxDesktop^.SetCmd("MoveObject", OnObjectTransform );
		m_pxDesktop^.SetCmd("SelectObject", OnObjectSelect );
		return(true);
	endproc;

endclass;

