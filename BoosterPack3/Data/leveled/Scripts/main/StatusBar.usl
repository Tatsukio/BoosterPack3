class CStatusBar inherit CWindow;

	var ^CLine          		m_pxLine;
	var ^CDesktop				m_pxDesktop;
	static var ^CStatusBar		ms_pxInst;
	var ^CStaticCtrl 			m_pxLevelName;
	var ^CStaticCtrl 			m_pxFPS;
	var ^CStaticCtrl 			m_pxPolys;
	var ^CStaticCtrl 			m_pxPickPoint;
	var ^CStaticCtrl 			m_pxObjects;
	var ^CStaticCtrl 			m_pxDaytime;
	var ^CButton	 			m_pxPerformanceButton;
	var ^CPane		 			m_pxPerformancePane;
	var color					m_xPerformanceColor;
	var int						m_iMaximumPolys;

	export constructor()
		m_pxDesktop=CClientWrap.GetDesktop();
		InitShortcuts();
		if(!InitFromResource("main/StatusBar","StatusBar")) then
			CLevelEditorWrap.LogError("UI.StatusBar","InitFromResource failed");
			return;
		endif;
		SetSize(CClientWrap.GetDesktop()^.GetWidth(),GetHeight());
		SetPos(0,CClientWrap.GetDesktop()^.GetHeight()-20);
		ms_pxInst=this;

		m_pxLevelName = cast<CStaticCtrl>(GetControl("Name"));
		m_pxFPS = cast<CStaticCtrl>(GetControl("FPS"));
		m_pxPolys = cast<CStaticCtrl>(GetControl("Polys"));
		m_pxPickPoint = cast<CStaticCtrl>(GetControl("PickPoint"));
		m_pxObjects = cast<CStaticCtrl>(GetControl("Objects"));
		m_pxDaytime = cast<CStaticCtrl>(GetControl("Time"));
		m_pxPerformanceButton = cast<CButton>(GetControl("PerformanceButton"));
		//m_pxPerformanceButton^.m_xOnClick = OnPerformanceMeter;
		m_pxPerformancePane = cast<CPane>(GetControl("PerformanceButton/PerfColor"));
		
		m_pxLine = new CLine({0, 0},GetSize().GetX(),0);
		m_pxLine^.SetColor({{100, 100, 100, 255}});
		AddChild(m_pxLine);
		
		//m_iMaximumPolys=CEnhancedMenu.Get().GetOptimize()^.GetMaxPolyCount();
	endconstructor;

	export destructor()
        	delete m_pxLine;
	enddestructor;

	export proc bool Update()
		if(GetVisible())then
			m_pxPickPoint^.SetText(CLevelEditorWrap.GetScapeMgr().GetPickPoint().ToString());
			m_pxObjects^.SetText(CClientWrap.GetSelection().NumEntries().ToString()+" "+(CLocalizer.Get().Translate("_StatusBar_SS_ObjectsSelected")));
			m_pxFPS^.SetText(CLevelEditorWrap.GetSystemStats().GetAvgFrameRate().ToInt().ToString()+" FPS");
			m_pxPolys^.SetText(CLevelEditorWrap.GetSystemStats().GetPolygonCount().ToString()+" Polys");
			var string sTime=CEnhancedMenu.Get().GetPreferences()^.GetGraphicPreferences()^.GetDayTime();
			m_pxDaytime^.SetText(sTime+":00 hours");
			UpdatePerformanceColor();
			m_pxPerformancePane^.SetColor(m_xPerformanceColor);
		endif;
		return(true);
	endproc;
	
	export proc bool SetMaximumPolys(int p_iParam)
		m_iMaximumPolys=p_iParam;
		return(true);
	endproc;
	
	export proc bool SetLevelName(string p_sName)
		m_pxLevelName^.SetText(p_sName);
		return(true);
	endproc;

	proc bool InitShortcuts()
		return(true);
	endproc;

	proc bool UpdatePerformanceColor()
		var real fOnePercent=(m_iMaximumPolys.ToReal()/100.0f);
		if(fOnePercent==0.0f)then fOnePercent=1.0f;endif;
		var real fPolyPercent=(CLevelEditorWrap.GetSystemStats().GetPolygonCount().ToReal());
		m_xPerformanceColor={{0,255,50,255}};
		
		if(fPolyPercent>=10.0f)then	m_xPerformanceColor={{0,255,0,255}};endif;
		if(fPolyPercent>=20.0f)then	m_xPerformanceColor={{50,200,0,255}};endif;
		if(fPolyPercent>=30.0f)then	m_xPerformanceColor={{75,200,0,255}};endif;
		if(fPolyPercent>=40.0f)then m_xPerformanceColor={{100,175,0,255}};endif;
		if(fPolyPercent>=50.0f)then	m_xPerformanceColor={{125,150,0,255}};endif;
		if(fPolyPercent>=60.0f)then	m_xPerformanceColor={{150,125,0,255}};endif;
		if(fPolyPercent>=70.0f)then	m_xPerformanceColor={{175,100,0,255}};endif;
		if(fPolyPercent>=80.0f)then	m_xPerformanceColor={{200,75,0,255}};endif;
		if(fPolyPercent>=90.0f)then	m_xPerformanceColor={{225,25,0,255}};endif;
		if(fPolyPercent>=100.0f)then m_xPerformanceColor={{255,0,0,255}};endif;
		
		return(true);
	endproc;
		
	export static proc ref CStatusBar Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CStatusBar;
		endif;
		return(ms_pxInst^);
	endproc;

endclass;
