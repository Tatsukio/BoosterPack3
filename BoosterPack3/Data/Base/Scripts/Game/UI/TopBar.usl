class COptionsBar inherit CAlphaMaskedStaticCtrl

	var ^CButton m_pxQuit;

	export constructor()
		if(!InitFromResource("UI/TopBar","OptionsBar")) then
			CGameWrap.LogError("UI.OptionsBar","InitFromResource failed");
			return;
		endif;
		m_pxQuit = cast<CButton>(GetControl("OptionsBtn"));
		m_pxQuit^.SetToolTipText(CLocalizer.Get().Translate("_TopBar_TT_Quit"));
		m_pxQuit^.m_xOnClick = OnClose;
		m_pxQuit^.SetBitmap(	"hud/menu_menubutton.tga",
								"hud/menu_menubutton_down.tga",
								"hud/menu_menubutton_hover.tga",
								"");
	endconstructor;

	export destructor()
		//delete m_pxQuit;
	enddestructor;

    proc bool OnClose()
		var ^CGameMenu	pxGameMenu=new CGameMenu();
		var ^CDesktop pxDesktop = CClientWrap.GetDesktop();
		pxDesktop^.AddChild(pxGameMenu);
		CWindowMgr.Get().BringWindowToTop(pxGameMenu,true);
		CWindowMgr.Get().SetModal(pxGameMenu);
        return true;
    endproc;

endclass;


class CDiplomacyBar inherit CAlphaMaskedStaticCtrl

	var ^CButton m_pxButton;

	export constructor()
		if(!InitFromResource("UI/TopBar","DiplomacyBar")) then
			CGameWrap.LogError("UI.DiplomacyBar","InitFromResource failed");
			return;
		endif;
		m_pxButton = cast<CButton>(GetControl("DiplomacyBtn"));
		m_pxButton^.SetToolTipText(CLocalizer.Get().Translate("Opens the diplomacy window."));
		m_pxButton^.SetText(CLocalizer.Get().Translate("_UI_TopBar_Button_Diplomacy"));
		m_pxButton^.m_xOnClick = OnClick;
		m_pxButton^.SetBitmap(	"hud/menu_alliesbutton.tga",
								"hud/menu_alliesbutton_down.tga",
								"hud/menu_alliesbutton_hover.tga",
								"");
	endconstructor;

	export destructor()
	enddestructor;

    proc bool OnClick()
		//L KLog.LogWarn("Manni","Wrong button!");
		/*
		var ^CDiplomacyWindow pxWindow=new CDiplomacyWindow();
		var ^CDesktop pxDesktop = CClientWrap.GetDesktop();
		pxDesktop^.AddChild(pxWindow);
		CWindowMgr.Get().BringWindowToTop(pxWindow,true);
		CWindowMgr.Get().SetModal(pxWindow);
		m_pxWindow = pxWindow;
		m_pxWindow^.SetBar(this);
		*/
        return true;
    endproc;

endclass;

class CQuestBar inherit CAlphaMaskedStaticCtrl

	var ^CButton		m_pxButton;
	var ^CQuestWindow	m_pxWindow;

	export constructor()
		if(!InitFromResource("UI/TopBar","QuestBar")) then
			CGameWrap.LogError("UI.QuestBar","InitFromResource failed");
			return;
		endif;
		SetText(" ");
		m_pxButton = cast<CButton>(GetControl("QuestButton"));
		m_pxButton^.SetToolTipText(CLocalizer.Get().Translate("Opens the quest window."));
		m_pxButton^.SetText(CLocalizer.Get().Translate("_UI_TopBar_Button_Quests"));
		m_pxButton^.m_xOnClick = OnClick;
		m_pxButton^.SetBitmap(	"hud/menu_questbutton.tga",
								"hud/menu_questbutton_down.tga",
								"hud/menu_questbutton_hover.tga",
								"");
	endconstructor;

	export destructor()
	enddestructor;

    proc bool OnClick()
    	return true;
    endproc;

endclass;

class CClockBar inherit CAlphaMaskedStaticCtrl

	var int				m_iTimer;

	export constructor()
		if(!InitFromResource("UI/TopBar","ClockBar")) then
			CGameWrap.LogError("UI.ClockBar","InitFromResource failed");
			return;
		endif;
		var ^CStaticCtrl pxStatic = cast<CStaticCtrl>(GetControl("Static"));
		pxStatic^.SetTextColor({{255,255,200,255}});
    	pxStatic^.SetTextAlign(1);
		m_iTimer = SetTimer(100,true);
	endconstructor;

	export destructor()
		UnsetTimer(m_iTimer);
	enddestructor;

	proc bool OnTimer(int p_iID)
		if(p_iID == m_iTimer)then
			Update();
		endif;
		return(true);
	endproc;

	export proc bool Init()
		return true;
	endproc;

	export proc bool Update()
		var ^CStaticCtrl pxStatic = cast<CStaticCtrl>(GetControl("Static"));
		var string sText;
		var int iTime = CTimeMgr.Get().GetSecondsSinceGameStart().ToInt();

		var real fTemp = (iTime/3600).ToReal();
		sText = fTemp.ToString("02.0");
		iTime -= fTemp.ToInt()*3600;

		fTemp = (iTime/60).ToReal();
		sText += ":"+fTemp.ToString("02.0");
		iTime -= fTemp.ToInt()*60;

		fTemp = iTime.ToReal();
		sText += ":"+fTemp.ToString("02.0");

		pxStatic^.SetText(sText);
		return true;
	endproc;

endclass;

class CTickerBar inherit CAlphaMaskedStaticCtrl

	var int				m_iTimer;

	var ^CStaticCtrl	m_pxStatic;

	export constructor()
		m_iTimer = SetTimer(100, true);
		m_pxStatic = new CStaticCtrl();
		AddChild(m_pxStatic);
		m_pxStatic^.SetTextColor({{255,255,255,255}});
		m_pxStatic^.SetTransparent(true);
		m_pxStatic^.SetBackground(false);
	endconstructor;

	export destructor()
		UnsetTimer(m_iTimer);
	enddestructor;

	proc bool OnTimer(int p_iID)
		var CClntHndl xHitObj = CClientWrap.GetObjMgr().GetHitObj();
		var ^CObj pxObj = xHitObj.GetObj();
		if(pxObj!=null)then
			m_pxStatic^.SetText(pxObj^.GetName());
			m_pxStatic^.SetSize(GetWidth(),GetHeight());
		else
			m_pxStatic^.SetText("");
		endif;
		return(true);
	endproc;
endclass;

class CRessourceBar inherit CAlphaMaskedStaticCtrl

	class CResourceProgressBar inherit CProgressBar

		var ^CStaticCtrl	m_pxText;
		var CBitmapPtr		m_pBG;
		var CBitmapPtr		m_pFG1;
		var CBitmapPtr		m_pFG2;
		var CBitmapPtr		m_pFG3;
		var int 			m_iOldValue;
		export var bool		m_bShowLimit;

		export constructor()
			m_pxText = new CStaticCtrl();

			m_pxText^.SetPos(0,8);
			m_pxText^.SetSize(78,14);
			m_pxText^.SetTransparent(true);
			m_pxText^.SetBackground(false);
			m_pxText^.SetSuitAlpha(true);
			m_pxText^.SetTextColor({{245,228,168,255}});
			m_pxText^.SetText("0");
			AddChild(m_pxText);

			m_pBG = CBitmapPtr.Create("hud/resource_empty.tga");
			m_pFG1 = CBitmapPtr.Create("hud/resource_green.tga");
			m_pFG2 = CBitmapPtr.Create("hud/resource_orange.tga");
			m_pFG3 = CBitmapPtr.Create("hud/resource_red.tga");

			SetBackgroundColor({{0,255,0,255}});

			m_iOldValue = -1;
			m_bShowLimit = false;
		endconstructor;

		export destructor()
			delete m_pxText;
		enddestructor;

		export proc void SetValue(int p_iValue, int p_iLimit)

			//L KLog.LogSpam("CResourceProgressBar", "SetValue; iValue:"+p_iValue.ToString()+", old:"+m_iOldValue.ToString());

			if (GetVisible()) then
				if (m_iOldValue==-1) then
					m_iOldValue = p_iValue;
				else
					var int iDiff = p_iValue - m_iOldValue;
					if (iDiff!=0) then
						var point xPos = GetAbsPos();
						var point xSize = GetSize();
						var string sText;
						if (iDiff>0) then
							sText = "+" + iDiff.ToString();
						else
							sText = iDiff.ToString();
						endif;
						m_iOldValue = p_iValue;
						CGameWrap.GetUIMgr().RemPopupTextNear(xPos.GetX()+xSize.GetX()/2-sText.GetLength()*2, xPos.GetY()+xSize.GetY()-2,40);
						CGameWrap.GetUIMgr().AddPopupText(sText, 4.5, xPos.GetX()+xSize.GetX()/2-sText.GetLength()*2, xPos.GetY()+xSize.GetY()-2, "Trebuchet MS", 12);
					endif;
				endif;
			endif;

			var real fRatio;
			var string sBitmap;
			if(p_iLimit==-1)then
				SetBitmaps(m_pBG, m_pBG);
				SetProgress(0.0f);
			else
				if(p_iLimit!=0)then
					fRatio = Math.Min(p_iValue.ToReal() / p_iLimit.ToReal() , 1.0);
				else
					fRatio = 1.0;
				endif;
				if(fRatio<0.75)then
					SetBitmaps(m_pBG, m_pFG1);
				elseif(fRatio!=1.0)then
					SetBitmaps(m_pBG, m_pFG2);
				else
					SetBitmaps(m_pBG, m_pFG3);
				endif;
				SetProgress(fRatio*100.0);
			endif
			if (m_bShowLimit) then
				m_pxText^.SetText(p_iValue.ToString()+"/"+p_iLimit.ToString());
			else
				m_pxText^.SetText(p_iValue.ToString());
			endif
		endproc;

	endclass;

	var bool m_bFullFood;
	var bool m_bFullWood;
	var bool m_bFullStone;
	var bool m_bFullUnits;
	var bool m_bFullRes;

	var int	 m_iTick;
	var int  m_iTimer;
	var bool m_bTick;

	var array string m_asResources;
	var array ^CRessourceBar.CResourceProgressBar m_apxBars;

	export constructor()
		m_apxBars=5;
		var int i;
		for(i=0)cond(i<5)iter(i++)do
			m_apxBars[i]=new CRessourceBar.CResourceProgressBar;
			m_apxBars[i]^.SetTransparent(true);
			m_apxBars[i]^.SetSize(78,32);
			var int iXPos = 78*i+35;
			if (i == 5) then
				iXPos += 2;		// Boris made a mistake so the bars are not quite evenly spaced. :(
			endif
			m_apxBars[i]^.SetPos(iXPos,0);
			AddChild(m_apxBars[i]);
		endfor;
		m_apxBars[0]^.m_bShowLimit = true;
		m_iTick = 0;
		m_iTimer = SetTimer(300, true);
	endconstructor;

	export destructor()
		UnsetTimer(m_iTimer);
	enddestructor;

	export proc void Init(string p_sTribe)
		m_asResources=0;
		SetTransparent(true);
		SetBackground(true);
		SetSuitAlpha(true);

		var string sTribe = p_sTribe;
		if(sTribe=="Random" || sTribe=="SEAS")then
			sTribe="Hu";
		endif;
/*
		var ^CPropDB pxDB = new CPropDB();
		pxDB^.Load(CClientWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/"+sTribe+"/Resources.txt");
		if(pxDB!=null)then
			var ^CPropDB.CNode pxNode = pxDB^.GetRoot().Get("Available");
			if(pxNode!=null)then
				var int i;
				for(i=0)cond(i<pxNode^.NumSubs())iter(i++)do
					m_asResources.AddEntry(pxNode^.Get(i).Name());
				endfor;
				Update();
				return;
			endif;
		endif;
*/	
		m_asResources.AddEntry("iron");
		m_asResources.AddEntry("food");
		m_asResources.AddEntry("wood");
		m_asResources.AddEntry("stone");
		Update();

	endproc;

	proc bool HandleMessage(ref CEvtPointer p_rxEvt)
		if(p_rxEvt.GetClass()==CSubscriptionMgr.GetEvtClass_ObjChange())then
			var CClntHndl xObjHandle;
			var bitset dwTypes, dwAttribGroups;
			if(CSubscriptionMgr.EvtGetData_ObjChange(p_rxEvt,xObjHandle,dwTypes,dwAttribGroups))then
				Update();
			endif;
			return true;
		endif;
		return false;
	endproc;

	export proc void Update()
		var int iUnitsLimit=0;
		var int iUnits=0;
		var int iVirUnits=0;
/*		var int iFoodValue=0;
		var int iFoodLimit=0;
		var int iIronValue=0;
		var int iIronLimit=0;
		var int iWoodValue=0;
		var int iWoodLimit=0;
		var int iStoneValue=0;
		var int iStoneLimit=0;
*/
		var array int aiLimit, aiValue;

		var ^CAttribs pxAttribs=CGameWrap.GetClient().GetPlayer().GetAttribs();

		var int i;
		m_bFullRes = false;
		for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
			if(pxAttribs^.ContainsKey(m_asResources[i]))then
				aiValue.AddEntry(pxAttribs^.GetValueInt(m_asResources[i]));
				var int iLimit = pxAttribs^.GetValueInt("max_"+m_asResources[i]);
				if(i==0) then
					iLimit=-1;
				endif;
				aiLimit.AddEntry(iLimit);

				var ^CRessourceBar.CResourceProgressBar pxRes=m_apxBars[1+i];
				pxRes^.SetValue(aiValue[i],aiLimit[i]);

			endif;
		endfor;


		var ^CLevelInfoClient pxLevelInfo=^(CGameWrap.GetClient().GetLevelPreview());
		var ^CPropDB pxGenericDB=^(pxLevelInfo^.GetGenericData());
		var ^CPropDB.CNode pxPopNode = ^((pxGenericDB^)["PlayerSettings/Player_"+CGameWrap.GetClientID().ToString()+"/Restrictions/Chars/Population"]);
		var int iRealMaxUnits = 52;
		if(pxPopNode!=null)then
			iRealMaxUnits = pxPopNode^.GetValueI("Max",52);
		endif;
		if(pxAttribs^.ContainsKey("max_units"))then
			iUnits=pxAttribs^.GetValueInt("units");
			iVirUnits=pxAttribs^.GetValueInt("virtual_units_0");
			iVirUnits+=pxAttribs^.GetValueInt("virtual_units_1");
			iVirUnits+=pxAttribs^.GetValueInt("virtual_units_2");
			iVirUnits+=pxAttribs^.GetValueInt("virtual_units_3");
			iVirUnits+=pxAttribs^.GetValueInt("virtual_units_4");
			iUnitsLimit=Math.Min(pxAttribs^.GetValueInt("max_units"),iRealMaxUnits);
			var ^CRessourceBar.CResourceProgressBar pxResUnits=m_apxBars[0];
			pxResUnits^.SetValue((iUnits+iVirUnits),iUnitsLimit);
		endif;

	endproc;

	export proc void Update_FullRes()

		if (!m_bFullRes && !m_bFullUnits) then
			return;
		endif;

		m_bTick = !m_bTick;

		var color xColor;
		if(m_bTick)then
			xColor = {{255,0,0,255}};
		else
			xColor = {{0,0,0,255}};
		endif;

		var ^CAttribs pxAttribs=CGameWrap.GetClient().GetPlayer().GetAttribs();

		if (m_bFullUnits) then
			var ^CRessourceBar.CResourceProgressBar pxResUnits=m_apxBars[0];
//			pxResUnits^.SetTextColor(xColor);
		endif;

		var int i;
		for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
			if(pxAttribs^.ContainsKey(m_asResources[i]))then
				if(pxAttribs^.GetValueInt(m_asResources[i]) >= pxAttribs^.GetValueInt("max_"+m_asResources[i]))then
					var ^CRessourceBar.CResourceProgressBar pxRes=m_apxBars[1+i];
//					pxRes^.SetTextColor(xColor);
				endif;
			endif;
		endfor;

	endproc;

	proc bool OnTimer(int p_iID)
		if (p_iID == m_iTimer) then
			//L CGameWrap.LogSpam("UI.RessourceBar","OnTimer()");
			Update_FullRes();
		endif;
		return true;
	endproc;

	proc color GetColorForFullRes()
		var color xCol={{0,0,0,255}};

		if (m_iTick == 0 ) then		xCol.SetRed(40);
		elseif (m_iTick == 1 )  then	xCol.SetRed(60);
		elseif (m_iTick == 2 )  then	xCol.SetRed(80);
		elseif (m_iTick == 3 )  then	xCol.SetRed(100);
		elseif (m_iTick == 4 )  then	xCol.SetRed(120);
		elseif (m_iTick == 5 )  then	xCol.SetRed(140);
		elseif (m_iTick == 6 )  then	xCol.SetRed(160);
		elseif (m_iTick == 7 )  then	xCol.SetRed(180);
		elseif (m_iTick == 8 )  then	xCol.SetRed(200);
		elseif (m_iTick == 9 )  then	xCol.SetRed(220);
		elseif (m_iTick == 10 ) then	xCol.SetRed(240);
		elseif (m_iTick == 11 ) then	xCol.SetRed(220);
		elseif (m_iTick == 12 ) then	xCol.SetRed(200);
		elseif (m_iTick == 13 ) then	xCol.SetRed(180);
		elseif (m_iTick == 14 ) then	xCol.SetRed(160);
		elseif (m_iTick == 15 ) then	xCol.SetRed(140);
		elseif (m_iTick == 16 ) then	xCol.SetRed(120);
		elseif (m_iTick == 17 ) then	xCol.SetRed(100);
		elseif (m_iTick == 18 ) then	xCol.SetRed(80);
		elseif (m_iTick == 19 ) then	xCol.SetRed(60);
		elseif (m_iTick == 20 ) then	xCol.SetRed(40);
		elseif (m_iTick == 21 ) then	xCol.SetRed(20);
		elseif (m_iTick == 22 ) then	xCol.SetRed(0);
		elseif (m_iTick == 23 ) then	m_iTick = 0;
		endif;
		return xCol;
	endproc;
endclass;


