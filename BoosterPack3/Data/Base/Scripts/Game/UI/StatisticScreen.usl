class CGraphType inherit CItemData
	var	int	m_iType;

	export constructor( bitset p_dwType )
		m_iType = p_dwType.ToInt();
	endconstructor;

	export destructor()
	enddestructor;

	export proc int GetType( )
		return( m_iType );
	endproc;
endclass;

class CGraphsScreen inherit CStaticCtrl

 	var ^CGraphStatic			m_pxGraph;

 	var ^CDropList				m_pxStatisticItem;
 	var ^CStaticCtrl			m_pxDropListText;

 	var int 					m_iValueType;
 	var int						m_iValueIndex;

 	var ^CPlayerListScreen		m_pxPlayer;
	var array ^CCheckBox 		m_apxPlayerCheckBoxes;
	var array int 				m_aiPlayers;

	var	^CLevelInfo				m_pxLevelInfo;
	var ^CStatisticMgrClient	m_pxStatisticMgr;

	var array ^CStaticCtrl		m_apxScaleLineTexts;
	var array ^CStaticCtrl		m_apxScaleColTexts;

	export const int 			GSPOSX				=	165;
	export const int 			GSPOSY				=	15;
	export const int 			GSWIDTH				=	668;
	export const int 			GSHEIGHT			=	372;
	export const int 			STDBORDER			=	20;
	export const int 			GSHEIGHTMULT		=	372-2*20;//(GSHEIGHT-2*STDBORDER);
	export const int 			GSWIDTHTMULT		=	668-2*20;//(GSWIDTH-2*STDBORDER);
	export const color 			STDCOLOR			=	{{  84,	 86, 83, 236 }};
	export const color 			STDTEXTCOLOR		=	{{ 152, 133, 99, 255 }};

	export const int 			PLAYERLISTX			=	15;
	export const int 			PLAYERLISTY			=	20;
	export const int 			PLAYERCOLORSTARTX	=	20;

	export const int			SCALETEXTS 			=	5;


 	export constructor()
 		CreateGraph();
 		m_pxStatisticItem^.Select( 0 );
 		OnChangeStatisticType();
 		DrawGraph();
 	endconstructor;

 	export destructor()
 		DestroyGraph();
 	enddestructor;

 	proc bool OnCheckPlayerCB()
 		DrawGraph();
 		InvalidateWindow();
 		return (true);
 	endproc;

 	proc void CreateGraph()
 		m_pxLevelInfo 		= ^(CGameWrap.GetClient().GetLevelInfo());
 		m_pxStatisticMgr	= ^(CGameWrap.GetStatisticMgr());

 		m_pxGraph = new CGraphStatic;
 		m_pxGraph^.SetVisible( true );
 		m_pxGraph^.SetTextColor( STDTEXTCOLOR );
 		m_pxGraph^.SetSize( GSWIDTH, GSHEIGHT );
 		m_pxGraph^.SetPos( GSPOSX, GSPOSY + 15 );
 		m_pxGraph^.SetVisible( true );
 		m_pxGraph^.SetText( CLocalizer.Get().Translate( "_UI_StatScre_Label_Graphscene" ) );

 		m_pxPlayer = new CPlayerListScreen( false );
 		m_pxPlayer^.SetSize( 170, 400 );
 		m_pxPlayer^.SetPos( PLAYERLISTX, GSPOSY + 10 );
 		m_pxPlayer^.SetVisible( true );
 		m_pxPlayer^.Init();

		// scale texts along x-axis
		var int iStepX=((GSWIDTH-(2*STDBORDER))/4)-5;
		var int i=0;
		for(i=0)cond(i<=SCALETEXTS)iter(i++)do
			var ^CStaticCtrl pxNewText = new CStaticCtrl();
			pxNewText^.SetPos( GSPOSX+STDBORDER+iStepX*(i), GSHEIGHT + 10 );
			pxNewText^.SetSize( 25, 25 );
			pxNewText^.SetTextColor(STDCOLOR);
			pxNewText^.SetText("0:00");
			pxNewText^.SetTextAlign(0);
			pxNewText^.SetVisible(true);
			m_apxScaleLineTexts.AddEntry(pxNewText);
			AddChild( pxNewText );
		endfor;

		// scale texts a long y-axis
		var int iStepY=((GSHEIGHT-(2*STDBORDER))/4);
		for(i=SCALETEXTS)cond(i>0)iter(i--)do
			var ^CStaticCtrl pxNewText = new CStaticCtrl();
			pxNewText^.SetPos( GSPOSX+GSWIDTH-10, GSPOSY+STDBORDER+iStepY*(i-1) );
			pxNewText^.SetSize( 25, 25 );
			pxNewText^.SetTextColor(STDCOLOR);
			pxNewText^.SetText("0");
			pxNewText^.SetTextAlign(0);
			pxNewText^.SetVisible(true);
			m_apxScaleColTexts.AddEntry(pxNewText);
			AddChild( pxNewText );
		endfor;

 		m_pxDropListText = new CStaticCtrl;
 		m_pxDropListText^.SetTextColor( STDTEXTCOLOR );
		m_pxDropListText^.SetSize( 100, 25 );
		m_pxDropListText^.SetText( CLocalizer.Get().Translate( "_UI_StatScre_Label_Category" ) );
		m_pxDropListText^.SetTextAlign( 0 );
		m_pxDropListText^.SetPos( GSPOSX + 20, GSPOSY + 5 );
		m_pxDropListText^.SetVisible( true );

 		m_pxStatisticItem = new CDropList();
		m_pxStatisticItem^.SetMaxPopUpListHeight( CGraphData.End.ToInt() * 25 );
		m_pxStatisticItem^.SetSize( 250, 15 );
		m_pxStatisticItem^.SetPos( GSPOSX + 110 , GSPOSY );

		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllUnits" ),			new CGraphType( CGraphData.AllUnits));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllCivilians" ),		new CGraphType( CGraphData.AllCivilians));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllMilitary" ),			new CGraphType( CGraphData.AllMilitary));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllBuildings" ),		new CGraphType( CGraphData.AllBuildings));

		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllResource" ),			new CGraphType( CGraphData.AllResources));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllFood" ),				new CGraphType( CGraphData.Food));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllWood" ), 			new CGraphType( CGraphData.Wood));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllStone" ), 			new CGraphType( CGraphData.Stone));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllSkulls" ), 			new CGraphType( CGraphData.Skulls));

		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllResourceTotal" ),	new CGraphType( CGraphData.AllResourcesTotal));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllFoodTotal" ), 		new CGraphType( CGraphData.FoodTotal));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllWoodTotal" ), 		new CGraphType( CGraphData.WoodTotal));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllStoneTotal" ), 		new CGraphType( CGraphData.StoneTotal));
		m_pxStatisticItem^.AddItem( CLocalizer.Get().Translate( "_UI_StatScre_Graph_AllSkullsTotal" ),		new CGraphType( CGraphData.SkullsTotal));
		m_pxStatisticItem^.Select( m_iValueIndex );
		m_pxStatisticItem^.Select(0);
//L		KLog.LogSpam("MaSc","m_iValueIndex="+m_iValueIndex.ToString());
		m_pxStatisticItem^.m_xOnChange = OnChangeStatisticType;
		
		m_aiPlayers=0;
		var ^CStatisticMgrClient pxStatisticMgr=^(CGameWrap.GetStatisticMgr());
		var int iPlayer;
		var int iCnt=0;
		for(iPlayer=0)cond(iPlayer<8)iter(iPlayer++)do
			if(!pxStatisticMgr^.PlayerExists(iPlayer))then
				continue;
			endif;			
			var ^CCheckBox	pxNewCB = new CCheckBox();
			pxNewCB^.SetPos(0, GSPOSY+35+(iCnt*25));
			pxNewCB^.SetSize(25,25);
			pxNewCB^.SetChecked(1);
			pxNewCB^.SetVisible(true);
			m_apxPlayerCheckBoxes.AddEntry(pxNewCB);
			AddChild(pxNewCB);
			pxNewCB^.m_xOnStateChange=OnCheckPlayerCB;
			m_aiPlayers.AddEntry(iPlayer);
			iCnt++;
		endfor;

		AddChild( m_pxGraph );
 		AddChild( m_pxPlayer );
 		AddChild( m_pxDropListText );
 		AddChild( m_pxStatisticItem );
 	endproc;

 	proc void	DestroyGraph( )
 		if ( m_pxGraph != null ) then
 			m_pxGraph^.Destroy();
 			m_pxGraph = null;
 		endif;

 		if ( m_pxPlayer != null ) then
 			m_pxPlayer^.Destroy();
 			m_pxPlayer = null;
 		endif;

 		if ( m_pxDropListText != null ) then
 			m_pxDropListText^.Destroy();
 			m_pxDropListText = null;
 		endif;

 		if ( m_pxStatisticItem != null ) then
 			m_pxStatisticItem^.Destroy();
 			m_pxStatisticItem = null;
 		endif;

 		var int i,iC=m_apxPlayerCheckBoxes.NumEntries();
		for(i=0)cond(i<iC)iter(i++) do
			if(m_apxPlayerCheckBoxes[i]!=null)then
				m_apxPlayerCheckBoxes[i]^.Destroy();
				m_apxPlayerCheckBoxes[i]=null;
			endif;
		endfor;

		m_apxPlayerCheckBoxes = 0;
		m_aiPlayers=0;
 		m_pxLevelInfo = null;
 		m_pxStatisticMgr = null;
 	endproc;

 	proc bool OnChangeStatisticType()
 		m_iValueIndex	= m_pxStatisticItem^.GetSelectedItem();
 		m_iValueType = (cast<^CGraphType>( m_pxStatisticItem^.GetItemData( m_iValueIndex )))^.GetType();
//L 		KLog.LogSpam("MaSc", "OnChangeStatisticType m_iValueIndex="+m_iValueIndex.ToString()+" m_iValueType="+m_iValueType.ToString());

 		DrawGraph();
		InvalidateWindow();
 		return true;
	endproc;

 	export proc void Update()
	endproc;

 	export proc void DrawGraph()
 		m_pxGraph^.ClearCanvas();

//L		KLog.LogSpam("MaSc","DrawGraph m_iValueIndex="+m_iValueIndex.ToString()+" m_iValueType="+m_iValueType.ToString());

 		// grey lines for graph
		m_pxGraph^.AddLine( STDBORDER,				GSHEIGHT - STDBORDER,	GSWIDTH - STDBORDER,	GSHEIGHT -STDBORDER, STDCOLOR);
		m_pxGraph^.AddLine( GSWIDTH - STDBORDER,	GSHEIGHT - STDBORDER,	GSWIDTH - STDBORDER,	STDBORDER + 1, STDCOLOR);
		m_pxGraph^.AddLine( STDBORDER, STDBORDER,	STDBORDER,				GSHEIGHT - STDBORDER,	STDCOLOR);
		m_pxGraph^.AddLine( STDBORDER, STDBORDER,	GSWIDTH - STDBORDER,	STDBORDER,				STDCOLOR);

		var int iStepX=((GSWIDTH-(2*STDBORDER))/4);
 		m_pxGraph^.AddLine(STDBORDER+iStepX  ,GSHEIGHT-STDBORDER, STDBORDER+iStepX ,  STDBORDER, STDCOLOR);
 		m_pxGraph^.AddLine(STDBORDER+iStepX*2,GSHEIGHT-STDBORDER, STDBORDER+iStepX*2, STDBORDER, STDCOLOR);
 		m_pxGraph^.AddLine(STDBORDER+iStepX*3,GSHEIGHT-STDBORDER, STDBORDER+iStepX*3, STDBORDER, STDCOLOR);

 		CGameWrap.GetStatisticMgr().PrepareData();

 		var int iFirstTS	= m_pxStatisticMgr^.GetFirstTimeStamp();
 		var int iLastTS		= m_pxStatisticMgr^.GetLastTimeStamp();
 		var int iTimePeriod	= iLastTS - iFirstTS;

 		var	int	iTempVal		= 0;
 		var	int	iHiVal			= 0;

		var int i,iC=m_apxPlayerCheckBoxes.NumEntries();
 		for(i=0)cond(i<iC)iter(i++)do
 			if(m_apxPlayerCheckBoxes[i]^.GetChecked()==0) then
 				continue;
 			endif;
 			var int iPlayer=m_aiPlayers[i];
 			if(CGameWrap.GetStatisticMgr().HasData()==false) then
 				iTempVal = 0;
 			else
 				if ( ( m_iValueType >= CGraphData.FoodTotal.ToInt() ) && ( m_iValueType <= CGraphData.AllResourcesTotal.ToInt() ) ) then
	 				iTempVal = m_pxStatisticMgr^.GetMaxSumPos( iPlayer, m_iValueType );
	 			else
	 				iTempVal = m_pxStatisticMgr^.GetMaxSum( iPlayer, m_iValueType );
	 			endif;
 			endif;

 			if ( iTempVal > iHiVal ) then
 				iHiVal = iTempVal;
 			endif;

 		endfor;

  		DrawScaleRowTexts(iLastTS);
 		DrawScaleColTexts(iHiVal);

 		if(iHiVal==0)then
 			return;
 		endif;

 		var	int iTimeStep=iTimePeriod/(GSWIDTHTMULT+1);

		var ^CLevelInfoClient pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
		
		iC=m_apxPlayerCheckBoxes.NumEntries();
 		for(i=0)cond(i<iC)iter(i++)do
			if(m_apxPlayerCheckBoxes[i]^.GetChecked()==0) then
				continue;
			endif;
			var int iPlayer=m_aiPlayers[i];

			var	int		iX				= 0,
 						iY				= 0,
 						iValue			= 0,
 						iXLast			= 0,
 						iYLast			= 0,
 						iTime			= iFirstTS;

			
			var color xPlayerColor=pxLevelInfo^.GetPlayerColor(iPlayer); 			

			for(iX=0)cond(iX<=GSWIDTHTMULT)iter(iX+=2) do
				if ( iX < GSWIDTHTMULT ) then
					iTime = iFirstTS + (iTimeStep * iX);
				else
					iTime = iLastTS-1;
				endif;

				if ( ( m_iValueType >= CGraphData.FoodTotal.ToInt() ) && ( m_iValueType <= CGraphData.AllResourcesTotal.ToInt() ) ) then
 					iValue = m_pxStatisticMgr^.GetSumPosAt( iPlayer, m_iValueType, iTime );
 				else
 					iValue = m_pxStatisticMgr^.GetSumAt( iPlayer, m_iValueType, iTime );
 				endif;

 				if(iValue<0)then
 					iValue=0;	//HACK bis wir die gecheateten Resourcen drinn haben
 				endif;

 				iY = ( iValue * GSHEIGHTMULT ) / iHiVal;

 				if ( iX > 0 ) then
 					m_pxGraph^.AddLine( iXLast + STDBORDER, (GSHEIGHTMULT-iYLast)+STDBORDER, iX+STDBORDER, (GSHEIGHTMULT-iY)+STDBORDER, xPlayerColor );
 				endif;

 				iXLast = iX;
 				iYLast = iY;
 			endfor;
 		endfor;
	endproc;

	proc void DrawScaleRowTexts(int p_iLastTimeStamp)
		//KLog.LogSpam("MaSc","p_iLastTimeStamp="+p_iLastTimeStamp.ToString());
		var int i=0;
		var int iTimeStep=p_iLastTimeStamp/(SCALETEXTS-1);
		for(i=0)cond(i<=SCALETEXTS)iter(i++)do
			var int iTime=(iTimeStep*i)/10;
			var	int	iHour=iTime/3600;
			var	int	iMinute=(iTime%3600) / 60;
			var string sText=iHour.ToString()+":";

			if(iMinute<10)then
				sText+="0"+iMinute.ToString();
			else
				sText+=iMinute.ToString();
			endif;

			//KLog.LogSpam("MaSc","i="+i.ToString()+"sText"+sText);
			m_apxScaleLineTexts[i]^.SetText(sText);
		endfor;
	endproc;

	proc void DrawScaleColTexts(int p_iMaxValue)
		//KLog.LogSpam("MaSc","p_iMaxValue="+p_iMaxValue.ToString());
		var int i=0;
		var int iValStep=((p_iMaxValue.ToReal()/(SCALETEXTS-1).ToReal())).ToInt();
		for(i=(SCALETEXTS-1))cond(i>0)iter(i--)do
			var int iValue=p_iMaxValue;
			if(i!=(SCALETEXTS-1))then
				iValue=iValStep*i;
			endif;
			//KLog.LogSpam("MaSc","i="+i.ToString()+" iValue="+iValue.ToString());
			m_apxScaleColTexts[i]^.SetText((iValue).ToString());
		endfor;
	endproc;

endclass;


class CPlayerListScreen inherit CStaticCtrl

	var int 				m_iNumPlayers;
	var array ^CStaticCtrl	m_apxPlayerNames;
	var array ^CStaticCtrl	m_apxPlayerColor;
	var array ^CStaticCtrl	m_apxBackground;
	var color				m_xPlayerNameColor;

	export const int 		PLAYERROWX		= 5;
	export const int 		PLAYERROWY		= 25;

	export const int 		ROWHEIGHT		= 25;
	export const int 		ICONWIDTH		= 25;
	export const int 		PLAYERNAMEWIDTH	= 100;

	var array ^CStaticCtrl	m_apxColumnEndLine;
	var bool				m_bUseEndColumnLine;

	export constructor(bool p_bUseEndColumnLine)
		m_iNumPlayers=0;
		m_xPlayerNameColor={{152,133,99,255}};

		var int i=0;
		for(i=0)cond(i<8)iter(i++)do

			var ^CStaticCtrl pxNewBG;
			pxNewBG=new CStaticCtrl();
			pxNewBG^.SetSize(170,25);
			pxNewBG^.SetPos(PLAYERROWX+5, PLAYERROWY+i*ROWHEIGHT);
			var ^CCardBitmap pxBmp=CGameInst.GetBitmapMgr().GetBlendBitmap("25 ,layer statistic_playerslot");
			pxNewBG^.SetBitmap(pxBmp^.GetBitmap());
			pxNewBG^.SetVisible(false);
			m_apxBackground.AddEntry(pxNewBG);

			var ^CStaticCtrl pxNewCtrl;
			pxNewCtrl=new CStaticCtrl();
			pxNewCtrl^.SetSize(PLAYERNAMEWIDTH,ROWHEIGHT);
			pxNewCtrl^.SetPos(ICONWIDTH+5, 1);
			pxNewCtrl^.SetText("PlayerNameDummy "+i.ToString());
			pxNewCtrl^.SetTextAlign(0);
			pxNewCtrl^.SetTextColor(m_xPlayerNameColor);
			pxNewCtrl^.SetVisible(false);
			m_apxPlayerNames.AddEntry(pxNewCtrl);

			pxNewCtrl=new CStaticCtrl();
			pxNewCtrl^.SetSize(ICONWIDTH, ROWHEIGHT);
			pxNewCtrl^.SetPos(1, 1);
			pxNewCtrl^.SetTextColor(m_xPlayerNameColor);
			pxNewCtrl^.SetText("X");
			pxNewCtrl^.SetTextAlign(0);
			pxNewCtrl^.SetVisible(false);
			m_apxPlayerColor.AddEntry(pxNewCtrl);

			pxNewBG^.AddChild(m_apxPlayerNames[i]);
			pxNewBG^.AddChild(m_apxPlayerColor[i]);
			AddChild(pxNewBG);

			m_bUseEndColumnLine=p_bUseEndColumnLine;
		endfor;

	endconstructor;

	export destructor()
		var int i=0;
		for(i=0)cond(i<8)iter(i++)do
			if(m_apxPlayerNames[i]!=null)then
 				m_apxPlayerNames[i]^.Destroy();
 			endif;
 			if(m_apxPlayerColor[i]!=null)then
 				m_apxPlayerColor[i]^.Destroy();
 			endif;
 			if(m_apxBackground[i]!=null)then
 				m_apxBackground[i]^.Destroy();
 			endif;
		endfor;
	enddestructor;

	export proc void Update()
	endproc;

	export proc void Init() // pointer to data
		
		// search the used playerslots and fill the playerinfo in our screen
		var ^CStatisticMgrClient	pxStatisticMgr	= ^(CGameWrap.GetStatisticMgr());
		
		//var ^CLevelInfoClient pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
		var int iPlayerCount=pxStatisticMgr^.GetNumPlayers();
		m_iNumPlayers=iPlayerCount;
				
		var int iIdx=0;
		var int i=0;				
		for (i=0) cond(i<8) iter(i++) do			
			if(pxStatisticMgr^.PlayerExists(i) == false) then
				continue;
			endif;
			/*
			var ^CLevelInfo.CPlayerSlot pxPlayerSlot=pxLevelInfo^.GetOwnerPlayerSlot(i);
			if(pxPlayerSlot==null)then 					
				continue; 
			endif;
			*/
			var string sPlayerName=pxStatisticMgr^.GetPlayerName(i);
			m_apxPlayerNames[iIdx]^.SetText( CLocalizer.Get().Translate(sPlayerName));
			var int iColorIdx = pxStatisticMgr^.GetPlayerColorIndex(i);
			m_apxPlayerColor[iIdx]^.SetText(iColorIdx.ToString());

			var bool bWinner=pxStatisticMgr^.IsWinner(i);
			var string sBlend="30 ,fill TeamCol "+iColorIdx.ToString()+" 4 20 20";
			if(bWinner)then
				sBlend+=",layer info_player_winner";
			endif;			
			//Windows.DbgBreak();
			var ^CCardBitmap pxBmp=CGameInst.GetBitmapMgr().GetBlendBitmap(sBlend);
			m_apxPlayerColor[iIdx]^.SetBitmap(pxBmp^.GetBitmap());
			m_apxBackground[iIdx]^.SetVisible(i<m_iNumPlayers);
			m_apxPlayerNames[iIdx]^.SetVisible(i<m_iNumPlayers);
			m_apxPlayerColor[iIdx]^.SetVisible(i<m_iNumPlayers);
			iIdx++;
		endfor;
		
		/*
		if(m_bUseEndColumnLine==true)then
			var int j;
			for(j=0)cond(j<i)iter(j++)do
				var ^CStaticCtrl pxNewEnd=new CStaticCtrl;
				pxNewEnd^.SetSize(1,ROWHEIGHT);
				//KLog.LogWarn("StatisticScreen", "PlayerList: j="+j.ToString()+"j*(ROWHEIGHT-1)= "+(j*(ROWHEIGHT-1)).ToString());
				pxNewEnd^.SetPos(169,PLAYERROWY+(j*ROWHEIGHT));
				var ^CCardBitmap pxBmp=CGameInst.GetBitmapMgr().GetBlendBitmap("29, layer statistic_tablecolumnend");
				pxNewEnd^.SetBitmap(pxBmp^.GetBitmap());
				pxNewEnd^.SetVisible(true);
				m_apxColumnEndLine.AddEntry(pxNewEnd);
				AddChild(pxNewEnd);
			endfor;
		endif;
		*/
	endproc;

endclass;


class CTableColumn inherit CStaticCtrl

	var ^CStaticCtrl		m_pxNameBG;
	var ^CStaticCtrl		m_pxName;
	var ^CStaticCtrl 		m_pxColumnEndLine;

	var array ^CStaticCtrl	m_apxBG;
	var array ^CStaticCtrl	m_apxValues;
	var array ^CStaticCtrl	m_apxColumnEndLine;

	export const int		ROWHEIGHT=25;
	export const color		STDTEXTCOLOR={{152,133,99,255}};

	export const int 		ENDCOLPOSX = 862;

	export constructor( string p_sColumnName, int p_iValueType, int p_iX, int p_iY, int p_iWidth, int p_iHeight, bool p_bEndColumn )
		var ^CCardBitmap 			pxBmp 		= CGameInst.GetBitmapMgr().GetBlendBitmap( "28, layer statistic_tablecolumnhead" );
		var ^CLevelInfoClient		pxLevelInfo	= ^(CGameWrap.GetClient().GetLevelInfo());
		var	^CStatisticMgrClient	pxStatistic	= ^(CGameWrap.GetStatisticMgr());

		m_pxNameBG = new CStaticCtrl();
		m_pxNameBG^.SetSize( p_iWidth, ROWHEIGHT );
		m_pxNameBG^.SetPos( p_iX, p_iY );
		m_pxNameBG^.SetBitmap( pxBmp^.GetBitmap() );
		m_pxNameBG^.SetVisible( true );
		AddChild( m_pxNameBG );

		m_pxName=new CStaticCtrl();
		m_pxName^.SetTextColor(STDTEXTCOLOR);
		m_pxName^.SetSize( p_iWidth, ROWHEIGHT );
		m_pxName^.SetText(p_sColumnName);
		m_pxName^.SetTextAlign(0);
		m_pxName^.SetPos(7,5);
		m_pxNameBG^.AddChild(m_pxName);

		if(p_bEndColumn)then
			m_pxColumnEndLine = new CStaticCtrl();
			var ^CCardBitmap	pxEndBmp 		= CGameInst.GetBitmapMgr().GetBlendBitmap( "29, layer statistic_tablecolumnend" );

			m_pxColumnEndLine^.SetSize( 1, ROWHEIGHT );
			m_pxColumnEndLine^.SetPos( ENDCOLPOSX, p_iY );
			m_pxColumnEndLine^.SetBitmap( pxEndBmp^.GetBitmap() );
			m_pxColumnEndLine^.SetVisible( true );
			AddChild( m_pxColumnEndLine );
		endif;

		var ^CCardBitmap	pxBGBitmap		= CGameInst.GetBitmapMgr().GetBlendBitmap("28, layer statistic_tablecolumnrow");
		
		var ^CStatisticMgrClient	pxStatisticMgr	= ^(CGameWrap.GetStatisticMgr());
		var int iRow=0;
		var int iPlayer=0;
		for (iPlayer=0) cond(iPlayer<8) iter(iPlayer++) do
			if(pxStatisticMgr^.PlayerExists(iPlayer) == false) then
				continue;
			endif;	
			var	string			sValue	= "---";

			if (( p_iValueType == CTableData.Fights_UnitsLost.ToInt() )		||
	 			( p_iValueType == CTableData.Fights_BuildingsLost.ToInt() )) then
	 			sValue = (-pxStatistic^.GetSumNeg( iPlayer, p_iValueType )).ToString();
	 		elseif ( p_iValueType == CTableData.Invention_Epoch_2.ToInt() ) then
	 			sValue = ParseTime( pxStatistic^.GetFirstTimeSampleValue( iPlayer, CStatisticSample.Epoch.ToInt(), 2 ) );
	 		elseif ( p_iValueType == CTableData.Invention_Epoch_3.ToInt() ) then
	 			sValue = ParseTime( pxStatistic^.GetFirstTimeSampleValue( iPlayer, CStatisticSample.Epoch.ToInt(), 3 ) );
	 		elseif ( p_iValueType == CTableData.Invention_Epoch_4.ToInt() ) then
	 			sValue = ParseTime( pxStatistic^.GetFirstTimeSampleValue( iPlayer, CStatisticSample.Epoch.ToInt(), 4 ) );
	 		elseif ( p_iValueType == CTableData.Invention_Epoch_5.ToInt() ) then
	 			sValue = ParseTime( pxStatistic^.GetFirstTimeSampleValue( iPlayer, CStatisticSample.Epoch.ToInt(), 5 ) );
	 		else
	 			sValue	= pxStatistic^.GetSumPos( iPlayer, p_iValueType ).ToString();
			endif;
			var	^CStaticCtrl	pxNewBG = new CStaticCtrl();

			pxNewBG^.SetSize(p_iWidth-1, ROWHEIGHT);
			pxNewBG^.SetPos(p_iX, p_iY+(iRow+1)*ROWHEIGHT);
			pxNewBG^.SetBitmap(pxBGBitmap^.GetBitmap() );
			pxNewBG^.SetVisible(true);
			m_apxBG.AddEntry(pxNewBG);
			AddChild(pxNewBG);

			var	^CStaticCtrl pxNewVal= new CStaticCtrl();
			pxNewVal^.SetSize(p_iWidth - 1, ROWHEIGHT);
			pxNewVal^.SetTextColor( STDTEXTCOLOR);
			pxNewVal^.SetPos(7, 5);
			pxNewVal^.SetTextAlign(0);
			pxNewVal^.SetText(sValue);
			pxNewVal^.SetVisible(true);
			m_apxValues.AddEntry(pxNewVal);
			pxNewBG^.AddChild(pxNewVal);

			if ( p_bEndColumn ) then
				var	^CStaticCtrl pxEndCol = new CStaticCtrl();
				var ^CCardBitmap pxEndBmp = CGameInst.GetBitmapMgr().GetBlendBitmap( "29, layer statistic_tablecolumnend" );

				pxEndCol^.SetSize(1,ROWHEIGHT);
				pxEndCol^.SetPos(ENDCOLPOSX, p_iY+(iRow+1)*ROWHEIGHT);
				pxEndCol^.SetBitmap(pxEndBmp^.GetBitmap());
				pxEndCol^.SetVisible( true );
				m_apxColumnEndLine.AddEntry( pxEndCol );
				AddChild( pxEndCol );
			endif;
			iRow++;
		endfor;
	endconstructor;

	proc string	ParseTime( int p_iTime )
		if ( p_iTime == -1 ) then
			return( CLocalizer.Get().Translate("_UI_StatScre_Label_Failed") );
		else
			var int		iTime		= p_iTime / 10;
			var int		iHour 		= iTime / 3600;
			var int		iMinutes	= ( iTime % 3600 ) / 60;
			var int		iSeconds	= ( iTime % 60 );

			var	string	sHour		= CLocalizer.Get().Translate( "_UI_Time_Hour_Short" );
			var	string	sMinute		= CLocalizer.Get().Translate( "_UI_Time_Minute_Short" );
			var string	sSeconds	= CLocalizer.Get().Translate( "_UI_Time_Second_Short" );

			if ( iHour > 0 ) then
				return( iHour.ToString() + sHour + iMinutes.ToString() + sMinute + iSeconds.ToString() + sSeconds );
			else
				return( iMinutes.ToString() + sMinute + iSeconds.ToString() + sSeconds );
			endif;
		endif;
	endproc;
/*
	export constructor( string p_sColumnName, int p_iValueType, int p_iSearchValue, int p_iX, int p_iY, int p_iWidth, int p_iHeight, bool p_bEndColumn )
		var ^CCardBitmap 			pxBmp 		= CGameInst.GetBitmapMgr().GetBlendBitmap( "28, layer statistic_tablecolumnhead" );
		var ^CLevelInfoClient		pxLevelInfo	= ^(CGameWrap.GetClient().GetLevelInfo());
		var	^CStatisticMgrClient	pxStatistic	= ^(CGameWrap.GetStatisticMgr());

		m_pxNameBG = new CStaticCtrl();
		m_pxNameBG^.SetSize( p_iWidth, ROWHEIGHT );
		m_pxNameBG^.SetPos( p_iX, p_iY );
		m_pxNameBG^.SetBitmap( pxBmp^.GetBitmap() );
		m_pxNameBG^.SetVisible( true );
		AddChild( m_pxNameBG );

		m_pxName=new CStaticCtrl();
		m_pxName^.SetTextColor(STDTEXTCOLOR);
		m_pxName^.SetSize( p_iWidth, ROWHEIGHT );
		m_pxName^.SetText(p_sColumnName);
		m_pxName^.SetTextAlign(0);
		m_pxName^.SetPos(7,5);
		m_pxNameBG^.AddChild(m_pxName);

		if ( p_bEndColumn ) then
			m_pxColumnEndLine = new CStaticCtrl();
			var ^CCardBitmap	pxEndBmp = CGameInst.GetBitmapMgr().GetBlendBitmap( "29, layer statistic_tablecolumnend" );

			m_pxColumnEndLine^.SetSize( 1, ROWHEIGHT );
			m_pxColumnEndLine^.SetPos( ENDCOLPOSX, p_iY );
			m_pxColumnEndLine^.SetBitmap( pxEndBmp^.GetBitmap() );
			m_pxColumnEndLine^.SetVisible( true );
			AddChild( m_pxColumnEndLine );
		endif;

		var	int				iPlayer			= 0,
							iPlayerCount	= pxLevelInfo^.GetNumPlayers();
		var ^CCardBitmap	pxBGBitmap		= CGameInst.GetBitmapMgr().GetBlendBitmap("28, layer statistic_tablecolumnrow");

		for ( iPlayer = 0 )cond( iPlayer < iPlayerCount )iter(++iPlayer) do
			var	int				iTime 	= pxStatistic^.GetFirstTimeDelta( iPlayer, p_iValueType, p_iSearchValue );
			var	^CStaticCtrl	pxNewBG	= new CStaticCtrl();

			var	string			sText	= ParseTime( iTime );

			pxNewBG^.SetSize( p_iWidth - 1, ROWHEIGHT );
			pxNewBG^.SetPos( p_iX, p_iY + ( iPlayer + 1 ) * ROWHEIGHT );
			pxNewBG^.SetBitmap( pxBGBitmap^.GetBitmap() );
			pxNewBG^.SetVisible( true );
			m_apxBG.AddEntry( pxNewBG );
			AddChild( pxNewBG );

			var	^CStaticCtrl	pxNewVal= new CStaticCtrl();
			pxNewVal^.SetSize( p_iWidth - 1, ROWHEIGHT );
			pxNewVal^.SetTextColor( STDTEXTCOLOR );
			pxNewVal^.SetPos( 7, 5 );
			pxNewVal^.SetTextAlign( 0 );
			pxNewVal^.SetText( sText );
			pxNewVal^.SetVisible( true );
			m_apxValues.AddEntry( pxNewVal );
			pxNewBG^.AddChild( pxNewVal );

			if ( p_bEndColumn ) then
				var	^CStaticCtrl	pxEndCol = new CStaticCtrl();
				var ^CCardBitmap	pxEndBmp = CGameInst.GetBitmapMgr().GetBlendBitmap( "29, layer statistic_tablecolumnend" );

				pxEndCol^.SetSize( 1, ROWHEIGHT );
				pxEndCol^.SetPos( ENDCOLPOSX, p_iY + ( iPlayer + 1 ) * ROWHEIGHT );
				pxEndCol^.SetBitmap( pxEndBmp^.GetBitmap() );
				pxEndCol^.SetVisible( true );
				m_apxColumnEndLine.AddEntry( pxEndCol );
				AddChild( pxEndCol );
			endif;
		endfor;
	endconstructor;
*/
	export destructor()

		if ( m_pxNameBG != null ) then
			m_pxNameBG^.Destroy();
			m_pxNameBG = null;
		endif;

		if ( m_pxName != null ) then
			m_pxName^.Destroy();
			m_pxName = null;
		endif;

		if ( m_pxColumnEndLine != null ) then
			m_pxColumnEndLine^.Destroy();
			m_pxColumnEndLine = null;
		endif;

		var	int	iI;

		for( iI = 0 )cond( iI < m_apxBG.NumEntries() )iter( ++iI )do
			if ( m_apxBG[iI] != null ) then
				m_apxBG[iI]^.Destroy();
				m_apxBG[iI] = null;
			endif;
		endfor;

		for( iI = 0 )cond( iI < m_apxValues.NumEntries() )iter( ++iI )do
			if ( m_apxValues[iI] != null ) then
				m_apxValues[iI]^.Destroy();
				m_apxValues[iI] = null;
			endif;
		endfor;

		for( iI = 0 )cond( iI < m_apxColumnEndLine.NumEntries() )iter( ++iI )do
			if ( m_apxColumnEndLine[iI] != null ) then
				m_apxColumnEndLine[iI]^.Destroy();
				m_apxColumnEndLine[iI] = null;
			endif;
		endfor;

		m_apxBG = 0;
		m_apxValues = 0;
		m_apxColumnEndLine = 0;
	enddestructor;

	export proc void Update()
	endproc;

	proc int GetQuestBoni(^CQuestMgr.CQuest p_pxQuest)
		var ^CLevelInfo pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
		var int iDifficulty=pxLevelInfo^.GetGenericData()["Base/CurrentDifficulty"].ValueI();
		var int iBoni=p_pxQuest^.GetBoniEasy();
		if(iDifficulty==1)then
			iBoni=p_pxQuest^.GetBoniMiddle();
		elseif(iDifficulty==2)then
			iBoni=p_pxQuest^.GetBoniHard();
		endif;
		return iBoni;
	endproc;
endclass;


class CTablesScreen inherit CStaticCtrl
	export const int		TABLEWIDTH		= 668;
	export const int 		TABLEHEIGHT		= 400;
	export const int 		TABLESTARTX		= 185;
	export const int 		TABLESTARTY		= 25;

	var	^CPlayerListScreen	m_pxPlayer;
	var	array ^CTableColumn	m_apxDataList;
	var	int					m_iType;

	var int					m_iColumnPosX;
	var	int					m_iColumnWidth;

	var ^CTableColumn 	m_pxTestColumn;

	export constructor( int p_iType )
		m_pxPlayer =new CPlayerListScreen(false);
		m_pxPlayer^.SetSize( 170, 400 );
		m_pxPlayer^.SetPos( 15, TABLESTARTY );
		m_pxPlayer^.SetVisible(true);
		m_pxPlayer^.Init();
		AddChild(m_pxPlayer);
		Init( p_iType );

		m_iColumnPosX=TABLESTARTX;
 	endconstructor;

 	export destructor()
 	enddestructor;

 	export proc void Update()
	endproc;

	proc void	AddColumn( string p_sName, int p_iType, bool p_bEnd )
		var string	sLabel	= CLocalizer.Get().Translate( "_UI_StatScre_Col_" + p_sName );

		var	^CTableColumn	pxNewCol = new CTableColumn( sLabel, p_iType, m_iColumnPosX, TABLESTARTY, m_iColumnWidth, TABLEHEIGHT, p_bEnd );
		pxNewCol^.SetPos( 0, 0 );
		pxNewCol^.SetSize(875, TABLEHEIGHT);
		pxNewCol^.SetVisible( true );
		AddChild( pxNewCol );
		m_apxDataList.AddEntry( pxNewCol );
		m_iColumnPosX += m_iColumnWidth;
	endproc;

 	export proc void Init( int p_iType )
 		m_iColumnPosX = TABLESTARTX;
 		var	^CTableColumn	pxNewCol = null;
 		if ( p_iType == CStatsView.Overview.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 4;
 			AddColumn( "Economical",			CTableData.Overview_Economical.ToInt(),		false 	);
 			AddColumn( "Units",					CTableData.Overview_Units.ToInt(),			false 	);
 			AddColumn( "Buildings",				CTableData.Overview_Buildings.ToInt(),		false 	);
 			AddColumn( "Invention",				CTableData.Overview_Invention.ToInt(),		true 	);
 		elseif ( p_iType == CStatsView.Economical.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 6;
 			AddColumn( "Food",					CTableData.Economical_Food.ToInt(),			false 	);
 			AddColumn( "Wood",					CTableData.Economical_Wood.ToInt(),			false 	);
 			AddColumn( "Stone",					CTableData.Economical_Stone.ToInt(),		false 	);
 			AddColumn( "Skulls",				CTableData.Economical_Skulls.ToInt(),		false 	);
 			AddColumn( "Workers",				CTableData.Economical_Worker.ToInt(),		false 	);
 			AddColumn( "Tributesend",			CTableData.Economical_Tribute.ToInt(),		true 	);
 		elseif ( p_iType == CStatsView.Military.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 4;
 			AddColumn( "Infantry",				CTableData.Military_Infantry.ToInt(),		false 	);
 			AddColumn( "Animals",				CTableData.Military_Animals.ToInt(),		false 	);
 			AddColumn( "Vehicles",				CTableData.Military_Vehicles.ToInt(),		false	);
 			AddColumn( "Ships",					CTableData.Military_Ships.ToInt(),			true 	);
 		elseif ( p_iType == CStatsView.Buildings.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 3;
 			AddColumn( "Economybuildingsbuilt",	CTableData.Buildings_Economical.ToInt(),	false 	);
 			AddColumn( "Battlebuildingsbuilt",	CTableData.Buildings_Military.ToInt(),		false 	);
 			AddColumn( "Defensebuildingsbuilt",	CTableData.Buildings_Defense.ToInt(), 		true 	);
 		elseif ( p_iType == CStatsView.Fights.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 5;
 			AddColumn( "Unitslost",				CTableData.Fights_UnitsLost.ToInt(), 		false	);
 			AddColumn( "Buildingslost",			CTableData.Fights_BuildingsLost.ToInt(), 	false	);
 			AddColumn( "Enemieskilled",			CTableData.Fights_EnemiesKilled.ToInt(), 	false	);
 			AddColumn( "Buildingsdestroyed", 	CTableData.Fights_BuildingsRazed.ToInt(),	false	);
 			AddColumn( "Animalskilled",			CTableData.Fights_AnimalsKilled.ToInt(),	true	);
 		elseif ( p_iType == CStatsView.Invention.ToInt() ) then
 			m_iColumnWidth = TABLEWIDTH / 4;
 			AddColumn( "Level2",				CTableData.Invention_Epoch_2.ToInt(),		true 	);
 			AddColumn( "Level3",				CTableData.Invention_Epoch_3.ToInt(),		true 	);
 			AddColumn( "Level4",				CTableData.Invention_Epoch_4.ToInt(),		true 	);
 			AddColumn( "Level5",				CTableData.Invention_Epoch_5.ToInt(),		true 	);
 		elseif(p_iType==CStatsView.Quest.ToInt())then
 			m_iColumnWidth = TABLEWIDTH / 3;
 			AddColumn( "QuestsAll",				CTableData.Quest_QuestPointsAll.ToInt(),	true	);
 			AddColumn( "QuestsMain", 			CTableData.Quest_QuestPointsMain.ToInt(),	true	);
 			AddColumn( "QuestsBonus", 			CTableData.Quest_QuestPointsSub.ToInt(), 	true	);
 		endif;
	endproc;
endclass;


class CStatisticScreen inherit CStateUIWnd

	var ^CDesktop				m_pxDesktop;
	var ^CEndScreen				m_pxEndScreen;

	var	^CTabCtrl				m_pxTabCtrl;

	//var	^CStaticCtrlEx			m_pxBackground;

	var	^CTablesScreen			m_pxOverview;
	var	^CTablesScreen			m_pxEconomical;
	var	^CTablesScreen			m_pxMilitary;
	var	^CTablesScreen			m_pxBuildings;
	var	^CTablesScreen			m_pxFights;
	var	^CTablesScreen			m_pxInvention;
	var ^CTablesScreen			m_pxQuest;
	var	^CGraphsScreen			m_pxTimeLine;

	var bool					m_bMultiPlayer;
	var string					m_sReason;

	export const color 			STDTEXTCOLOR	= {{ 152, 133, 99, 255 }};
	export const int 			TABCTRLSIZEX	= 135;
	export const int 			TABCTRLSIZEY	= 27;
	export const int 			SCREENPOSY		= 7;

	export constructor(^CEndScreen	p_pxEndScreen)
		m_pxEndScreen = p_pxEndScreen;

		var ^CLevelInfoClient	pxLevelInfo	= ^(CGameWrap.GetClient().GetLevelInfo());
		var ^CPropDB			pxGenericDB	= ^(pxLevelInfo^.GetGenericData());
		m_bMultiPlayer=true;

		begin GetMultiplayer;
			var ^CPropDB.CNode pxMapType = pxGenericDB^.FindNode("Base/MapType", false );
			if(pxMapType!=null)then
				m_bMultiPlayer=(pxMapType^.Value()=="multiplayer");
			endif;
		end GetMultiplayer;
		if(m_bMultiPlayer)then
//L			KLog.LogSpam("MaSc","Multiplayer");
			if( !InitFromResource( "UI/StatisticScreen", "StatisticScreen" ) ) then
				return;
			endif;
		else
//L			KLog.LogSpam("MaSc","SinglePlayer");
			if(!InitFromResource( "UI/StatisticScreen", "StatisticScreenSP" ) ) then
				return;
			endif;
		endif;

		if ( CGameWrap.GetStatisticMgr().HasData() ) then
			CGameWrap.GetStatisticMgr().PrepareData();
		endif;

		m_pxDesktop = CClientWrap.GetDesktop();
		SetSize(930,580);
		SetPos( ( m_pxDesktop^.GetWidth() - GetWidth() ) / 2 , ( m_pxDesktop^.GetHeight() - GetHeight() ) / 2 );

		var ^CButton pxTmp=cast<CButton>(GetControl("OkayButton"));
		pxTmp^.SetText("  "+pxTmp^.GetText());
		pxTmp^.SetTextAlign(0);
		pxTmp^.m_xOnClick = OnOkay;
		m_pxTabCtrl = new CTabCtrl();
		//m_pxTabCtrl^.SetSize( 875, 420 );
		m_pxTabCtrl^.SetSize( 875, 440 );
		m_pxTabCtrl^.SetPos( 0, SCREENPOSY + 10 );
		m_pxTabCtrl^.SetVisible( true );
		AddChild( m_pxTabCtrl );

		m_pxOverview	= new CTablesScreen( CStatsView.Overview.ToInt() );
		m_pxOverview^.SetVisible( true );
		m_pxEconomical	= new CTablesScreen( CStatsView.Economical.ToInt() );
		m_pxEconomical^.SetVisible( true );
		m_pxMilitary	= new CTablesScreen( CStatsView.Military.ToInt() );
		m_pxMilitary^.SetVisible( true );
		m_pxBuildings	= new CTablesScreen( CStatsView.Buildings.ToInt() );
		m_pxBuildings^.SetVisible( true );
		m_pxFights		= new CTablesScreen( CStatsView.Fights.ToInt() );
		m_pxFights^.SetVisible( true );
		m_pxInvention	= new CTablesScreen( CStatsView.Invention.ToInt() );
		m_pxInvention^.SetVisible( true );
		if(!m_bMultiPlayer)then
			m_pxQuest= new CTablesScreen(CStatsView.Quest.ToInt());
			m_pxQuest^.SetVisible(true);
		endif;
		m_pxTimeLine	= new CGraphsScreen( );
		m_pxTimeLine^.SetVisible( true );

		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Overview" ), m_pxOverview, true);
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Economical" ), m_pxEconomical, true);
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Military" ),	m_pxMilitary,	true);
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Buildings" ), m_pxBuildings,	true);
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Fights" ), m_pxFights, true);
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Invention" ), m_pxInvention,	true);
		if(!m_bMultiPlayer)then
			m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_Quest" ),m_pxQuest,true);
		endif;
		m_pxTabCtrl^.AddTab( CLocalizer.Get().Translate( "_UI_StatScre_Tab_TimeLine" ),	m_pxTimeLine,	true);
		m_pxTabCtrl^.SelectTab( 0 );

	endconstructor;

	export destructor()
	enddestructor;

	export proc void Update()
	endproc;

	export proc void Init(string p_sParam)
	endproc;

	proc bool OnOkay()
		m_pxEndScreen^.OnCloseStats();
		Destroy();
		return true;
	endproc;

endclass;
