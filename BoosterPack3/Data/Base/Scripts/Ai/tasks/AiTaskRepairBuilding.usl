///CAiTaskRepairBuilding
class CAiTaskRepairBuilding inherit CAiTask

	var ^CAiModuleDefenseDefault 	m_pxDM;
	var ^CAiBrain					m_pxBrain;
	var ^CAiSensor					m_pxSensor;
	var ^CAiNodeInstance 			m_pxWorkerNI;
	var CAiObjWrap 					m_xTarget;
	var CAiObjWrapList 				m_xWorkers;
	
	var int 						m_iNumWorkers;
	var int 						m_iIdleWorkers;
	var int							m_iPlayerID;
	var int							m_iWarpgateCounter;
	
	var bool 						m_bRepairOrBuildUp;
	var bool						m_bWarpgate;
	
	var string						m_sPlayerID;
	
	

	///constructor
	export constructor(CAiObjWrap p_xTarget, bool p_bRepairOrBuildUp,^CAiNodeInstance p_pxWorkerNI)
		m_xTarget=p_xTarget;
		m_bRepairOrBuildUp=p_bRepairOrBuildUp;
		m_pxWorkerNI=p_pxWorkerNI;
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///returns this task's target
	export proc CAiObjWrap GetTarget()
		return m_xTarget;
	endproc;
	
	
	///Init
	export proc void Init(^CAiGoal p_pxGoal)
		super.Init(p_pxGoal);
		if(p_pxGoal==null)then return; endif;
				
		m_pxBrain = GetGoal()^.GetAiBrain(); 
		if(m_pxBrain==null)then return; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();	
		m_bWarpgate=m_pxSensor^.GetWarpGate();
		
		m_iWarpgateCounter=0;
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
		var int iType = 1+Random.GetInt()%iNumPlayers;
		
		var int iDifficulty;
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		if(pxCM^.GetDifficulty()=="Easy")then
			iDifficulty=20;
		elseif(pxCM^.GetDifficulty()=="Medium")then
			iDifficulty=10;
		else
			iDifficulty=5;
		endif;	
		SetThinkWait(iDifficulty+iType);		
				
		if(m_pxWorkerNI==null)then 
			KLog.LogWarn("AiTaskRepairBuilding","Missing Worker NI! (see AiGoalRepairBuildings)"); 
			return;
		endif;

		// create and set solution to repair the damage
		var ^CAiSolution pxSol=new CAiSolution();
		var CAiNeedPtr pxNd=CAiNeed.Create(true,1);
		pxNd.GetNeed()^.AddEntry(m_pxWorkerNI);
		pxNd.GetNeed()^.SetGlobal(false);
		pxSol^.AddRequired(pxNd);
		
		var CAiNeedPtr pxNd2=CAiNeed.Create(true,0);
		pxNd2.GetNeed()^.AddEntry(m_pxWorkerNI);
		pxNd2.GetNeed()^.SetGlobal(false);
		pxSol^.AddOptional(pxNd2);
		pxSol^.SetSubject(0);
		pxSol^.SetObject(-1);
		SetSolution(pxSol);
	endproc;
	
	
	///Shut
	export proc void Shut()
		var ^CAiSolution pxSol=GetSolution();
		if(pxSol!=null)then
			SetSolution(null);
		endif;
		super.Shut();
	endproc;
	
	
	///calculates building cost
	export proc real CalculateStartCost()
		var real fCost = 1.0;
		return fCost;
	endproc;
	
	
	///starts building task
	export proc bool Start()
		if(GetSolution()==null)then Abort(); return false; endif;
		if(!m_xTarget.IsValid())then Abort(); return false; endif;
		
		if(!CAiUtilityMgr.Get()^.CheckForEnemy(m_pxBrain, m_xTarget.GetPos()))then 
			Abort();
			return false; 
		endif;
		
		if(m_pxDM!=null)then
			if(m_pxDM^.IsDefending())then
				if(m_xTarget.IsWall()||m_xTarget.IsTower()||m_xTarget.IsGate()||m_xTarget.IsTrap())then
					Abort();
					return false;
				endif;
			endif;
		endif;
		
		if(m_pxSensor==null) then Abort(); return false; endif;
		
		var int iMaxHP=m_xTarget.GetAttribValueInt("maxhitpoints");
		var int iCurHP=m_xTarget.GetAttribValueInt("hitpoints");
		if(iCurHP>=iMaxHP)then
			Abort();
			return false;
		endif;
		
		var int iNeededWorkers=Math.Clamp(((iMaxHP-iCurHP)/1000),1,3);
		var ^CAiSolution	pxSol	= GetSolution();
		var CAiNeedPtr		pxNd	= pxSol^.GetRequired(0);
		var int 			iOutpostId;
		
		pxNd.GetNeed()^.SetNeededInstanceCount(1);
		pxNd = pxSol^.GetOptional(0);
		pxNd.GetNeed()^.SetNeededInstanceCount(iNeededWorkers-1);
		
		SetStarted();
		iOutpostId = m_pxSensor^.ComputeOutpostId(m_xTarget);
		var bool bSuccess = TryAllocate(pxSol, iOutpostId, 10);
		if(!bSuccess)then
			Abort();
			return false;
		endif;
		GetAllocation()^.SetTarget(m_xTarget.GetPos());
		if(m_xTarget.IsWallMapObj()) then
			if(m_xTarget.IsWall()) then
				GetAllocation()^.SetDIDCheckMode(CAiAllocation.DIDCM_ObjTargetWall);
			else
				GetAllocation()^.SetDIDCheckMode(CAiAllocation.DIDCM_ObjTargetArea);
			endif;
		endif;
		return true;
	endproc;
	
	
	///called when event allocation is complete
	export proc void EvtAllocationComplete(^CAiAllocation p_pxAllocation)
		if(m_pxSensor==null) then return; endif;
		
		m_xWorkers = p_pxAllocation^.GetAllObjs();
		
		var string sCommand;
		if(m_bRepairOrBuildUp==true)then
			sCommand="Repair";
		else
			sCommand="Build";
		endif;

		m_pxSensor^.ExecuteGamePlayCommand(m_xWorkers,sCommand,m_xTarget.GetHandle(),{0.0,0.0,0.0},"");
		
		m_iNumWorkers=m_xWorkers.NumEntries();
		var int i;
		for(i=0)cond(i<m_iNumWorkers)iter(i++)do
			m_pxSensor^.AddCheckpoint(this,i,"atto:"+m_xWorkers[i].GetHandle().ToString()+",CurTask,==,BuildUp",60.0);
		endfor;
		m_iIdleWorkers=0;
	endproc;
	
	
	///called when the allocation could not be locked
	export proc void EvtAllocationFailed(^CAiAllocation p_pxAllocation)
		Abort();
		Start();
	endproc;
	
	
	///called when a unit from this allocation has been destroyed
	export proc void EvtAllocationDestroyed(^CAiAllocation p_pxAllocation,int p_iUnitHandle)
		Abort();
		Start();
	endproc;
	
	
	//called when building checkpoits are reached
	export proc void EvtCheckpointReached(int p_iCheckpointId, int p_iObjHandle)
		if(m_pxSensor==null) then return; endif;
		if(p_iCheckpointId<(m_iNumWorkers))then
			m_pxSensor^.AddCheckpoint(this,p_iCheckpointId + m_iNumWorkers,"atto:"+m_xWorkers[p_iCheckpointId].GetHandle().ToString()+",CurTask,==,Idle",0.0);
		elseif(p_iCheckpointId<(2*m_iNumWorkers))then
			m_iIdleWorkers++;
			if(m_iIdleWorkers>=m_iNumWorkers)then
				SetCompleted();
			endif;
		endif;
		m_pxSensor^.RemoveCheckpoint(this,p_iCheckpointId);
	endproc;
	
	
	//called when checkpoints have timed out
	export proc void EvtCheckpointTimeout(int p_iCheckpointId)
		if(m_pxSensor==null) then return; endif;
		if(p_iCheckpointId<(m_iNumWorkers))then
			SetCompleted();
		elseif(p_iCheckpointId<(2*m_iNumWorkers))then
			Abort();
		endif;
		m_pxSensor^.RemoveCheckpoint(this,p_iCheckpointId);
	endproc;
	
	
	///Think
	export proc void Think()
		var bool	bWorkerAlive = false;
		var int		i;
		var int		iC = m_xWorkers.NumEntries();
		
		if(!m_bWarpgate)then
			if(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)>=5)then		
				if(m_iWarpgateCounter==0)then	
					var CAiObjWrap xWarpgate = GetWarpgatePlaced();
					if(xWarpgate.IsValid())then
						var CAiObjWrapList xAllWorker;
						xAllWorker.CopyFrom(GetAllWorker());
						var int j, iD=xAllWorker.NumEntries();
						if(iD>0)then
							for(j=0)cond(j<iD)iter(j++)do
								if(!xAllWorker[j].IsValid())then continue; endif;
								if(xAllWorker[j].GetAttribValue("CurTask")=="Idle")then
									m_pxSensor^.ExecuteGamePlayCommand(xAllWorker[j].GetHandle(),"Build",xWarpgate.GetHandle(),{0.0,0.0,0.0},"");					
								endif;
							endfor;
						endif;
					endif;
					m_iWarpgateCounter=10;
				endif;
				m_iWarpgateCounter--;
			endif;
		endif;
		
		for(i = 0)cond(i < iC)iter(i++)do
			if(m_xWorkers[i].IsValid() == true)then
				bWorkerAlive = true;
				break;
			endif;
		endfor;
		if(bWorkerAlive == false)then
			Abort();
			return;
		endif;
		if(m_xTarget.IsValid() == false)then
			Abort();
			return;
		endif;		
		var int iMaxHP = m_xTarget.GetAttribValueInt("maxhitpoints");
		var int iCurHP = m_xTarget.GetAttribValueInt("hitpoints");		
		if(iCurHP == iMaxHP)then
			SetCompleted();
		endif;
	endproc;
	
	
	//GetWarpgate
	proc CAiObjWrap GetWarpgatePlaced()
		var CAiObjWrap xInvalid;
		var CAiObjWrapList xList;
		var CAiObjQuery xQuery;
		
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetClass("hu_warpgate");
		xQuery.SetClass("ninigi_warpgate",true);
		xQuery.SetClass("aje_warpgate",true);
		
		xList.Clear();
		xQuery.Execute(xList);
		
		if(xList.NumEntries()>0)then
			return xList[0];
		else
			return xInvalid;
		endif;
	endproc;
	
	
	//GetAllWorker
	proc CAiObjWrapList GetAllWorker()
		var CAiObjWrapList xList;
		var CAiObjQuery xQuery;
		
		xQuery.SetOwner(m_iPlayerID);
		xQuery.SetClass("hu_worker");
		xQuery.SetClass("aje_worker",true);
		xQuery.SetClass("ninigi_worker", true);
		
		xList.Clear();
		xQuery.Execute(xList);
	
		return xList;
	endproc;

endclass;
