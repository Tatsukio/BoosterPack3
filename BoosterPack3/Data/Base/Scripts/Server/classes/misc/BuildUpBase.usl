class CBuildUpFactory

	static var ^CBuildUpFactory ms_pxInst;
	
	export static proc ref CBuildUpFactory Get()
		if (ms_pxInst==null) then
			ms_pxInst = new CBuildUpFactory();
		endif;
		return ms_pxInst^;
	endproc;
	
	export static proc void Kill()
		delete ms_pxInst;
	endproc;
	
	export proc ^CBuildUpBase CreateBuildUp(int p_iType)

		var ^CBuildUpBase pxBuildUp;

		if(p_iType == CBuildUpBase.TYPE_FAKE)then
			pxBuildUp = new CBuildUpBase();
		elseif(p_iType == CBuildUpBase.TYPE_SIEGE)then
			pxBuildUp = new CBuildUpBase();
		elseif(p_iType == CBuildUpBase.TYPE_TRANSPORTER)then
			pxBuildUp = new CBuildUpTransporter();
		elseif(p_iType == CBuildUpBase.TYPE_TRANSPORTER_OPEN)then
			pxBuildUp = new CBuildUpTransporterOpen();
		elseif(p_iType == CBuildUpBase.TYPE_WEAPON)then
			pxBuildUp = new CBuildUpWeapon();
		elseif(p_iType == CBuildUpBase.TYPE_WEAPON_TRANSPORTER)then
			pxBuildUp = new CBuildUpWeaponTransporter();
		endif;
		
		return pxBuildUp;
		
	endproc;

endclass;

class CUniversalLinkObj
	
	var CFourCC		m_xLink;
	var CObjHndl	m_xObj;
	var real		m_fFlexDelay;
	var CObjHndl	m_xParentObj;
	
	export constructor()
	endconstructor;

	export destructor()
	enddestructor;

	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		var string sLink = m_xLink.AsString();
		p_rxArc << sLink;
		m_xLink = sLink;
		if(p_iVersion>=8)then
			m_xParentObj.DoKArc(p_rxArc);
		endif;
		m_xObj.DoKArc(p_rxArc);
		if(p_iVersion>=10)then
			p_rxArc << m_fFlexDelay;
		endif;
	endproc;
	
	export proc void SetLink(string p_sLink)
		m_xLink = p_sLink;
	endproc;
	
	export proc CFourCC GetLink()
		return m_xLink;
	endproc;
	
	export proc void SetHandle(CObjHndl p_xObj)
		m_xObj = p_xObj;
	endproc;
	
	export proc CObjHndl GetHandle()
		return m_xObj;
	endproc;
	
	export proc void SetDelay(real p_fDelay)
		m_fFlexDelay = p_fDelay;
	endproc;

	export proc real GetDelay()
		return m_fFlexDelay;
	endproc;
	
	export proc void SetParentObj(CObjHndl p_xObj)
		m_xParentObj = p_xObj;
	endproc;

	export proc CObjHndl GetParentObj()
		return m_xParentObj;
	endproc;
	
		

	
endclass;

class CBuildUpBase

	export const int 	TYPE_NONE					= 0;
	export const int 	TYPE_FAKE					= 1;
	export const int 	TYPE_TRANSPORTER			= 2;
	export const int 	TYPE_TRANSPORTER_OPEN		= 3;
	export const int 	TYPE_LUMBERUPGRADE			= 4;
	export const int 	TYPE_SIEGE					= 5;
	export const int 	TYPE_WEAPON					= 11;
	export const int 	TYPE_WEAPON_LOGCANNON		= 12;
	export const int 	TYPE_WEAPON_TRANSPORTER		= 13;

	var int							m_iType;
	var CObjHndl					m_xParent;
	
	var array CUniversalLinkObj		m_axLinkedObjs;

	var int			m_iAggressionState;

	export constructor()
		SetType(CBuildUpBase.TYPE_FAKE);
		m_iAggressionState = 2;
	endconstructor;

	export destructor()
	enddestructor;


	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		p_rxArc << m_iType;
		var int i, iC = m_axLinkedObjs.NumEntries();
		p_rxArc << iC;
		p_rxArc << m_iAggressionState;
		m_axLinkedObjs = iC;
		for(i=0)cond(i<iC)iter(i++)do
			m_axLinkedObjs[i].DoKArc(p_rxArc, p_iVersion);
		endfor;
		if(p_iVersion>=14)then
			m_xParent.DoKArc(p_rxArc);
		endif;
	endproc;
	

	export proc void OnPostLoad()
	endproc;
	
	export proc void EnableLinkedObjs()
	endproc;

	export proc void OnActionEnd(bool p_bBroken)
	endproc;


	export proc void SetType(int p_iType)
		m_iType = p_iType;
	endproc;


	export proc int GetType()
		return m_iType;
	endproc;

	
	export proc void Kill()
	
		var ^CGameObj pxParent = m_xParent.GetObj();
		
		var int i, iC = m_axLinkedObjs.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			
			var ^CGameObj pxObj = m_axLinkedObjs[i].GetHandle().GetObj();
			if(pxObj==null)then continue; endif;
			if(pxParent!=null)then
				pxParent^.RemGroupedChildren(pxObj^.GetGuid());
			endif;
			pxObj^.Delete();
		endfor;
		
		delete this;
	endproc;

	
	export proc void SetOwner(int p_iOwner)
		var int i, iC = m_axLinkedObjs.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CGameObj pxObj = m_axLinkedObjs[i].GetHandle().GetObj();
			if(pxObj==null)then continue; endif;
			pxObj^.SetOwner(p_iOwner);
		endfor;
	endproc;


	export proc void SetAggressionState(int p_iState)
		m_iAggressionState = p_iState;
	endproc;


	export proc void SetParent(CObjHndl p_xParent)
		m_xParent = p_xParent;
	endproc;


	export proc CObjHndl GetParent()
		return m_xParent;
	endproc;

	
	export proc bool AttackEnemy(^CGameObj p_pxObj, vec3 p_vPos)
		return false;
	endproc;


	export proc void Fight(^CGameObj p_pxTarget, vec3 p_vPos, bool p_bUserCommand)
	endproc;


	export proc void OnActionStart()
		var ^CVelociraptorHandler pxParent=cast<CVelociraptorHandler>(m_xParent.GetObj());
		if (pxParent==null)then return; endif;
		var ^CGameObj pxLinkedObj = GetPrimaryLinkedObj().GetObj();
		if(pxLinkedObj==null)then return; endif;

		var string sAct = pxParent^.GetActionDesc();
		if(sAct == "CActWalk" || sAct == "CActMoveAnim" || sAct == "CActAdvanceWalk")then
		elseif (sAct == "CActRotate")then
		else
			return;
		endif;
		var string sAnim="walk_1";
		if(pxLinkedObj^.HasAnim(sAnim))then
			pxLinkedObj^.SetAnim(sAnim,0);
		endif;
		
		/*var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if (pxParent==null)then return; endif;
		var ^CGameObj pxLinkedObj = GetPrimaryLinkedObj().GetObj();
		if(pxLinkedObj==null)then return; endif;
		
		var int iSpeed = pxParent^.GetDefaultSpeed();
		var string sWalkAnim = "walk_"+iSpeed.ToString();
		var string sRotateAnim = "walk_1";
		var string sAnim = "";
		var string sAct = pxParent^.GetActionDesc();
		
		if(sAct == "CActWalk" || sAct == "CActMoveAnim" || sAct == "CActAdvanceWalk")then
			sAnim = sWalkAnim;
		elseif (sAct == "CActRotate")then
			sAnim = sRotateAnim;
		else
			return;
		endif;
		
		if(pxLinkedObj^.HasAnim(sAnim))then
			pxLinkedObj^.SetSLEAnim(sAnim,9999,true,false);
			//pxLinkedObj^.SetAnim(sAnim, 3);
		endif;*/
	endproc;


	export proc void OnActionEnd()
		var ^CGameObj pxLinkedObj = GetPrimaryLinkedObj().GetObj();
		if(pxLinkedObj==null)then return; endif;
		if(pxLinkedObj^.HasAnim("standanim")) then
			pxLinkedObj^.SetAnim("standanim", 3);
		endif;
	endproc;


	export proc void AddObj(CObjHndl p_xHndl, string p_sLink)
		AddObjFlex(p_xHndl, p_sLink, -1.0, CObjHndl.Invalid());
	endproc;
	
	export proc void AddObjFlex(CObjHndl p_xHndl, string p_sLink, real p_fDelay, CObjHndl p_xParent)
	
		var ^CUniversalLinkObj pxObj = ^(m_axLinkedObjs.NewEntryRef());
		pxObj^.SetHandle(p_xHndl);
		pxObj^.SetLink(p_sLink);
		pxObj^.SetDelay(p_fDelay);
		pxObj^.SetParentObj(p_xParent);
		UpdateLinkedObjs();
	endproc;
	
	export proc void UpdateLinkedObjs()

		var ^CGameObj pxParent = GetParent().GetObj();
		if(pxParent==null)then return; endif;

		var int i, iC = m_axLinkedObjs.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			
			var ^CGameObj pxObj = m_axLinkedObjs[i].GetHandle().GetObj();
			if(pxObj==null)then
				m_axLinkedObjs.DeleteEntry(i);
				i--; iC--;
				continue;
			endif;
			
			var real fDelay = m_axLinkedObjs[i].GetDelay();
			var CFourCC xLink = m_axLinkedObjs[i].GetLink();
			var CObjHndl xParent = m_axLinkedObjs[i].GetParentObj();
		
			if(!xParent.IsValid())then
				xParent = m_xParent;
			endif;
		
			if(fDelay>=0.0)then
				pxObj^.FlexLinkAction(xParent,xLink,fDelay,{0.0,0.0,0.0},"walk_1");
			else
				pxObj^.LinkAction(xParent, xLink);
			endif;
			
			pxParent^.AddGroupedChildren(pxObj^.GetGuid());
			pxObj^.SetVisible(xLink!="NONE");
			pxObj^.SetSelectable(xLink!="NONE");
		endfor;
		
		var ^CTransportObj pxTransportParent = cast<CTransportObj>(GetParent().GetObj());
		if(pxTransportParent!=null)then
			pxTransportParent^.ResetFlag();
			pxTransportParent^.LinkCaptainObj();
		endif;
		
	endproc;
	
	
	export proc void TransferLinkedObjs(^CBuildUpBase p_pxOther)
	
		if(p_pxOther==null)then return; endif;
	
		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;
		
		while(m_axLinkedObjs.NumEntries()>0)do
			var ^CGameObj pxObj = m_axLinkedObjs[0].GetHandle().GetObj();
			if(pxObj==null)then
				m_axLinkedObjs.DeleteEntry(0);
				continue;
			endif;
			pxParent^.RemGroupedChildren(pxObj^.GetGuid());
			pxObj^.TerminateAction();
			
			var bool bDestObj=false;
			var Quat qRot;
			var Quat qSecRot;
			
			begin TryDestruction;
				var string sGfx = pxObj^.GetGfxName()+"_dest";
				if(CSrvWrap.GetGfxMgrBase().FindGraphicSetEntry(sGfx))then
					var ^CUniversalCorpse pxGameObj = cast<CUniversalCorpse>(CSrvWrap.GetObjMgr()^.CreateObj("Corpse",pxObj^.GetOwner(),pxObj^.GetPos(),pxObj^.GetRotation()));
					if(pxGameObj!=null)then
						pxGameObj^.SetSource(pxObj);
						pxGameObj^.Init(sGfx, pxObj^.GetName(), 10.0);
						bDestObj=true;
						qRot=pxParent^.GetRot();
						qSecRot=pxObj^.GetAdditionalRot();
						pxObj^.Delete();
						pxObj = pxGameObj;
					endif;
				endif;
			end TryDestruction;

			if(pxObj^.HasAnim("destroy")) then
				pxObj^.SetAnim("destroy", 1);
			else
				pxObj^.SetAnim("standanim", 3);
			endif;
			p_pxOther^.AddObjFlex(m_axLinkedObjs[0].GetHandle(), m_axLinkedObjs[0].GetLink().AsString(), m_axLinkedObjs[0].GetDelay(), m_axLinkedObjs[0].GetParentObj());
			if(bDestObj)then
				pxObj^.SetRot(qRot);
				pxObj^.SecRotAction(qSecRot,0.0);
			endif;
			m_axLinkedObjs.DeleteEntry(0);
		endwhile;

	endproc;

	export proc CObjHndl GetPrimaryLinkedObj()
		var CObjHndl xHndl;
		if(m_axLinkedObjs.NumEntries()>0)then
			xHndl = m_axLinkedObjs[0].GetHandle();
		endif;
		return xHndl;
	endproc;
	

	export proc CObjHndl GetLinkedObj(int p_iIndex)
		var CObjHndl xHndl;
		if(m_axLinkedObjs.NumEntries()>p_iIndex && p_iIndex>=0)then
			xHndl = m_axLinkedObjs[p_iIndex].GetHandle();
		endif;
		return xHndl;
	endproc;
	

	export proc CFourCC GetPrimaryLink()
		var CFourCC xLink;
		if(m_axLinkedObjs.NumEntries()>0)then
			xLink = m_axLinkedObjs[0].GetLink();
		endif;
		return xLink;
	endproc;

endclass;


class CBuildUpTransporter inherit CBuildUpBase

	var CObjList m_xPassengers;

	export constructor()
		SetType(CBuildUpBase.TYPE_TRANSPORTER);
	endconstructor;
	
	export proc void SetParent(CObjHndl p_xParent)
		super.SetParent(p_xParent);
		var ^CTransportObj pxObj=cast<CTransportObj>(p_xParent.GetObj());
		if(pxObj!=null)then
			//RT#16031 added CHoverCraft condition
			if(cast<CShip>(pxObj)!=null || cast<CHoverCraft>(pxObj)!=null)then
				pxObj^.SetTransportClass(2);
			else
				pxObj^.SetTransportClass(1);
			endif;
		endif;
	endproc;

	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		super.DoKArc(p_rxArc,p_iVersion);
		if(p_iVersion>=14)then
			var int i, iC = m_xPassengers.NumEntries();
			p_rxArc << iC;
			m_xPassengers = iC;
			for(i=0)cond(i<iC)iter(i++)do
				m_xPassengers[i].DoKArc(p_rxArc);
			endfor;
		endif;
	endproc;

	export proc void AddPassenger(CObjHndl p_xPassenger)
		m_xPassengers.Include(p_xPassenger);
		UpdateLinkedObjs();
	endproc;

	export proc void Kill()
		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent!=null)then
			while(m_xPassengers.NumEntries()>0)do
				if(!pxParent^.OnDismount(m_xPassengers[0]))then
					m_xPassengers.DeleteEntry(0);
				endif;
			endwhile;
		endif;
		super.Kill();
	endproc;


	export proc void RemovePassenger(CObjHndl p_xPassenger)
		if(m_xPassengers.FindEntry(p_xPassenger)==-1)then return; endif;

		m_xPassengers.RemEntry(p_xPassenger);

		var ^CGameObj pxPassenger = p_xPassenger.GetObj();
		if(pxPassenger==null)then return; endif;

		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;
		
		pxParent^.RemGroupedChildren(pxPassenger^.GetGuid());

		UpdateLinkedObjs();
	endproc;


	export proc void UpdateLinkedObjs()

		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;

		super.UpdateLinkedObjs();
		
		if(GetType()==CBuildUpBase.TYPE_TRANSPORTER)then
			var CFourCC xInvalidLink;

			var int i, iC = m_xPassengers.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CGameObj pxPassenger = m_xPassengers[i].GetObj();
				if(pxPassenger==null)then
					m_xPassengers.DeleteEntry(i);
					i--; iC--;
					continue;
				endif;
				pxPassenger^.SetVisible(false);
				pxPassenger^.LinkAction(m_xParent,xInvalidLink);
				pxParent^.AddGroupedChildren(pxPassenger^.GetGuid());
			endfor;
			
		endif;
	
	endproc;


endclass;


class CBuildUpTransporterOpen inherit CBuildUpTransporter

	var array string m_asIgnoreLinks;

	export constructor()
		SetType(CBuildUpBase.TYPE_TRANSPORTER_OPEN);
	endconstructor;

	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		super.DoKArc(p_rxArc, p_iVersion);
		if(p_iVersion>=9)then
			var int i, iC = m_asIgnoreLinks.NumEntries();
			p_rxArc << iC;
			m_asIgnoreLinks = iC;
			for(i=0)cond(i<iC)iter(i++)do
				p_rxArc << m_asIgnoreLinks[i];
			endfor;
		endif;
	endproc;
	
	export proc void AddIgnoreLink(string p_sLink)
		m_asIgnoreLinks.AddEntry(p_sLink);
	endproc;

	export proc void Fight(^CGameObj p_pxTarget, vec3 p_vPos, bool p_bUserCommand)
		var int i, iC = m_xPassengers.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CFightingObj pxObj = cast<CFightingObj>(m_xPassengers[i].GetObj());
			if(pxObj==null)then continue; endif;
			pxObj^.Fight(p_pxTarget, p_vPos, p_bUserCommand);
		endfor;
	endproc;


	export proc void UpdateLinkedObjs()

		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent==null)then return; endif;

		super.UpdateLinkedObjs();

		if(m_axLinkedObjs.NumEntries()<=0)then return; endif;

		var ^CGameObj pxObj = m_axLinkedObjs[0].GetHandle().GetObj();
		if(pxObj==null)then return; endif;
		
		var CObjList xPassengers = m_xPassengers;
		
		var string sLink	= "Dri";
		var int iNumber		= 1;
		
		var int i, iC = 10;
		for(i=0)cond(i<iC)iter(i++)do
			var CFourCC xLink	= "Dri" + i.ToString();
			var vec3 vP;
			if(m_asIgnoreLinks.FindEntry(xLink.AsString())!=-1)then continue; endif;
			if(pxObj^.GetLinkPosObj(xLink, vP))then
				if(xPassengers.NumEntries()>0)then
					var ^CGameObj pxPassenger = xPassengers[0].GetObj();
					if(pxPassenger!=null)then
						//pxPassenger^.SetDbgCrashOnSetAction(false);
						pxPassenger^.LinkAction(pxObj^.GetHandle(), xLink);
						//pxPassenger^.SetDbgCrashOnSetAction(true);
						pxParent^.AddGroupedChildren(pxPassenger^.GetGuid());
						var string sLoopAnim = pxParent^.GetPassengerLoopAnim();
						if(pxPassenger^.HasAnim(sLoopAnim) && pxPassenger^.GetCurrentAnimName()!=sLoopAnim)then
							pxPassenger^.SetAnim(sLoopAnim, 3);
						endif;
					endif;
					xPassengers.DeleteEntry(0);
				endif;
			endif;
		endfor;
		
	endproc;

	export proc void RemovePassenger(CObjHndl p_xPassenger)
		super.RemovePassenger(p_xPassenger);
		var ^CGameObj pxObj=p_xPassenger.GetObj();
		if(pxObj!=null)then
			var Quat qAddRot = pxObj^.GetAdditionalRot();
			if (!qAddRot.IsIdentity()) then
				var vec3 vCurDir = {0.0f, 1.0f, 0.0f};
				pxObj^.GetRot().VecRotateU(vCurDir);
				qAddRot.VecRotateU(vCurDir);
				var real fD = ({0.0f, 1.0f, 0.0}-vCurDir).Abs2();
				qAddRot.SetIdentity();
				pxObj^.SecRotAction(qAddRot, fD);
			endif;
		endif;
	endproc;

	export proc void EnableLinkedObjs()
		super.EnableLinkedObjs();
		var int i, iC = m_xPassengers.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CGameObj pxObj = m_xPassengers[i].GetObj();
			if(pxObj==null)then continue; endif;
			if(pxObj^.GetFSM()==null)then continue; endif;
			pxObj^.GetFSM()^.Enable(true);
		endfor;
	endproc;

endclass;


class CBuildUpWeapon inherit CBuildUpBase

	var CObjList			m_xEnemies;
	var CObjHndl			m_xCurEnemy;

	var string				m_sWeaponNode;
	var string				m_sWeaponClass;
	var real				m_fRange;
	var CRegionSink			m_xSink;
	var CGuid				m_xRegionGuid;

	var bool				m_bAdditionalWeapon;
	var bool				m_bAutoAttack;
	var bool				m_bCanRotate;
	var bool				m_bCanSwitchAttackMode;
	
	var CObjHndl			m_xCaptain;

	var real				m_fDmg;
	var real				m_fEndDmg;
	var real				m_fProjectileFallOff;
	var real				m_fProjectileSpeed;
	var real				m_fProjectileJitter;
	var real				m_fHitRange;
	var real				m_fArmorPiercing;
	var real				m_fAttackRange;
	var real				m_fDuration;
	var int					m_iWeaponSizeClass;
	var bool				m_bPenetration;
	var string				m_sProjectile;

	var int					m_iAttackState;
	
	const int				ATTACKSTATE_WALK		= 0;
	const int				ATTACKSTATE_WALK2ATTACK	= 1;
	const int				ATTACKSTATE_ATTACK		= 2;
	const int				ATTACKSTATE_ATTACK2WALK	= 3;

	export constructor()
		SetType(CBuildUpBase.TYPE_WEAPON);
		m_bAdditionalWeapon = false;
		m_bCanSwitchAttackMode = false;

		m_xSink.m_xOnObjAdd = OnEnemyAdd;
		m_xSink.m_xOnObjRem = OnEnemyRem;
	endconstructor;

	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		super.DoKArc(p_rxArc, p_iVersion);
		p_rxArc << m_xRegionGuid;
		p_rxArc << m_bAdditionalWeapon;
		p_rxArc << m_bCanRotate;
		p_rxArc << m_iAttackState;
		p_rxArc << m_sWeaponNode;
		m_xCurEnemy.DoKArc(p_rxArc);
		m_xEnemies.DoKArc(p_rxArc);
		if(p_iVersion>=11)then
			p_rxArc << m_bAutoAttack;
			p_rxArc << m_bCanSwitchAttackMode;
		endif;
		if(p_iVersion>=12)then
			m_xCaptain.DoKArc(p_rxArc);
		endif;
	endproc;
	
	export proc void Kill()
		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent!=null)then
			pxParent^.m_xOnBusyTimer.Clear();
		endif;
		var int i, iC = m_axLinkedObjs.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_axLinkedObjs[i].GetHandle()==m_xCaptain)then
				m_axLinkedObjs.DeleteEntry(i);
				i--; iC--;
			endif;
		endfor;
		super.Kill();
	endproc;



	export proc void AddObjCaptain(CObjHndl p_xHndl, string p_sLink, real p_fDelay, CObjHndl p_xParent)
		m_xCaptain = p_xHndl;
		return AddObjFlex(p_xHndl, p_sLink, p_fDelay, p_xParent);
	endproc;
	

	export proc void SetParent(CObjHndl p_xParent)
		super.SetParent(p_xParent);
		var ^CTransportObj pxParent = cast<CTransportObj>(p_xParent.GetObj());
		if(pxParent!=null)then
			pxParent^.m_xOnBusyTimer = OnBusyTimer;
		endif;
	endproc;

	
	export proc void SetWeaponClass(string p_sWeaponClass)
		m_sWeaponClass = p_sWeaponClass;
		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if(pxParent==null)then return; endif;
		var CTechTree xTechTree = pxParent^.GetTechTree();
		var ^CTechTree.CNode pxWeapons = xTechTree.FindNode("/Objects/"+pxParent^.GetTribeName()+"/Weapons");
		if(pxWeapons==null)then return; endif;
		var array ^CTechTree.CNode apxWeapons;
		var int i, iC = pxWeapons^.NumSubs();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CTechTree.CNode pxWeaponNode = pxWeapons^.GetSub(i);
			if(pxWeaponNode==null)then continue; endif;
			var ^CTechTree.CNode pxNode = pxWeaponNode^.GetSub("Users");
			if(pxNode==null)then continue; endif;
			var int iA, iAC = pxNode^.NumSubs();
			for(iA=0)cond(iA<iAC)iter(iA++)do
				if(pxNode^.GetSubValue(iA)==p_sWeaponClass)then
					apxWeapons.AddEntry(pxWeaponNode);
				endif;
			endfor;
		endfor;
		
		iC = apxWeapons.NumEntries();
		var int iIndex = -1;
		var int iMaxLevel = -1;
		var int iCondLevel = pxParent^.GetLevel();
		var real fMaxDmg = 0.0;
		var real fMaxRange = 0.0;
		for(i=0)cond(i<iC)iter(i++)do
			var ^CTechTree.CNode pxNode = apxWeapons[i];
			var int iLevel = pxNode^.GetSubValueI("level")-1;
			var real fRange = pxNode^.GetSubValueF("range");
			var real fDmg = pxNode^.GetSubValueF("damage");
			if(iLevel>iCondLevel)then continue; endif;
			if(iLevel<iMaxLevel)then continue; endif;
			if(fRange<fMaxRange)then continue; endif;
			if(fDmg<fMaxDmg)then continue; endif;
			iMaxLevel=iLevel; fMaxRange=fRange; fMaxDmg=fDmg; iIndex=i;
		endfor;
		
		if(iIndex!=-1)then
			SetWeapon(apxWeapons[iIndex]^.GetAbsPath());
		endif;
		
	endproc;

	
	export proc void UpdateWeapon()
		SetWeaponClass(m_sWeaponClass);
	endproc;


	export proc void UpdateCaptainObj()
		if(m_xCaptain.IsValid())then
			var ^CCaptain pxCaptain=cast<CCaptain>(m_xCaptain.GetObj());
			if(pxCaptain!=null)then
				pxCaptain^.UpdateGfx();
			endif;
		endif;
	endproc;


	export proc void SetWeapon(string p_sWeaponNode)
	
		m_sWeaponNode = p_sWeaponNode;
		
		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if(pxParent==null)then return; endif;
		
		var ^CTechTree.CNode pxWeaponNode = pxParent^.GetTechTree().FindNode(m_sWeaponNode);
		if(pxWeaponNode==null)then return; endif;

		m_fDmg 					= 0.0;
		m_fEndDmg				= 0.0;
		m_fProjectileFallOff	= 0.0;
		m_fProjectileSpeed		= 0.0;
		m_fProjectileJitter		= 0.0;
		m_fHitRange				= 0.0;
		m_fArmorPiercing		= 0.0;
		m_fAttackRange			= 0.0;
		m_iWeaponSizeClass		= 0;
		m_bPenetration			= false;

		var ^CTechTree.CNode pxProjectiles = pxWeaponNode^.GetSub("Projectile");
		if (pxProjectiles!=null) then
			if(pxProjectiles^.NumSubs() > 0)then
				m_sProjectile			= pxProjectiles^.GetSubValue("0");
			endif;
		endif;

		var real fFrequency		= pxWeaponNode^.GetSubValueF("frequency");
		if(fFrequency==0.0)then
			fFrequency = 1.0;
		endif;
		m_fDuration = (60.0/fFrequency);

		m_fDmg 					= pxWeaponNode^.GetSubValueF("damage");
		m_fEndDmg				= pxWeaponNode^.GetSubValueF("enddamage");
		m_fProjectileFallOff	= pxWeaponNode^.GetSubValueF("bulletfalloff");
		m_fProjectileSpeed		= pxWeaponNode^.GetSubValueF("bulletspeed");
		m_fProjectileJitter		= pxWeaponNode^.GetSubValueF("jitter");
		m_fArmorPiercing		= pxWeaponNode^.GetSubValueF("armorpiercing");
		m_fHitRange				= pxWeaponNode^.GetSubValueF("hitrange");
		m_iWeaponSizeClass		= pxWeaponNode^.GetSubValueI("unit_size",0);
		m_bPenetration			= pxWeaponNode^.GetSubValueB("penetration");

		var real fRange			= pxWeaponNode^.GetSubValueF("range");
		
		if(m_fAttackRange!=fRange)then
			m_fAttackRange=fRange;
			DeleteAggressionRegion();
			CreateAggressionRegion();
		endif;

		m_fDuration		*= pxParent^.GetTechTreeModifier("WeaponDuration",true);
		m_fDuration		+= pxParent^.GetTechTreeModifier("WeaponDuration",false);

		m_fDmg			*= pxParent^.GetTechTreeModifier("ranged_damage",true);
		m_fDmg			+= pxParent^.GetTechTreeModifier("ranged_damage",false);

		m_fDmg			*= pxParent^.GetTechTreeModifier("Damage",true);
		m_fDmg			+= pxParent^.GetTechTreeModifier("Damage",false);

	endproc;

	
	export proc string GetWeapon()
		return m_sWeaponNode;
	endproc;
	
	export proc real GetDmg()
		return m_fDmg;
	endproc;
	
	export proc real GetEndDmg()
		return m_fEndDmg;
	endproc;
	
	export proc real GetProjectileFallOff()
		return m_fProjectileFallOff;
	endproc;
	
	export proc real GetProjectileSpeed()
		return m_fProjectileSpeed;
	endproc;
	
	export proc real GetProjectileJitter()
		return m_fProjectileJitter;
	endproc;
	
	export proc real GetHitRange()
		return m_fHitRange;
	endproc;
	
	export proc real GetArmorPiercing()
		return m_fArmorPiercing;
	endproc;
	
	export proc real GetAttackRange()
		return m_fAttackRange;
	endproc;
	
	export proc real GetWeaponDuration()
		return m_fDuration;
	endproc;
	
	export proc int GetWeaponSizeClass()
		return m_iWeaponSizeClass;
	endproc;
	
	export proc bool GetPenetration()
		return m_bPenetration;
	endproc;
	
	export proc string GetProjectile()
		return m_sProjectile;
	endproc;
	
	export proc vec3 GetProjectileStartPos()
		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if(pxParent==null)then return {0.0,0.0,0.0}; endif;
		var ^CGameObj pxObj = GetPrimaryLinkedObj().GetObj();
		if(pxObj==null)then return pxParent^.GetProjectileStartPos(); endif;
		var vec3 vPos; var CFourCC xLink = "Proj";
		if(!pxObj^.GetLinkPosWorld(xLink, vPos))then
			return pxParent^.GetProjectileStartPos();
		endif;
		return vPos;
	endproc;
	
	export proc void OnPostLoad()
		
		if(!m_xRegionGuid.IsNull())then
			var int iIdx = CSrvWrap.GetRegionMgr().FindRegion(m_xRegionGuid);
			if (iIdx>=0) then
				var ^CRegion pxRegion = CSrvWrap.GetRegionMgr().GetRegion(iIdx);
				if (pxRegion!=null) then
					m_xSink.SetRegion(pxRegion);
					pxRegion^.BindToObj(m_xParent);
					m_xSink.Subscribe();
				endif;
			else
				var CGuid xG; m_xRegionGuid = xG;
			endif;
		endif;
		
		if(!m_sWeaponNode.IsEmpty())then
			SetWeapon(m_sWeaponNode);
		endif;
		
		var ^CProduct pxBuildUpObj = cast<CProduct>(GetPrimaryLinkedObj().GetObj());
		if(pxBuildUpObj!=null)then
			var ^CBuildUpFight pxFight = cast<CBuildUpFight>(pxBuildUpObj^.GetCurTask());
			if(pxFight!=null)then
				pxFight^.SetBuildUp(this);
			endif;
		endif;
		
	endproc;

	export proc void EnableLinkedObjs()
		super.EnableLinkedObjs();
		var ^CProduct pxBuildUpObj = cast<CProduct>(GetPrimaryLinkedObj().GetObj());
		if(pxBuildUpObj!=null)then
			if(pxBuildUpObj^.GetFSM()!=null)then
				pxBuildUpObj^.GetFSM()^.Enable(true);
			endif;
		endif;
		var ^CCaptain pxCaptain = cast<CCaptain>(m_xCaptain.GetObj());
		if(pxCaptain!=null)then
			if(pxCaptain^.GetFSM()!=null)then
				pxCaptain^.GetFSM()^.Enable(true);
			endif;
		endif;

	endproc;

	export proc void SetCanRotate(bool p_bValue)
		m_bCanRotate = p_bValue;
	endproc;

	
	export proc bool CanRotate()
		return m_bCanRotate;
	endproc;
	
	
	export proc void SetCanSwitchAttackMode(bool p_bValue)
		m_bCanSwitchAttackMode = p_bValue;
	endproc;

	
	export proc bool CanSwitchAttackMode()
		return m_bCanSwitchAttackMode;
	endproc;
	
	
	export proc bool IsInAttackMode()
		return (m_iAttackState==ATTACKSTATE_WALK2ATTACK) || (m_iAttackState==ATTACKSTATE_ATTACK);
	endproc;
	
	
	export proc void SetAdditionalWeapon(bool p_bValue)
		m_bAdditionalWeapon = p_bValue;
		SetAutoAttack(p_bValue);
	endproc;


	export proc bool GetAdditionalWeapon()
		return m_bAdditionalWeapon;
	endproc;


	export proc void SetAutoAttack(bool p_bValue)
		if(m_bAutoAttack != p_bValue)then
			m_bAutoAttack = p_bValue;
			if(m_bAutoAttack)then
				CreateAggressionRegion();
			else
				DeleteAggressionRegion();
			endif;
		endif;
	endproc;


	export proc bool GetAutoAttack()
		return m_bAutoAttack;
	endproc;


	export proc bool IsBusy()
		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent==null)then return false; endif;
		return pxParent^.IsBuildUpBusy();
	endproc;

	proc void OnBusyTimer()
		if(m_iAttackState==ATTACKSTATE_WALK2ATTACK)then
			m_iAttackState = ATTACKSTATE_ATTACK;
		elseif(m_iAttackState==ATTACKSTATE_ATTACK2WALK)then
			m_iAttackState = ATTACKSTATE_WALK;
		endif;
	endproc;

	proc void CreateAggressionRegion()
	
		if(!m_xRegionGuid.IsNull())then return; endif;

		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;

		var ^CRegionMgr pxRM = ^(CSrvWrap.GetRegionMgr());
		if (pxRM!=null) then

			var real fRange = GetAttackRange() + pxParent^.GetCollisionRadius() + 20.0;

			var vec3 vDimension;
			vDimension.SetXYZ(fRange, fRange, 0.0);
			
			var int iIdx = pxRM^.CreateRegion("WeaponBuildUp_"+pxParent^.GetName()+"_"+Random.GetInt().ToString(),  010b, pxParent^.GetPos(), vDimension);
			if(iIdx >= 0)then
				
				var ^CRegion pxRegion = pxRM^.GetRegion(iIdx);
				m_xRegionGuid = pxRegion^.GetGUID();
				m_xSink.SetRegion(pxRegion);
				pxRegion^.BindToObj(GetPrimaryLinkedObj());
				m_xSink.Subscribe();
			endif;
		endif;
		
	endproc;

	
	proc void DeleteAggressionRegion()
		if(!m_xRegionGuid.IsNull())then
			var ^CRegionMgr pxRM = ^(CSrvWrap.GetRegionMgr());
			if (pxRM!=null) then
				var int iIdx = CSrvWrap.GetRegionMgr().FindRegion(m_xRegionGuid);
				if(iIdx >= 0)then
					var ^CRegion pxRegion = pxRM^.GetRegion(iIdx);
					m_xSink.Unsubscribe();
					if(pxRegion!=null)then
						pxRegion^.Unbind();
					endif;
					m_xSink.DeleteRegion();
					var CGuid xNew;
					m_xRegionGuid = xNew;
				endif;
			endif;
		endif;

	endproc;


	proc bool OnEnemyAdd(CObjHndl p_xHndl)
		var ^CFightingObj pxEnemy = cast<CFightingObj>(p_xHndl.GetObj());
		if(pxEnemy==null)then return false; endif;
		m_xEnemies.Include(p_xHndl);
		return true;
	endproc;


	export proc void Fight(^CGameObj p_pxTarget, vec3 p_vPos, bool p_bUserCommand)
		InvokeFight(p_pxTarget, p_vPos, p_bUserCommand, false);
	endproc;


	export proc void InvokeFight(^CGameObj p_pxTarget, vec3 p_vPos, bool p_bNewUserCommand, bool p_bOldTaskEnd)

		if(!GetAutoAttack())then return; endif;
		if(p_pxTarget==null)then return; endif;

		var ^CProduct pxBuildUpObj = cast<CProduct>(GetPrimaryLinkedObj().GetObj());
		if(pxBuildUpObj==null)then return; endif;

		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if(pxParent==null)then return; endif;
		
		if(pxParent^.IsTrapped())then return; endif;

 		if(pxParent^.GetTransportObj().IsValid())then return; endif;
 		if(p_pxTarget^.GetHandle()==m_xParent)then return; endif;
 		
 		if(p_pxTarget^.GetOwner()!=-1 && p_pxTarget^.GetOwner()==pxParent^.GetOwner())then return; endif;
 		
		var bool bOldUserCommand = false;
		var ^CTask pxTask = pxBuildUpObj^.GetCurTask();
		if(pxTask!=null)then
			bOldUserCommand = pxTask^.IsUserCommand();
			if(p_bOldTaskEnd)then
				bOldUserCommand = false;
			endif;
		endif;
	
		if(bOldUserCommand && !p_bNewUserCommand)then return; endif;

		if(!GetAdditionalWeapon() && pxParent^.IsInFight())then return; endif;
		
		if(p_pxTarget!=null)then
			m_xCurEnemy = p_pxTarget^.GetHandle();
		endif;

		var ^CBuildUpFight pxFightTask = cast<CBuildUpFight>(pxTask);
		if(pxFightTask!=null)then
			pxFightTask^.UpdateEnemy(m_xCurEnemy);
	   		pxFightTask^.SetUserCommand(p_bNewUserCommand);
		else
    		pxFightTask=cast<CBuildUpFight>(CSrvWrap.GetUSLFactoryMgr().CreateState(pxBuildUpObj^.GetFSM(),"BUFight"));
    		pxFightTask^.Init(m_xParent,m_xCurEnemy, this);
	   		pxFightTask^.SetUserCommand(p_bNewUserCommand);
			pxBuildUpObj^.AddTask(pxFightTask, false);
    	endif;

	endproc;


	export proc bool StartFightingTask(bool p_bOldTaskEnd)
	
		if(m_iAggressionState==1 || m_iAggressionState==-1)then return false; endif;
		if(!GetAutoAttack())then return false; endif;
		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if(pxParent==null)then return false; endif;
		if(!GetAdditionalWeapon() && pxParent^.IsInFight())then return false; endif;
		var CObjList xList = m_xEnemies;
		
		pxParent^.SortEnemyList(xList, GetAttackRange(), false, false);
		
		if(xList.NumEntries()<=0)then return false; endif;
		var ^CFightingObj pxObj = cast<CFightingObj>(xList[0].GetObj());
		if(pxObj==null)then return false; endif;
		InvokeFight(pxObj, pxObj^.GetPos(), false, p_bOldTaskEnd);
		
    	return true;
	endproc;

	proc bool OnEnemyRem(CObjHndl p_xHndl)
		m_xEnemies.RemEntry(p_xHndl);
		return true;
	endproc;

		
	export proc bool SwitchToAttackMode()

		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent==null)then return false; endif;

		if(!CanSwitchAttackMode())then
			pxParent^.SwitchToAttackMode();
			return false;
		endif;

		if(m_iAttackState==ATTACKSTATE_WALK || m_iAttackState==ATTACKSTATE_ATTACK2WALK)then
			pxParent^.SetBuildUpBusy(1.5);
			pxParent^.SwitchToAttackMode();
			m_iAttackState = ATTACKSTATE_WALK2ATTACK;
		endif;
		if(m_iAttackState==ATTACKSTATE_WALK2ATTACK)then
			return true;
		endif;
		return false;		
	endproc;


	export proc void ResetRotation()
		var ^CGameObj pxObj = GetPrimaryLinkedObj().GetObj();
		if(pxObj!=null)then
			var Quat qAddRot = pxObj^.GetAdditionalRot();
			//var bool bRotate = pxObj^.GetSecActionDesc()!="CAct";

			if (!qAddRot.IsIdentity()) then
				var vec3 vCurDir = {0.0f, 1.0f, 0.0f};
				pxObj^.GetRot().VecRotateU(vCurDir);
				qAddRot.VecRotateU(vCurDir);
				var real fD = ({0.0f, 1.0f, 0.0}-vCurDir).Abs2();
				qAddRot.SetIdentity();
				pxObj^.SecRotAction(qAddRot, fD);
			endif;
		endif;
	endproc;
	

	export proc bool SwitchToWalkMode()

		if(!CanSwitchAttackMode())then return false; endif;

		if(CanRotate())then
			ResetRotation();
		endif;

		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent==null)then return false; endif;

		if(m_iAttackState==ATTACKSTATE_ATTACK || m_iAttackState==ATTACKSTATE_WALK2ATTACK)then
			pxParent^.SetBuildUpBusy(1.0);
			pxParent^.SwitchToWalkMode();
			m_iAttackState = ATTACKSTATE_ATTACK2WALK;
		endif;
		if(m_iAttackState==ATTACKSTATE_ATTACK2WALK)then
			return true;
		endif;
		return false;		
	endproc;

		
	export proc bool RotateToEnemy(^CGameObj p_pxEnemy, vec3 p_vPos)
	
		if(!CanRotate())then return false; endif;
		var ^CGameObj pxObj = GetPrimaryLinkedObj().GetObj();
		if(pxObj==null)then return false; endif;

		var Quat qAddRot = pxObj^.GetAdditionalRot();
		
		if(p_pxEnemy!=null)then
			p_vPos = p_pxEnemy^.GetPos();
		endif;
		
		var vec3 vEnemyDirection	= (p_vPos-pxObj^.GetPos()).GetNormalized();

		vEnemyDirection.SetZ(0.0f);
		vEnemyDirection.Normalize();
		

		var vec3 vSelfDirection		= {0.0f, 1.0f, 0.0};

		pxObj^.GetRot().VecRotateU(vSelfDirection);
		qAddRot.VecRotateU(vSelfDirection);

		vSelfDirection.SetZ(0.0f);
		vSelfDirection.Normalize();


		var real fDifference = (vEnemyDirection-vSelfDirection).Abs2()*0.5f;

		if (fDifference > 0.1f) then
			if(pxObj^.GetSecActionDesc()=="CAct")then
				var Quat qR; qR.FromXYDir(vEnemyDirection.GetX(), vEnemyDirection.GetY());
				qR /= pxObj^.GetRot();
				pxObj^.SecRotAction(qR, fDifference);
			endif;
			return true;
		endif;

		return false;
		
	endproc;
		
		
	export proc bool AttackEnemy(^CFightingObj p_pxEnemy, vec3 p_vPos)

		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if (pxParent==null) then return false; endif;
	
		var ^CGameObj pxObj = GetPrimaryLinkedObj().GetObj();
		if(pxObj==null)then return false; endif;
		
		if(pxObj^.HasAnim("attack_front"))then
			pxObj^.SetAnim("attack_front", 1);
		endif;
		
		pxParent^.CreateProjectileAndShoot(p_pxEnemy, p_vPos);

		var real fDuration = pxParent^.GetWeaponDuration();
		var ^CTransportObj pxTOParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxTOParent!=null)then
			pxTOParent^.DoCaptainAttackAnim();
			pxTOParent^.SetBuildUpBusy(fDuration);
		endif;
		pxParent^.WaitAction(fDuration);
		return true;
		
	endproc;
	
	
	export proc bool AutoAttackEnemy(^CFightingObj p_pxEnemy)
	
		var ^CFightingObj pxParent = cast<CFightingObj>(m_xParent.GetObj());
		if (pxParent==null) then return false; endif;
	
		var ^CGameObj pxObj = GetPrimaryLinkedObj().GetObj();
		if(pxObj==null)then return false; endif;
		
		if(pxObj^.HasAnim("attack_front"))then
			pxObj^.SetAnim("attack_front", 1);
		endif;
		
		pxParent^.CreateProjectileAndShootBuildUp(p_pxEnemy, p_pxEnemy^.GetPos(), this);

		var ^CTransportObj pxTOParent = cast<CTransportObj>(m_xParent.GetObj());
		if (pxTOParent==null) then return false; endif;

		if(!GetAdditionalWeapon())then
			pxTOParent^.DoBuildUpCaptainAttackAnim();
		else
			if(m_xCaptain.IsValid())then
				var ^CGameObj pxCaptain = m_xCaptain.GetObj();
				var string sAnim = pxTOParent^.GetCaptainAttackAnim();
				if(pxCaptain^.HasAnim(sAnim))then
					pxCaptain^.SetAnim(sAnim, 1);
				endif;
			endif;
		endif;

		var real fDuration = GetWeaponDuration();

		pxTOParent^.SetBuildUpBusy(fDuration);

		return true;
		
	endproc;
	
	
	export proc void StopFighting()
		
		var ^CProduct pxBuildUpObj = cast<CProduct>(GetPrimaryLinkedObj().GetObj());
		if(pxBuildUpObj==null)then return; endif;

		var ^CBuildUpFight pxFightTask = cast<CBuildUpFight>(pxBuildUpObj^.GetCurTask());
		if(pxFightTask!=null)then
			pxFightTask^.Break();
    	endif;
	endproc;


	export proc void UpdateLinkedObjs()
		super.UpdateLinkedObjs();
		if(!m_xCaptain.IsValid())then return; endif;
		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent==null)then return; endif;
		var string sAnim = pxParent^.GetCaptainAnim();
		if(sAnim.IsEmpty())then return; endif;
		if(m_xCaptain.GetObj()^.HasAnim(sAnim))then
			m_xCaptain.GetObj()^.SetAnim(sAnim,3);
		endif;
	endproc;

endclass;


class CBuildUpWeaponTransporter inherit CBuildUpWeapon

	var CObjList m_xPassengers;

	export constructor()
		SetType(CBuildUpBase.TYPE_WEAPON_TRANSPORTER);
	endconstructor;
	
	export proc void DoKArc(ref CArc p_rxArc, int p_iVersion)
		super.DoKArc(p_rxArc,p_iVersion);
		if(p_iVersion>=14)then
			var int i, iC = m_xPassengers.NumEntries();
			p_rxArc << iC;
			m_xPassengers = iC;
			for(i=0)cond(i<iC)iter(i++)do
				m_xPassengers[i].DoKArc(p_rxArc);
			endfor;
		endif;
	endproc;

	export proc void AddPassenger(CObjHndl p_xPassenger)
		m_xPassengers.Include(p_xPassenger);
		UpdateLinkedObjs();
	endproc;

	export proc void Kill()
		var ^CTransportObj pxParent = cast<CTransportObj>(m_xParent.GetObj());
		if(pxParent!=null)then
			while(m_xPassengers.NumEntries()>0)do
				if(!pxParent^.OnDismount(m_xPassengers[0]))then
					m_xPassengers.DeleteEntry(0);
				endif;
			endwhile;
		endif;
		super.Kill();
	endproc;


	export proc void RemovePassenger(CObjHndl p_xPassenger)
		if(m_xPassengers.FindEntry(p_xPassenger)==-1)then return; endif;

		m_xPassengers.RemEntry(p_xPassenger);

		var ^CGameObj pxPassenger = p_xPassenger.GetObj();
		if(pxPassenger==null)then return; endif;

		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;
		
		pxParent^.RemGroupedChildren(pxPassenger^.GetGuid());

		UpdateLinkedObjs();
	endproc;


	export proc void UpdateLinkedObjs()

		var ^CGameObj pxParent = m_xParent.GetObj();
		if(pxParent==null)then return; endif;

		super.UpdateLinkedObjs();
		
		if(GetType()==CBuildUpBase.TYPE_WEAPON_TRANSPORTER)then

			var CFourCC xInvalidLink;

			var int i, iC = m_xPassengers.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CGameObj pxPassenger = m_xPassengers[i].GetObj();
				if(pxPassenger==null)then
					m_xPassengers.DeleteEntry(i);
					i--; iC--;
					continue;
				endif;
				pxPassenger^.SetVisible(false);
				pxPassenger^.LinkAction(m_xParent,xInvalidLink);
				pxParent^.AddGroupedChildren(pxPassenger^.GetGuid());
			endfor;
			
		endif;
	
	endproc;

endclass;